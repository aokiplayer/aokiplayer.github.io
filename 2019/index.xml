<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019 :: Yagamo Style</title>
    <link>https://yagamo-style.com/2019/index.html</link>
    <description></description>
    <generator>Hugo</generator>
    <language>ja-JP</language>
    <lastBuildDate>Fri, 20 Dec 2019 16:56:23 +0900</lastBuildDate>
    <atom:link href="https://yagamo-style.com/2019/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Apple の iOS/Swift 認定資格を受験してみた</title>
      <link>https://yagamo-style.com/2019/12/20/swift-exam-impression/index.html</link>
      <pubDate>Fri, 20 Dec 2019 16:56:23 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/12/20/swift-exam-impression/index.html</guid>
      <description>2018 年 11 月 26 日の Apple の Newsroom 記事 Apple、Hour of Codeにより、さらに多くの学生にプログラミング教育を提供 - Apple (日本) で述べられているように、 Apple は主に学生をターゲットとした iOS および Swift の認定資格をリリースしました。&#xA;このカリキュラムを履修した学生は、Swiftについての知識、アプリケーション開発ツール、アプリケーションのコアコンポーネントの知識について認定を受けることもできます。App Development with Swift Level 1認定試験は、世界中のCertiport認定試験センターを通じて実施されます。&#xA;日本ではこれまで試験が配信されていませんでしたが、約 1 年後の 2019 年 12 月 10 日から、 Certiport の代理店である オデッセイ コミュニケーションズ から配信が開始されました。&#xA;配信開始日の一番早い時間に受験し、日本での認定第一号として合格してきました。 興味のある方もいらっしゃると思うので、 NDA に抵触しない程度に感想などをまとめてみます。&#xA;なお、この記事は日本でのリリース当初（2019 年 12 月 10 日）の情報です。 今後のアップデートで、変わる可能性がありますのでご注意ください。&#xA;試験の概要 詳しくは、公式サイトをご覧ください。&#xA;名称 App Development with Swfit Level 1&#xA;試験の範囲 App Development with Swift の内容&#xA;出題数/時間 45 問/50 分&#xA;受験料 一般 ¥9,800, 学生 ¥7,800</description>
    </item>
    <item>
      <title>Xcode 11 で作成したプロジェクトを iOS 13 未満に対応させる</title>
      <link>https://yagamo-style.com/2019/12/02/adopt-under13-xcode11/index.html</link>
      <pubDate>Mon, 02 Dec 2019 16:38:56 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/12/02/adopt-under13-xcode11/index.html</guid>
      <description>はじめに Xcode 11 から、新規作成したプロジェクトの構成が変わりました User Interface を Swift UI と Storyboard から選択可能 SceneDelegate.swift が追加 Info.plist に、 SceneDelegate を利用するエントリが追加 iOS 13 以降のみ対応させる場合にはそのままでよいのですが、多くの場合、 2 つ前くらいまでの iOS をサポートすると思います このままで Target のバージョンに iOS 13 未満を設定すると、エラーが発生して実行できません ここでは、その解決法を紹介します 方法は他にもあるようですが、これが Xcode のサポートを一番受けやすい方法だと思います なお、 Swift UI は iOS 13 以降対応なので、ここでは Storyboard を選択した前提とします 検証環境 Xcode 11.2.1 iOS 13.2.3, 12.3.1 Swift 5 デフォルトの状態と実行確認 プロジェクトを作成すると、以下のような状態となっています 手順 Build Target を iOS 13 未満に設定</description>
    </item>
    <item>
      <title>asr restore による Mac の起動ボリュームのリストア</title>
      <link>https://yagamo-style.com/2019/10/15/asr-restore-basic/index.html</link>
      <pubDate>Tue, 15 Oct 2019 13:22:13 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/10/15/asr-restore-basic/index.html</guid>
      <description>はじめに Apple 標準の asr コマンドを利用して、 Mac の起動ボリューム（デフォルトでは Macintosh HD）をリストアする方法です とはいえ、起動ボリュームか否かは関係なく、どのボリュームでも扱い方は同じです むしろ、起動可能なボリュームのイメージ作成の方にコツがある 今回は、イメージ作成についての詳細には触れません 検証環境 MacBook Pro without T2 Security Chip (-2017) MacBook Pro with T2 Security Chip (2018-) macOS Mojave 10.14.6 asr コマンド asr は、 Apple Software Restore の略であり、その名の通りリストアを目的としたコマンドです Apple がどこまで公式にサポートしているのかはわかりませんが、起動ボリューム自体もリストア可能です ソースとなるディスクイメージの作成方法にコツがあったり、いろいろ苦労はありますが… 主に利用するのは、 asr restore の形式です asr restore asr restore は、以下のような形式で記述します asr restore --source リカバリ元のディスクイメージやボリューム --target リカバリ先のディスクやボリューム --erase オプションの説明 --source or -s リカバリ元のソースを指定 ディスクイメージ でもいいし、それをマウントしたボリュームでも OK DMG 形式はそのまま指定できるが、 Sparse Bundle などではマウントしなければ指定不可能 --target or -t リカバリ先のターゲットを指定 /Volume/... のようにボリュームを指定しても、 /disk/disk1s2 のようにディスクを指定する形式でも OK --erase リストア先のデータを削除する 利用例 トレーニング用に複数 Mac をリストアする iOSDC 2019 に Mac の環境構築に関する内容で登壇してきました でご紹介したように、トレーニング環境のセットアップに利用しています 全受講者の環境を、完全に揃えることができるメリットは大きいです iOSDC での発表時から、利用する方法は若干変わってます（T2 Security Chip 搭載の Mac への対応のため） 手順 あらかじめ、全 Mac にパーティションを切っておく（ここでは Setup というパーティションとする） Carbon Copy Cloner （以下、 CCC）を使って、リストアイメージを格納したディスクイメージを作成する（ここでは Setup.sparsebundle とする） CCC を利用するのは、 Disk Utility で作成したイメージから戻すと bless に失敗して起動できず、その対処方法がわからなかったためです T2 Security Chip あり/なしの Mac 間では、同じイメージを使い回すことはできません イメージを全リストア対象の Mac の Setup パーティションにコピーする（残念ながらここは手作業） asr restore でリストア（2,3 分で完了） 最後に Apple としてはモノリシックイメージからのリストアは推奨していないものの、 asr コマンドについては WWDC 2019 のセッションで紹介しています What’s New in Apple File Systems APFS や T2 Security Chip との付き合い方は考える必要がありますが、学校やトレーニング企業ではイメージからのリストアは必須なので、今後も引き続き使い方を探っていきます</description>
    </item>
    <item>
      <title>iOSDC 2019 に参加してきました</title>
      <link>https://yagamo-style.com/2019/09/08/iosdc2019day2/index.html</link>
      <pubDate>Sun, 08 Sep 2019 19:57:25 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/09/08/iosdc2019day2/index.html</guid>
      <description>2.5 日間にわたって開催されていた iOSDC 2019 が終了しました。正確には、今はまだこのブログを書いている途中なので終了ではないですが（“ブログを書くまでが iOSDC”）。&#xA;私自身の登壇に関しては、前回のエントリ iOSDC 2019 に Mac の環境構築に関する内容で登壇してきました をぜひご覧ください。&#xA;ここでは、それ以外について振り返りたいと思います。&#xA;公式サイト、ハッシュタグなど https://iosdc.jp/2019/ @iosdcjp #iosdc イベント全体について もちろん、最高のスタッフで全体的に素晴らしかったです！ が、いくつかピックアップします。&#xA;良かったこと 公式アプリ アプリ自体も良かったですし、フィードバックを素早く反映されていてすごいなと思いました 具体的には、練習会のときに「スピーカーだけじゃなくて、スタッフの方の Twitter リンクはないのですか？」とお伝えしたら直後のリリースで対応されていました！ ネットワーク 毎年改善が目覚ましいです ごく短時間、繋がりにくいのと WiFi の先でインターネットに接続できないこともありましたが、ほぼ問題なく接続できていました 1,000 人越えのしかもコミュニティベースのイベントで、これは本当にすごいなと思います Aruba の最新の機器をこのカンファレンスで（たぶん）国内初の利用とか、気合入ってますね！ 映像技術 登壇者のスライドとそこから切り替えてデモ実施時の映像、登壇者の映像をセッションタイトル付きの枠にその場で合成して配信してました また、スライドの縦横比によって即座に切り替えたりも ボーッとしてると当たり前のように思えますが、冷静に考えてとてもすごい！ スピーカーディナーでの 1min ピッチ 文章からだけじゃなくて、動画でトークの内容を事前に宣伝する試みは面白いなと思いました スピーカーの立場としても、これを行うことで話す練習にもなるし、考えをまとめるいい機会になりました ルーキーズ LT 練習会 Twitter や別のエントリで何度も書いてますが、これは練習という意味だけでなく最高でした！ 練習会の参加者（スピーカーだけじゃなくてスタッフの皆さん）は、顔を合わせるたびに話が盛り上がる感じになってました どなたかがツイートしていましたが、この “文化祭” みたいな感じがすごくいいなーと思いました この練習会は、次に採択されてももう二度と参加できないのが寂しいです😢 座席予約 個人サポーターおよびジョーカーチケットを持ってる人が、あらかじめ聞きたいセッションの席を予約できるシステムです 人気のセッションは前のセッションを諦めて並ぶ必要があったりしたけど、それを（ある程度）解消できます 私は並ぶのが苦手なタイプなので、これはありがたかったです！ オープニングパーティ、茶会、懇親会 交流を測る場としては同じだけど、それぞれコンセプトが違っていて楽しかったです オープニングパーティは話す、というよりもみんなで踊って楽しむ（音量大きめ） 茶会は “ノンアルコールがマジョリティ”。着席でカテゴリ別のテーブルや、ボードゲームなどもあり 懇親会は立食で、いわゆる普通の懇親会 多くのカンファレンスは最終日の懇親会のみだけなので都合がつかないこともあるけど、複数あると参加できる可能性が増えていいですね もっと良くできるかも iOSDC チャレンジ これ自体は、ゲーム性があってとても楽しいものでした トークンを探すために、多くのスポンサーブースにも自然と足が向くという、よく考えられた仕組みです 2017 年の、スポンサーロゴ缶バッジと近いですね が、例年の自分の行動と照らし合わせてみると、いつもであれば聞いたセッションのフィードバックをしていた時間を、トークン探しに費やしていました そのため、聞いてすぐにフィードバックが送れず、ほとんどは全日程が終わった後に書くことになりました そこは、どちらを優先するかの参加者の問題なので、私の考え方次第ですね セッションのバランス これも感じ方次第なのですが、 iOS やその周辺技術以外のトークが比較的固まっている時間帯がありました 最終日 LT の後半 全体からすると割合はそこまで多くなかったと思うのですが、印象的にそう見えてしまった感じがします でも、トークの題材を限定しすぎるよりも自分の知らなかったいろんな内容を知るのは楽しいです！ 茶会の流動性 茶会は基本、着席でテーブルを囲んで話すスタイルでした そのため、人の流動性は少なく、多くの人との交流という点ではちょっともったいなかったです 意図して動かないというわけではなくて、座ってるとじっくり話し込んじゃって気付いたら時間が経過している どなたか言ってましたが、スタッフが途中でアナウンスをしてみてもいいのかなと思いました 名札のプロフィール QR 参加者同士のアカウント交換しやすいように、名札に fortee のアカウント情報へアクセスする QR コードが付いていました これはすごく便利！だったのですが、私は活用できていませんでした（活用したつもりになっていました） スピーカー情報を登録していたので、それが表示されるものと思っていたのですが、それとは別に入力が必要でした それに気付いたのが終盤だったので、私の QR コードを読み込んでくださっていた方々は無を見ていたことになります… スピーカーに対して、「スピーカー情報だけ入力してもダメだよ」とのアナウンスが事前にあると良かったかも知れません 次回への抱負 今回の私のトークは「試行錯誤してる」状態で終わってしまいました 引き続き試すので、そこで得られた知見などをまたお話ししたいなと思ってます 今回は参加できなかった、企業スポンサーとしてもまた帰って来るために組織もなんとかしたい… 参加したセッションについての一言感想 たくさん感想はあるのですが、ものすごい量になりそうなのでそれぞれ一言だけ感想を書きます。</description>
    </item>
    <item>
      <title>iOSDC 2019 に Mac の環境構築に関する内容で登壇してきました</title>
      <link>https://yagamo-style.com/2019/09/07/iosdc2019day1/index.html</link>
      <pubDate>Sat, 07 Sep 2019 07:33:45 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/09/07/iosdc2019day1/index.html</guid>
      <description>iOSDC 2019 に Mac の環境構築の内容で LT 登壇します で書いていましたが、ルーキーズ LT に登壇してきました。 普段からトレーニングで話してはいますが、全くの別物なのでずっと緊張してました。&#xA;若干のミス（残り時間を間違えて、 15 秒余らせたまま最後の部分を省略してしまった）はあったものの、お伝えできたかなと思います。&#xA;公式サイト、ハッシュタグなど https://iosdc.jp/2019/ @iosdcjp #iosdc 発表スライド Speaker Deck に上げたので、ぜひご覧ください。&#xA;完全に同じ開発環境を素早く用意できる（もしくはできない）技術 モチベーション トレーニングの環境作成って、とても気をつかいます。特に、 Mac を使うトレーニングの場合、多くの受講者が Windows しか触ったことがないです。 そのため、トレーナーがデモしている環境と、受講者の環境にちょっとでも差があると、受講者はとても戸惑います。 なので、環境は少しの違いもなく揃えておく必要があります。&#xA;ただし、全部手作業で行うのは効率的ではなく、ミスも発生します。それに、セットアップ自体は技術に長けた我々トレーナーではなく、別の部隊です。なので、技術的に難しい手順は踏ませられません。&#xA;話したこと いかにミスを防ぎ、大量の Mac を素早く正確にセットアップするかという点について、これまで取ってきた様々な手法についてお話ししました。 現在、残念ながら以前と比較して手間のかかる方式で行わざるを得ず、まだ模索している状況です。 それも含め、現状をお伝えしました。&#xA;紹介した技術 Apple の提供する機能 NetRestore macOS Server の 1 機能として提供されていました Apple の「モノリシックイメージからのリストアは推奨しない」方針により、現在は利用できません macOS Server にはまだ機能が残っていますが、 GUI の画面は削除されました 2018 年以降（T2 Security Chip搭載）の Mac ではネットワークブート機能が削除されたため、 NetRestore が機能したとしても、各 Mac からは NetRestore イメージにはアクセスできません 事前に作成しておいたシステムイメージと完全に同じ環境がリストアできます とても素早い（リストア開始から完了まで 5,6 分） Time Machine 履歴を持ったバックアップを取れる機能です 基本的に、同じバックアップから複数の Mac をリストアすることは前提にしていません そのためか、複数の Mac から同時にリストアできません Time Machine からのリストアは、 NetRestore のようなブロックコピーではないので時間がかかります MDM(Mobile Device Management) 社内で iOS を集中管理する際などに利用しますが、 macOS にも対応しています Configuration Profile に設定を記述し、それをサーバからプッシュすることで設定を強制します Apple Business Manager(ABM) と連携することで、 VPP(Volume Purchase Program) で購入した App Store のアプリのインストールを各クライアントに強制できます ただし、 App Store にある最新のアプリがインストールされるため、「チームで Xcode のバージョンを固定している」場合などには別の策を取る必要があります ABM は、 VPP と DEP を統合したものです VPP(Volume Purchase Program) DEP(Device Enrollment Program) ASR(Apple Software Restore) 今回紹介した技術の中では NetRestore 以外唯一、インストールではなくイメージのコピーを行う技術 なので、リストアは速いです（数分） ただし、イメージは各 Mac に個別にコピーしておく必要があります Disk Utility を利用してシステムのイメージを DMG ファイルとして作成し、それをもとに macOS Recovery 上でコマンドラインからリストアします macOS 10.14 Mojave まではうまく動作したのですが、 10.14.1 以降必ず失敗するので、断念しました 原因は追い切れていないので、場合によってはまた利用できるかもしれません サードパーティの機能 AutoDMG 現在、暫定的に利用している機能です macOS のインストーラをカスタマイズし、/Applications へ配置したいアプリケーションなどはあらかじめ仕込んでおくことができます 通常手順での Xcode のインストールなどは非常に時間がかかる（ダウンロード、 xip の展開）ので、その時間をなくすことができます そのため、「クリーンインストールして、アプリを手動インストール」よりはだいぶマシです 各種設定はできない（クリーンインストールと同じで、 macOS インストール後のユーザの作成から先は手作業）ので、 Configuration Profile やシェルスクリプト で対応しています macOS の設定を行うコマンドとしては、以下などを利用しています defaults コマンド ユーザの設定を管理するコマンド scutil コマンド システムの設定を管理するコマンド 登壇した感想 内容的にあまり刺さる方はいないだろうな、とは思っていましたが、 Twitter や対面で感想を頂くことができました。 誰か 1 人でも、役に立った（もしくは面白かった）と思って頂けたなら、話した意味はあったのかな、と思います。</description>
    </item>
    <item>
      <title>iOSDC 2019 に Mac の環境構築の内容で LT 登壇します</title>
      <link>https://yagamo-style.com/2019/09/03/iosdc2019pre/index.html</link>
      <pubDate>Tue, 03 Sep 2019 13:14:41 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/09/03/iosdc2019pre/index.html</guid>
      <description>2016 年の初回開催から参加している、 iOSDC に今年も参加します（9/5-7 開催）。 昨年までは個人サポーター（およびスポンサー企業の社員）として参加していましたが、今年は LT に登壇します！ なので、スピーカー兼個人サポーターとしての参加です（今期から、弊社は技術系のカンファレンスにスポンサーを出さない方針になってしまいました…）。&#xA;公式サイト、ハッシュタグなど https://iosdc.jp/2019/ @iosdcjp #iosdc 私（Hiroyuki Aoki）について 株式会社カサレアルで、研修のトレーナーをしています iOS や Android アプリ開発コースも担当していますが、国内唯一の Apple 認定トレーナーとして macOS のシステム管理コースなども担当しています ちなみに、カサレアルは国内唯一の Apple 認定トレーニングプロバイダーです Apple の macOS 認定資格（Apple Certified Support Professional）の試験も、弊社で受験可能です 業務を行う中で得た知見から、今回の LT では Mac の環境構築に関する内容を話します こんなことを話します 完全に同じ開発環境を素早く用意できる（もしくはできない）技術 弊社では、トレーニングで利用するために、たくさんの Mac を全部同じ状態にセットアップしています 手作業で設定すると、ちょっとずつ設定がズレてしまい、受講者に同じ体験をして頂くことができません そのため、素早く・簡単に・完全に同じ状態の Mac をセットアップする必要性があります 以前は利用できた方法が使えなくなったりと一筋縄では行かないのですが、これまでどうやってきて今後どうして行くのか、お話しします 私の登壇は 9 月 6 日の 16:35 、 Track Aの LT 前半の最後です。 アプリの開発技術ではないですが、 Mac の設定も奥が深くて楽しいですよ！ それに、みなさんの普段の Mac 環境準備にも、もしかしたら役に立つ情報があるかも知れません。&#xA;iOSDC の好きなところ このイベントは、参加者同士のコミュニケーションを特に大事にしていて、「パックマンルール」や「機械的席詰めタイム」など、面白い取り組みをたくさん取り入れています。 また、ルーキーズ LT 練習会を開催して、初めて登壇する人がより良いプレゼンをできるようにサポートしてくれたりもしています。 このように、参加者のことを本当に大事にしている、誰でも楽しめるイベントです。</description>
    </item>
    <item>
      <title>MACアドレスを取得してファイルに書き出すシェルスクリプト</title>
      <link>https://yagamo-style.com/2019/08/02/getmacaddress/index.html</link>
      <pubDate>Fri, 02 Aug 2019 21:49:24 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/08/02/getmacaddress/index.html</guid>
      <description>はじめに トレーニングをお客様先で実施する際、持ち込んだMacを現地のWiFiに接続するためにMACアドレスを求められる場合があります 未認証のデバイスを接続させないため、MACアドレスでフィルタリングを掛ける目的です 手作業で取得するのは辛いので、シェルスクリプトを用意しました あとで集約する際のために、ファイル名にはMacのSerial Numberを付けるようにしました 検証環境 macOS 10.14.6 Mojave シェルスクリプトの内容 #!/bin/sh ## GET Serial Number of this Mac SERIAL=`ioreg -l | awk &#39;/IOPlatformSerialNumber/ { if (gsub(/&#34;/, &#34;&#34;)) print $4 }&#39;` ## Write MAC address of primary WiFi interfce in &#34;{SERIAL NUMBER}.txt&#34; on this user&#39;s Desktop ifconfig en0 ether | awk &#39;/ether/ { print $2 }&#39; &gt; ~/Desktop/${SERIAL}.txt Serial Numberを取得して、変数に代入 SERIAL=`ioreg -l | awk &#39;/IOPlatformSerialNumber/ { if (gsub(/&#34;/, &#34;&#34;)) print $4 }&#39;` ioregで、ハードウェアデバイスとドライバの情報を取得 awkを利用して、以下の処理を実行 IOPlatformSerialNumberを含む行だけを抽出 | &#34;IOPlatformSerialNumber&#34; = &#34;C0XXXXXXXXXX&#34; &#34;を除去する | IOPlatformSerialNumber = C0XXXXXXXXXX スペースで区切った4つ目のフィールドを出力 C0XXXXXXXXXX WiFiインターフェイスのMACアドレスを取得し、ファイルに書き込み ifconfig en0 ether | awk &#39;/ether/ { print $2 }&#39; &gt; ~/Desktop/${SERIAL}.txt ifconfigでインターフェイスを指定して、MACアドレスの情報を取得 awkを利用して、以下の処理を実行 etherを含む行だけを抽出 ether XX:XX:XX:XX:XX:XX　スペースで区切った2つ目のフィールドを出力 XX:XX:XX:XX:XX:XX デスクトップ上の、ファイル名{Serial Number}.txtのファイルに書き込み 最後に awkとか正規表現とか、いまだに苦手です 「こう書いたほうがいいよ」などあれば、教えてください！ 作成したシェルスクリプト は、aokiplayer/scriptsに置きました</description>
    </item>
    <item>
      <title>簡単なdelegateのサンプル</title>
      <link>https://yagamo-style.com/2019/07/02/delegate/index.html</link>
      <pubDate>Tue, 02 Jul 2019 11:34:30 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/07/02/delegate/index.html</guid>
      <description>はじめに iOSアプリでは、delegateが非常によく利用されます トレーニングで紹介していると、初めての人には「delegateオブジェクトに用意したコールバックメソッドが自動的に呼ばれる」ことの理解が難しいように感じました そこで、ごく簡単なサンプルを利用してdelegateの仕組みを紹介してみます 検証環境 Xcode 10.2 Swift 5 サンプルコード delegateを利用するクラスとdelegateプロトコル まずは、delegateを利用するMyClassクラスの定義とdelegateであるMyDelegateプロトコルの定義です MyClassのshow(text:)を呼ぶと、自身のプロパティとして保持するdelegateのonShowCalled(withText:)を呼ぶ実装となっています class MyClass { var delegate: MyDelegate? func show(text: String) { self.delegate?.onShowCalled(withText: text) } } protocol MyDelegate { func onShowCalled(withText text: String) } delegateに準拠したクラス delegateはプロトコルなので、利用する際にはそのプロトコルに準拠して内容を実装したクラスが必要です MyAdopted1とMyAdopted2の2つを用意し、それぞれ実装の異なるonShowCalled(withText:)を用意しています class MyAdopted1: MyDelegate { func onShowCalled(withText text: String) { print(&#34;MyAdopted1: \(text)&#34;) } } class MyAdopted2: MyDelegate { func onShowCalled(withText text: String) { print(&#34;\(text) from MyAdopted2!&#34;) } } delegateを指定 MyClassのインスタンスに、上記のMyAdopted1およびMyAdopted2をdelegateとして指定します MyClassのshow(text:)を呼ぶと、delegateとして指定したオブジェクトのonShowCalled(withText:)が実行されているのがわかります let anObject1 = MyClass() anObject1.delegate = MyAdopted1() anObject1.show(text: &#34;Hello&#34;) let anObject2 = MyClass() anObject2.delegate = MyAdopted2() anObject2.show(text: &#34;Hello&#34;) MyAdopted1: Hello Hello from MyAdopted2! まとめ 普段、プログラマは上記の「delegateに準拠したクラスの作成」と、「delegateを指定」部分を書くことが多いと思います delegateを利用するクラスを一度実装してみることで、delegateの仕組みについての理解が深まるのでおすすめです 今回作成したサンプルコードは、GitHubに置きました aokiplayer/DelegateSample</description>
    </item>
    <item>
      <title>Asset Catalogで同じ名前の別画像を利用する</title>
      <link>https://yagamo-style.com/2019/06/21/assetfolder/index.html</link>
      <pubDate>Fri, 21 Jun 2019 09:09:14 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/06/21/assetfolder/index.html</guid>
      <description>はじめに Xcodeのアセットカタログ（デフォルトではAssets.xcassets）は、画像などのリソースを管理します アセットカタログ内で、フォルダ分けも可能です その際、別のフォルダに同じ名前の画像を置きたくなることもあります その場合の扱い方です 検証環境 Xcode 10.2.1 iOS 12.2 Swift 5 フォルダにNamespaceを付与する デフォルトの状態（Namespaceなし） この画像の例では、birdという画像がforestフォルダとseaフォルダの両方に配置されています ですが、デフォルトの状態ではフォルダ名は無視されるので、これらの画像にはbirdという名前でアクセスすることになり、区別ができません フォルダ名付きでのアクセス（Namespaceあり） アセットカタログ内でフォルダを選択し、Attributes InspectorからProvides Namespaceにチェックを入れると、そのフォルダ名がNamespaceとして利用されます&#xA;フォルダの色も黄色から水色に変わっていますね この画像の例では、それぞれforest/birdとsea/birdという名前で区別されます&#xA;こんな感じで、コード内でもInterface Builderでも参照できます&#xA;imageView.image = index == 0 ? UIImage(named: &#34;forest/bird&#34;) : UIImage(named: &#34;sea/bird&#34;) まとめ Namespaceがあると、格段に管理がしやすくなりますね 今回作成したサンプルコードは、GitHubに置きました aokiplayer/AssetFolderSample 参考 Asset Catalog Format Reference: Folders ios - Asset Catalog: Access images with same name in different folders - Stack Overflow</description>
    </item>
    <item>
      <title>SwiftUIで一覧表示画面を作成する</title>
      <link>https://yagamo-style.com/2019/06/14/swiftuilist_beta/index.html</link>
      <pubDate>Fri, 14 Jun 2019 13:16:59 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/06/14/swiftuilist_beta/index.html</guid>
      <description>はじめに WWDC 2019で発表された目玉として、SwiftUIがあります 今回は、少しだけSwiftUIを触ってみたのでメモしてみます 検証環境 macOS 10.15 Catalina beta Xcode 11 beta iOS 13 beta Swift 5.1 iPad Pro 10.5 inch ストーリーボードは？ これまで、レイアウトは基本的にストーリーボードで行ってきました ストーリーボードは決して悪いものではなく、まず画面の作成を始める際にはとても扱いやすいです ただし、ビューの数が増えたり、複雑なレイアウトをしようとすると非常に管理が難しいのも事実です コードでレイアウトを行うSwiftUI Flutterなどでは、画面をコード上で宣言的に記述できます 最近は、この形式をとるものが増えています SwiftUIも、コードから宣言的なレイアウトを行います これまでもコードのみで画面を作成できましたが、以下のような問題を抱えていました プレビューの方法がないため、ビルドして実行しないと確認できない 手続的に記述するため、実際のレイアウトがイメージしにくい SwiftUIで作成した一覧画面のサンプル 画面イメージ 実装ファイル 実装したのは、以下のファイルです ファイル 説明 FoodModel.swift 表の1行分を表すデータモデル FoodDataSource.swift 表示するデータを提供する FoodRow.swift 表の各行を表すビュー。FoodListから利用される FoodList.swift 表の全体を表すビュー。FoodDataSourceからデータを取得し、各行のFoodRowを生成する ContentView.swift 最初に表示されるビュー。この中でFoodListを読み込む FoodModel.swift import Foundation struct FoodModel: Codable { var id: Int var title: String var userName: String var imageName: String var liked: Bool = false } FoodDataSource.swift import Combine import SwiftUI class FoodDataSource: BindableObject { typealias PublisherType = PassthroughSubject let didChange: FoodDataSource.PublisherType = PassthroughSubject&lt;Void, Never&gt;() var foodData: [FoodModel] init() { foodData = [ FoodModel(id: 10, title: &#34;スープカレー&#34;, userName: &#34;山田二郎&#34;, imageName: &#34;1&#34;, liked: true), FoodModel(id: 20, title: &#34;そば屋のカレー&#34;, userName: &#34;川田吾郎&#34;, imageName: &#34;2&#34;), FoodModel(id: 30, title: &#34;タイ風カレー&#34;, userName: &#34;里田舞&#34;, imageName: &#34;3&#34;, liked: true), FoodModel(id: 40, title: &#34;スタミナジャンボカレー&#34;, userName: &#34;海田泳七郎&#34;, imageName: &#34;4&#34;), FoodModel(id: 50, title: &#34;レッドカレー&#34;, userName: &#34;岡田八郎&#34;, imageName: &#34;5&#34;) ] didChange.send(()) } } FoodRow.swift import SwiftUI struct FoodRow : View { var foodModel: FoodModel var body: some View { VStack(alignment: .leading) { Image(foodModel.imageName) .resizable() .aspectRatio(contentMode: ContentMode.fit) .shadow(radius: 10) .border(Color.white, width: 2) Text(foodModel.title).font(.headline) HStack { Text(foodModel.userName).font(.subheadline) Spacer() Image(foodModel.liked ? &#34;liked&#34; : &#34;unliked&#34;) } }.padding() } } #if DEBUG struct FoodRow_Previews : PreviewProvider { static var previews: some View { Group { FoodRow(foodModel: FoodModel(id: 10, title: &#34;Ramen&#34;, userName: &#34;Jiro Yamada&#34;, imageName: &#34;5&#34;)) }.previewLayout(.fixed(width: 300, height: 400)) } } #endif FoodList.swift import SwiftUI struct FoodList : View { @ObjectBinding var foodDataSource = FoodDataSource() var body: some View { NavigationView { List(foodDataSource.foodData.identified(by: \.id)) { foodModel in FoodRow(foodModel: foodModel) } .navigationBarTitle(Text(&#34;Food list&#34;)) } } } #if DEBUG struct FoodList_Previews : PreviewProvider { static var previews: some View { FoodList() } } #endif ContentView.swift import SwiftUI struct ContentView : View { var body: some View { FoodList() } } #if DEBUG struct ContentView_Previews : PreviewProvider { static var previews: some View { ContentView() } } #endif まとめ よかった点 ちょっとした画面の作成であれば、SwiftUIはとても簡単に思えました macOS 10.15 Catalina上であれば、ライブビューでレイアウトだけでなく動作がすぐ確認できるのが良いです 難しく感じた点 ストーリーボードを利用していた際と、ビュー階層のイメージが異なるのでまだ戸惑っています また、思った通りにレイアウトができず苦労しています サンプルプロジェクト 今回作成したサンプルコードは、GitHubに置きました aokiplayer/SwiftUITableSample 参考 SwiftUI Tutorials | Apple Developer Documentation</description>
    </item>
    <item>
      <title>画面遷移（セグエ）のキャンセル</title>
      <link>https://yagamo-style.com/2019/05/26/seguecancel/index.html</link>
      <pubDate>Sun, 26 May 2019 09:35:28 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/05/26/seguecancel/index.html</guid>
      <description>はじめに 画面遷移のタイミングで条件を判断し、場合によってはキャンセルするような動作が必要な場面があります ボタンなどからAction接続したメソッド内でperformSegue(withIdentifier:sender:)を利用する場合や、addTarget(_:action:for:)でアクションを登録した場合であれば、その際に条件判断を行うこともできます しかし、ボタンからセグエを直接引いて画面遷移する場合であれば、無条件に画面遷移してしまいます ここでは、後者の場合に画面遷移の判断とキャンセルの方法について紹介します 検証環境 Xcode 10.2 iOS 12.2 Swift 5 利用するメソッド UIViewControllerのshouldPerformSegue(withIdentifier:sender:)を利用します このメソッドをオーバーライドします 動きとしては、trueを返した場合は画面遷移を実行、falseの場合はキャンセルとなります サンプルプログラム 動作 NEXTボタンからセグエを引いてあり、スイッチがONの場合のみ画面遷移を行うプログラムです&#xA;サンプルコード import UIKit class ViewController: UIViewController { @IBOutlet weak var moveSwitch: UISwitch! override func viewDidLoad() { super.viewDidLoad() } override func shouldPerformSegue(withIdentifier identifier: String, sender: Any?) -&gt; Bool { super.shouldPerformSegue(withIdentifier: identifier, sender: sender) // When the switch is off, it cancels the segue. return moveSwitch.isOn } @IBAction func unwindToMain(_ unwindSegue: UIStoryboardSegue) { } } まとめ これを利用することで、「特定の状況下では画面遷移させない」が実現できます このサンプルでは利用していませんが、shouldPerformSegue(withIdentifier:sender:)の第1引数にはセグエのIdentifierが渡ってきます この情報を利用することで、複数のセグエが引かれていた際、セグエごとに条件を個別に判断できますね 今回作成したサンプルは、GitHubに置きました aokiplayer/SegueCancelSample 参考 shouldPerformSegue(withIdentifier:sender:) - UIViewController | Apple Developer Documentation</description>
    </item>
    <item>
      <title>iOSにおけるPush通知の基本2（受信した通知の内容取得）</title>
      <link>https://yagamo-style.com/2019/05/24/remotenotification02/index.html</link>
      <pubDate>Fri, 24 May 2019 10:52:57 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/05/24/remotenotification02/index.html</guid>
      <description>はじめに 前の記事 [iOSにおけるPush通知の基本1（通知の受信まで）] では、以下のところまで紹介しました Push通知に必要な事前設定 Push通知のユーザへの利用許可依頼 Push通知の送信テスト これだけでも、受け取った通知をタップしてアプリを起動することができます 今回は、通知に含まれる内容（ペイロード）を取得する方法を説明します 検証環境 Xcode 10.2 iOS 12.2 Swift 5 iPod touch 6th generation 通知に対するコールバックメソッド 通知を受け取ると、UIApplicationDelegateの以下のコールバックメソッドが呼ばれます&#xA;呼ばれるコールバックメソッドとそのタイミングは、アプリの実行状態により決定されます&#xA;事前状態 タイミング メソッド 未起動 通知のタップにより起動 application(_:didFinishLaunchingWithOptions:) Foreground 通知を受信 application(_:didReceiveRemoteNotification:fetchCompletionHandler:) Background 通知のタップによりForeground application(_:didReceiveRemoteNotification:fetchCompletionHandler:) これらのコールバック内で、通知のペイロード（通知に含まれるデータ）を取得して処理を行います&#xA;Push通知のペイロード Push通知のペイロードは、以下のような形式のJSONです&#xA;{ &#34;aps&#34; : { &#34;alert&#34; : { &#34;title&#34; : &#34;New Message&#34;, &#34;subtitle&#34; : &#34;You got a new message.&#34;, &#34;body&#34; : &#34;New message has arrived. Open your inbox.&#34; }, &#34;badge&#34; : 3, &#34;sound&#34; : &#34;default&#34; } } ペイロードの取得 受信したPush通知から、ペイロードを取り出す処理を実装します そもそもどこから取り出すのか？ ペイロードは、UIApplicationDelegateのコールバックの引数に格納された状態で渡されます コールバックメソッド 格納場所 application(_:didFinishLaunchingWithOptions:) 第2引数launchOptionsディクショナリ内 application(_:didReceiveRemoteNotification:fetchCompletionHandler:) 第2引数のuserInfoディクショナリ内 送信するPush通知の内容 今回は、以下の内容のPush通知を送ってみます</description>
    </item>
    <item>
      <title>UIViewControllerのライフサイクルメソッド</title>
      <link>https://yagamo-style.com/2019/05/21/viewcontrollerlifecycle/index.html</link>
      <pubDate>Tue, 21 May 2019 12:19:51 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/05/21/viewcontrollerlifecycle/index.html</guid>
      <description>はじめに iOSアプリを作成していて、どのタイミングでどのメソッドが呼ばれるんだっけ？となることは多いです 特に、画面遷移の際に困ることがあります なので、非常に単純なサンプルを作成しておきました 各メソッド内で、コンソール出力をしているのみです 検証環境 Xcode 10.2 iOS 12.2 Swift 5 サンプルプロジェクト aokiplayer/ViewControllerLifeCycleSample サンプルの画面構成 画面はストーリーボードで作成しています&#xA;A, Bの2画面があり、以下のように遷移します（Aが初期画面）&#xA;A -&gt; Bは、単純にPresent Modallyなセグエで遷移 B -&gt; Aは、unwindセグエで遷移 コンソール出力例 アプリ起動（Aを表示） レイアウト系が2度呼ばれています レイアウトは、様々なタイミングで呼ばれるのでこのように複数回呼ばれる可能性があるためです boundsが変更されたり、サブビューが追加されたりしても呼ばれます Auto Layoutの制約を明示的に設定せず、Autoresizing maskをAuto Layoutに変換した場合などは1度しか呼ばれなかったりします A: init(coder:) A: loadView() A: viewDidLoad() A: viewWillAppear(_:) A: viewWillLayoutSubviews() A: viewDidLayoutSubviews() A: viewWillLayoutSubviews() A: viewDidLayoutSubviews() A: viewDidAppear(_:) 画面を回転（A画面表示中） レイアウトを組み直す必要が発生するので、こんな感じですね A: viewWillTransition(to:with:) A: viewWillLayoutSubviews() A: viewDidLayoutSubviews() HOMEボタンを押す（A画面表示中） 画面は表示されなくなりますが、実際にはいずれのコールバックも呼ばれていません このあたりの挙動は、Androidとは異なりますね（Androidではこのタイミングでもコールバック呼ばれる） HOME画面でアイコンをタップ（上記の操作後） 非表示状態からの復帰ですが、いずれのコールバックも呼ばれていません これも、Androidの場合はコールバックが呼ばれますね Bへ遷移（Present Modallyセグエ） ポイントはAのprepare(for:sender:)のタイミングです ここで必要なデータの受け渡しを行いますが、BのviewDidLoad()よりも前です そのため、この時点ではBの持っているビューはnilであり、データを渡そうとすると実行時エラーとなります B: init(coder:) A: prepare(for:sender:) B: loadView() B: viewDidLoad() A: viewWillDisappear(_:) B: viewWillAppear(_:) B: viewWillLayoutSubviews() B: viewDidLayoutSubviews() A: viewWillLayoutSubviews() A: viewDidLayoutSubviews() B: viewWillLayoutSubviews() B: viewDidLayoutSubviews() B: viewDidAppear(_:) A: viewDidDisappear(_:) Aへ戻る（unwindセグエ） unwindセグエで戻る際も、prepare(for:sender:)は呼ばれています B: prepare(for:sender:) A: unwindToFirst(_:) B: viewWillDisappear(_:) A: viewWillAppear(_:) A: viewWillLayoutSubviews() A: viewDidLayoutSubviews() A: viewDidAppear(_:) B: viewDidDisappear(_:) B: deinit A: viewWillLayoutSubviews() A: viewDidLayoutSubviews() まとめ 初心者の陥りやすい点としては、prepare(for:sender:)内でのデータの受け渡しです 「遷移先画面のビューはまだnil」という点は、しっかり認識しておきましょう</description>
    </item>
    <item>
      <title>iOSにおけるPush通知の基本1（通知の受信まで）</title>
      <link>https://yagamo-style.com/2019/04/18/remotenotification01/index.html</link>
      <pubDate>Thu, 18 Apr 2019 09:30:15 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/04/18/remotenotification01/index.html</guid>
      <description>はじめに Push通知は、使い方によっては非常に効果的です 通知しすぎると、邪魔になってしまいますが ここでは、Push通知の基本的な実装方法を説明します Push通知の実装には、UserNotificationsフレームワークを利用します ローカル通知にも、同じフレームワークを利用します 昔と違って、ひとつのフレームワークで両方に対応できていいですね 検証環境 Xcode 10.2 iOS 12.2 Swift 5 iPod touch 6th generation 必要なもの Apple Developer Programのアカウント Apple Developerサイト上で、以下の確認・作成が必要なため Team ID Authentication Key APNs（Apple Push Notification Service）に対応した、Push通知を送信するサーバ FirebaseとかMicrosoft Azureとか、いろいろなサービスが対応してます テストするだけなら、APNsに対応したいろいろなツールがあります Dwarven/PushMeBaby onmyway133/PushNotifications APNsは、その名のとおりAppleのPush通知サービスです Push通知の送信は、必ずこのサービスを経由します iPhoneやiPadなどの実デバイス シミュレータではPush通知が利用できないため&#xA;シミュレータでPush通知の登録をしようとすると、コンソールに以下のようなメッセージが出力されます&#xA;Failed to register: Error Domain=NSCocoaErrorDomain Code=3010 &#34;remote notifications are not supported in the simulator&#34; UserInfo={NSLocalizedDescription=remote notifications are not supported in the simulator} 事前準備（Apple Developerサイト上） Team IDの確認 Apple Developerサイトにログイン</description>
    </item>
    <item>
      <title>try! Swift Tokyo 2019 感想など</title>
      <link>https://yagamo-style.com/2019/04/17/tryswifttokyo2019/index.html</link>
      <pubDate>Wed, 17 Apr 2019 19:16:50 +0900</pubDate>
      <guid>https://yagamo-style.com/2019/04/17/tryswifttokyo2019/index.html</guid>
      <description>try! Swift Tokyo 2019 に参加してきました。 今年も会社のブースにいたのでセッション自体はあまり聞くことができませんでしたが、得るものはたくさんありました。&#xA;だいぶ時間が経ってしまったけど、感想を少し書いてみます。&#xA;公式サイト、ハッシュタグなど https://www.tryswift.co/events/2019/tokyo/jp/ @tryswiftconf #tryswiftconf ここが良かった スポンサーとして 知名度が少し上がってきた Java 系ではそれなりに知名度がある弊社ですが、モバイル系のカンファレンスに継続して参加することでこちらでも知名度が少しずつ上がってきました。 いろいろな方から、声を掛けて頂けました。 商品をお見せするのが大事 今回はマーケティングチームのアイディアで、主に私の執筆したトレーニングテキストのサンプルを展示しました。 実際に手に取ってご覧頂くことで、以下の効果が得られました。 弊社の業務やトレーニング内容をイメージ頂けた -&gt; 参加者の皆様との会話のきっかけとなった たくさんのご意見を頂けた 「市販書籍よりもわかりやすい」「ここに書いてるのよりも、こっちのライブラリを使ったほうがいい」 「テキストを売って欲しい」「現場に出る前の教育に使いたい」 エンジニアとして 世界的なエンジニアに直接聞ける 私は IBM Kitura を使い始めているのですが、せっかく Kitura の開発チームが来日されていたので、うまくいかない点を思い切って質問してみました。 その上で、Kituraのドキュメント自体に誤りがあることなどを発見できました。 &lt;- 貢献できた！ セッション自体はあとで動画がアップロードされますが、質問はその場でしかできないので、貴重な経験でした。 英語は、できなくてもこわくないです（もちろん、できた方がいいけど）。 言いたいことがはっきりしていれば、文法を多少誤っていたり単語が出てこなかったりしても伝わります。 カンファレンス前日の Global Communication Workshop for try! Swift で、背中を押してもらえた気がします。 今後に向けて 個人・企業ともスポンサーは続けていきたいです。 参加して良かった！で終わらせない。今は IBM Kitura ブースで頂いた本（抽選に当たりました）も使いながら Kitura を学習してます。</description>
    </item>
  </channel>
</rss>