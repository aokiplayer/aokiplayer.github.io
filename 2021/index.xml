<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2021 :: Yagamo Style</title>
    <link>https://yagamo-style.com/2021/index.html</link>
    <description></description>
    <generator>Hugo</generator>
    <language>ja-JP</language>
    <lastBuildDate>Mon, 08 Mar 2021 10:17:14 +0900</lastBuildDate>
    <atom:link href="https://yagamo-style.com/2021/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ネストした JSON をフラットな構造体にマッピングする</title>
      <link>https://yagamo-style.com/2021/03/08/codable-container/index.html</link>
      <pubDate>Mon, 08 Mar 2021 10:17:14 +0900</pubDate>
      <guid>https://yagamo-style.com/2021/03/08/codable-container/index.html</guid>
      <description>はじめに Swift では Encodable, Decodableプロトコルと JSONEncoder, JSONDecoder を利用すれば、 HTTP 通信で取得した JSON と Swift オブジェクトを一発変換できます🙂 が、ネストした JSON を扱う場合には Swift 側の対応する型（構造体を使うことが多い）も同じ構造にネストする必要があります😔 公開されている Web API では、何階層にもネストしてる JSON も多いので、ネストした階層分だけ構造体を定義するのは面倒ですし、扱いづらくなります そのような場合には、以下の 2 つを実装すると解決できます Encodable のメソッド encode(to:) Decodable のイニシャライザ init(from:) 定義は少し面倒ですが、一度作成してしまえばとても使いやすくなります 検証環境 macOS Big Sur 11.2.1 Xcode 12.4 サンプル { &#34;user_name&#34;: &#34;山田二郎&#34;, &#34;scores&#34;: [ { &#34;score&#34;: 65 }, { &#34;score&#34;: 24 } ] } 上記の JSON は、構造として全体を表す {} の中に、 &#34;scores&#34; 部分が配列となっており、その要素が {} となっています。 つまり、「オブジェクト」-&gt;「配列」-&gt;「オブジェクト」の 3 階層です。 配列は Swift で Array 型が定義されているので、自分で用意する必要があるのは 2 つの構造体であることがわかります。</description>
    </item>
  </channel>
</rss>