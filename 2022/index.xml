<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2022 on Yagamo Style</title>
    <link>https://yagamo-style.com/2022/</link>
    <description>Recent content in 2022 on Yagamo Style</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Thu, 17 Mar 2022 09:50:39 +0900</lastBuildDate><atom:link href="https://yagamo-style.com/2022/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo で各記事の URL をカスタマイズ</title>
      <link>https://yagamo-style.com/2022/03/17/hugo-custom-url/</link>
      <pubDate>Thu, 17 Mar 2022 09:50:39 +0900</pubDate>
      
      <guid>https://yagamo-style.com/2022/03/17/hugo-custom-url/</guid>
      <description>はじめに  静的サイトジェネレータの Hugo では、記事の URL 階層はデフォルトではディレクトリ階層と一致します ですが、場合によっては変更したい場合があります  ブログ記事などでは、たとえば /diary/2020/04/19 のような形式にしたい場合もあるでしょう そのためにディレクトリを細かく設定していくのは面倒です   その際に、必要な設定について記載します  検証環境  hugo v0.93.3  カスタム URL の指定（Permalinks の設定）  config.toml に [permalinks] 項目を追加することで、記事のパスを自由に設定できます  サンプル [permalinks] posts = &amp;#39;/:year/:month/:day/:filename/&amp;#39;  上記の例では、 contents/posts に配置された各記事の URL は 2020/04/19/拡張子を除いた記事のファイル名/ となります  出力イメージは、この記事の URL をご覧ください   :year のような設定値は他にも用意されているので、必要に応じて公式サイトで確認すると良いでしょう  まとめ  URL を物理的なディレクトリ階層と分けられれば、記事の管理がグッと楽になります また、途中でディレクトリ階層を変更しても、記事の URL が変わらないのがありがたいですね  参考  URL Management | Hugo  </description>
    </item>
    
    <item>
      <title>いつも忘れる Git の設定（日本語ファイル名を正しく表示）</title>
      <link>https://yagamo-style.com/2022/03/16/git-unusual-filename/</link>
      <pubDate>Wed, 16 Mar 2022 14:59:46 +0900</pubDate>
      
      <guid>https://yagamo-style.com/2022/03/16/git-unusual-filename/</guid>
      <description>はじめに  この記事は、いつも必要だけどいつも忘れる設定なので、単なるメモとして作成してます  Git でリポジトリをクローンしてくるといつも日本語ファイル名がエスケープされて正しく表示されないよね  これを設定しておく（グローバルでやっちゃってもいいとは思うけど）  git config --local core.quotepath false 参考  Git の man より  core.quotePath  Commands that output paths (e.g. ls-files, diff), will quote &amp;#34;unusual&amp;#34; characters in the  pathname by enclosing the pathname in double-quotes and escaping those characters with  backslashes in the same way C escapes control characters (e.g. \t for TAB, \n for LF, \\ for  backslash) or bytes with values larger than 0x80 (e.</description>
    </item>
    
    <item>
      <title>プロパティが nil の場合もエンコード先の JSON に属性を出力する</title>
      <link>https://yagamo-style.com/2022/03/12/json-with-null-value/</link>
      <pubDate>Sat, 12 Mar 2022 22:38:43 +0900</pubDate>
      
      <guid>https://yagamo-style.com/2022/03/12/json-with-null-value/</guid>
      <description>はじめに  JSON の解析をカスタマイズする方法については [ネストした JSON をフラットな構造体にマッピングする] で書きました 「Codable なオブジェクトに nil 値があると、 JSON ではその属性自体が省略されてしまう挙動を変えられないのか？」という質問を受講者から頂いたので、ここに記載しておきます  検証環境  macOS Big Sur 11.6 Xcode 13.2.1  サンプルコード 通常の挙動（nil を含む属性が出力されない） // JSON と対応させる Person 型（Codable に準拠） struct Person: Codable { let name: String let age: Int? // nil を許容 } let encoder = JSONEncoder() let yamada = Person(name: &amp;#34;山田二郎&amp;#34;, age: 53) let kawada = Person(name: &amp;#34;川田吾郎&amp;#34;, age: nil) let yamadaData = try! encoder.encode(yamada) let kawadaData = try!</description>
    </item>
    
  </channel>
</rss>
