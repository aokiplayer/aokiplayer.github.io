<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Yagamo Style</title>
		<link>https://yagamo-style.com/posts/</link>
		<description>Recent content in Posts on Yagamo Style</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>ja-JP</language>
		<lastBuildDate>Tue, 10 Nov 2020 16:08:03 +0900</lastBuildDate>
		<atom:link href="https://yagamo-style.com/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>map と compactMap と flatMap</title>
			<link>https://yagamo-style.com/posts/maps/</link>
			<pubDate>Tue, 10 Nov 2020 16:08:03 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/maps/</guid>
			<description>はじめに コレクションとかいわゆる「何かの中に値が入ってるやつ」に対する代表的な操作として、 map があります。 が、 map にも亜種があって混乱しがちなの</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<p>コレクションとかいわゆる「何かの中に値が入ってるやつ」に対する代表的な操作として、 <code>map</code> があります。
が、 <code>map</code> にも亜種があって混乱しがちなので、整理しておきたいと思います。</p>

<p>なお、この記事では配列を例としています。
実際には、配列でもディクショナリでも Optional でも「入れ物」にあたるものは似たような操作が提供されています（全く同じではないですが）。</p>

<h1 id="map-の種類">map の種類</h1>

<h2 id="map">map</h2>

<p>配列内の各要素を変換します。全要素を変換するので、変換前後で要素数は変わりません。</p>

<p><img src="/images/maps/map.png" alt="map.png" /></p>

<h2 id="compactmap">compactMap</h2>

<p><code>map</code> と同じですが、要素のうち <code>nil</code> は除外し、 Optional は unwrap します。 <code>nil</code> を除外するため、 <code>map</code> と異なり変換前後で要素数が変わる（減る）場合もあります。</p>

<p><img src="/images/maps/compactMap.png" alt="compactMap.png" /></p>

<h2 id="flatmap">flatMap</h2>

<p>配列がネストされている場合、内側の配列から要素を取り出して平坦な配列にします（二次元配列 -&gt; 一次元配列）。</p>

<p><img src="/images/maps/flatMap1.png" alt="flatMap1.png" /></p>

<p>内側の「配列という <strong>入れ物</strong> 」を「Optional という <strong>入れ物</strong> 」に見立てれば「Optional の内容を取り出した配列」を作成することになり、 <code>compactMap</code> と同じ動作となります。</p>

<ul>
<li><code>Array&lt;Array&lt;要素&gt;</code> -（変換）-&gt; <code>Array&lt;要素&gt;</code></li>
<li><code>Array&lt;Optional&lt;要素&gt;</code> -（変換）-&gt; <code>Array&lt;要素&gt;</code></li>
</ul>

<p><img src="/images/maps/flatMap2.png" alt="flatMap2.png" /></p>

<p><code>compactMap</code> が実装されていなかった Swift の初期のバージョンではこのような用途でも利用されていましたが、現在では deprecated です。素直に <code>compactMap</code> を使いましょう。</p>

<h1 id="サンプル">サンプル</h1>

<p><code>map</code>, <code>compactMap</code>, <code>flatMap</code> を利用したサンプルです。
上記 4 つの図と比較しながら読んでみてください。</p>

<h2 id="コード例">コード例</h2>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="kd">enum</span> <span class="nc">Category</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">CustomStringConvertible</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">description</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">rawValue</span>
    <span class="p">}</span>

    <span class="k">case</span> <span class="n">personal</span>
    <span class="k">case</span> <span class="n">business</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="nc">Item</span><span class="p">:</span> <span class="n">CustomStringConvertible</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">description</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span>
        <span class="s">&#34;&#34;&#34;
</span><span class="s">        name: &#34;</span><span class="err">\</span><span class="p">(</span><span class="kc">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span><span class="s">&#34;, price: </span><span class="si">\(</span><span class="kc">self</span><span class="p">.</span><span class="n">price</span><span class="si">)</span><span class="s">, categories: </span><span class="si">\(</span><span class="kc">self</span><span class="p">.</span><span class="n">categories</span> <span class="p">??</span> <span class="p">[]</span><span class="si">)</span><span class="s">
</span><span class="s">
</span><span class="s">        &#34;&#34;&#34;</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nv">name</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">let</span> <span class="nv">price</span><span class="p">:</span> <span class="nb">Int</span>
    <span class="kd">let</span> <span class="nv">categories</span><span class="p">:</span> <span class="p">[</span><span class="n">Category</span><span class="p">]?</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">items</span><span class="p">:</span> <span class="p">[</span><span class="n">Item</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span>
    <span class="n">Item</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&#34;Suit&#34;</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span> <span class="mi">15000</span><span class="p">,</span> <span class="n">categories</span><span class="p">:</span> <span class="p">[.</span><span class="n">business</span><span class="p">]),</span>
    <span class="n">Item</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&#34;Pen&#34;</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span> <span class="mi">400</span><span class="p">,</span> <span class="n">categories</span><span class="p">:</span> <span class="p">[.</span><span class="n">personal</span><span class="p">,</span> <span class="p">.</span><span class="n">business</span><span class="p">]),</span>
    <span class="n">Item</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&#34;Sea&#34;</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span> <span class="mi">99999</span><span class="p">,</span> <span class="n">categories</span><span class="p">:</span> <span class="kc">nil</span><span class="p">),</span>
    <span class="n">Item</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&#34;Drink&#34;</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span> <span class="mi">120</span><span class="p">,</span> <span class="n">categories</span><span class="p">:</span> <span class="p">[.</span><span class="n">personal</span><span class="p">]),</span>
    <span class="n">Item</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&#34;Sky&#34;</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span> <span class="mi">99999</span><span class="p">,</span> <span class="n">categories</span><span class="p">:</span><span class="kc">nil</span><span class="p">),</span>
    <span class="n">Item</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&#34;Comic&#34;</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span> <span class="mi">600</span><span class="p">,</span> <span class="n">categories</span><span class="p">:</span> <span class="p">[.</span><span class="n">personal</span><span class="p">])</span>
<span class="p">]</span>

<span class="bp">print</span><span class="p">(</span><span class="s">&#34;&#34;&#34;
</span><span class="s">      == Items ==========
</span><span class="s">      </span><span class="si">\(</span><span class="n">items</span><span class="si">)</span><span class="s">
</span><span class="s">
</span><span class="s">      &#34;&#34;&#34;</span>
<span class="p">)</span>

<span class="c1">// map transforms each element in an Array.</span>
<span class="kd">let</span> <span class="nv">map</span> <span class="p">=</span> <span class="n">items</span><span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="n">item</span> <span class="k">in</span>
    <span class="n">item</span><span class="p">.</span><span class="n">categories</span> <span class="p">??</span> <span class="p">[]</span>
<span class="p">}</span>
<span class="bp">print</span><span class="p">(</span><span class="s">&#34;&#34;&#34;
</span><span class="s">      == map &#34;</span><span class="n">item</span><span class="p">.</span><span class="n">categories</span> <span class="p">??</span> <span class="p">[]</span><span class="s">&#34; ==========
</span><span class="s">      </span><span class="si">\(</span><span class="bp">map</span><span class="si">)</span><span class="s">
</span><span class="s">
</span><span class="s">      &#34;&#34;&#34;</span>
<span class="p">)</span>

<span class="c1">// compactMap is a map that only collect non-nil values.</span>
<span class="kd">let</span> <span class="nv">compact</span> <span class="p">=</span> <span class="n">items</span><span class="p">.</span><span class="n">compactMap</span> <span class="p">{</span> <span class="n">item</span> <span class="k">in</span>
    <span class="n">item</span><span class="p">.</span><span class="n">categories</span>
<span class="p">}</span>
<span class="bp">print</span><span class="p">(</span><span class="s">&#34;&#34;&#34;
</span><span class="s">      == compactMap &#34;</span><span class="n">item</span><span class="p">.</span><span class="n">categories</span><span class="s">&#34; ==========
</span><span class="s">      </span><span class="si">\(</span><span class="n">compact</span><span class="si">)</span><span class="s">
</span><span class="s">
</span><span class="s">      &#34;&#34;&#34;</span>
<span class="p">)</span>

<span class="c1">// flatMap flattens the inner Array.</span>
<span class="kd">let</span> <span class="nv">flat1</span> <span class="p">=</span> <span class="n">items</span><span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">item</span> <span class="k">in</span>
    <span class="n">item</span><span class="p">.</span><span class="n">categories</span> <span class="p">??</span> <span class="p">[]</span>
<span class="p">}</span>
<span class="bp">print</span><span class="p">(</span><span class="s">&#34;&#34;&#34;
</span><span class="s">      == flatMap &#34;</span><span class="n">item</span><span class="p">.</span><span class="n">categories</span> <span class="p">??</span> <span class="p">[]</span><span class="s">&#34; ==========
</span><span class="s">      </span><span class="si">\(</span><span class="n">flat1</span><span class="si">)</span><span class="s">
</span><span class="s">
</span><span class="s">      &#34;&#34;&#34;</span>
<span class="p">)</span>

<span class="c1">// This type of flatMap is deprecated. You should use compactMap.</span>
<span class="kd">let</span> <span class="nv">flat2</span> <span class="p">=</span> <span class="n">items</span><span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">item</span> <span class="k">in</span>
    <span class="n">item</span><span class="p">.</span><span class="n">categories</span>
<span class="p">}</span>
<span class="bp">print</span><span class="p">(</span><span class="s">&#34;&#34;&#34;
</span><span class="s">      == flatMap &#34;</span><span class="n">item</span><span class="p">.</span><span class="n">categories</span><span class="s">&#34; ==========
</span><span class="s">      </span><span class="si">\(</span><span class="n">flat2</span><span class="si">)</span><span class="s">
</span><span class="s">
</span><span class="s">      &#34;&#34;&#34;</span>
<span class="p">)</span></code></pre></div>
<h2 id="実行結果">実行結果</h2>
<div class="highlight"><pre class="chroma"><code class="language-zsh" data-lang="zsh"><span class="o">==</span> <span class="nv">Items</span> <span class="o">==========</span>
<span class="o">[</span>name: <span class="s2">&#34;Suit&#34;</span>, price: <span class="m">15000</span>, categories: <span class="o">[</span>business<span class="o">]</span>
, name: <span class="s2">&#34;Pen&#34;</span>, price: <span class="m">400</span>, categories: <span class="o">[</span>personal, business<span class="o">]</span>
, name: <span class="s2">&#34;Sea&#34;</span>, price: <span class="m">99999</span>, categories: <span class="o">[]</span>
, name: <span class="s2">&#34;Drink&#34;</span>, price: <span class="m">120</span>, categories: <span class="o">[</span>personal<span class="o">]</span>
, name: <span class="s2">&#34;Sky&#34;</span>, price: <span class="m">99999</span>, categories: <span class="o">[]</span>
, name: <span class="s2">&#34;Comic&#34;</span>, price: <span class="m">600</span>, categories: <span class="o">[</span>personal<span class="o">]</span>
<span class="o">]</span>

<span class="o">==</span> map <span class="s2">&#34;item.categories ?? []&#34;</span> <span class="o">==========</span>
<span class="o">[[</span>business<span class="o">]</span>, <span class="o">[</span>personal, business<span class="o">]</span>, <span class="o">[]</span>, <span class="o">[</span>personal<span class="o">]</span>, <span class="o">[]</span>, <span class="o">[</span>personal<span class="o">]]</span>

<span class="o">==</span> compactMap <span class="s2">&#34;item.categories&#34;</span> <span class="o">==========</span>
<span class="o">[[</span>business<span class="o">]</span>, <span class="o">[</span>personal, business<span class="o">]</span>, <span class="o">[</span>personal<span class="o">]</span>, <span class="o">[</span>personal<span class="o">]]</span>

<span class="o">==</span> flatMap <span class="s2">&#34;item.categories ?? []&#34;</span> <span class="o">==========</span>
<span class="o">[</span>business, personal, business, personal, personal<span class="o">]</span>

<span class="o">==</span> flatMap <span class="s2">&#34;item.categories&#34;</span> <span class="o">==========</span>
<span class="o">[[</span>business<span class="o">]</span>, <span class="o">[</span>personal, business<span class="o">]</span>, <span class="o">[</span>personal<span class="o">]</span>, <span class="o">[</span>personal<span class="o">]]</span></code></pre></div>
<h1 id="まとめ">まとめ</h1>

<p><code>map</code> については、図で表すとわかりやすいですね。この辺りの操作は Combine フレームワークでもよく使われるので、使いこなせると開発がとても楽になると思います。</p>
]]></content>
		</item>
		
		<item>
			<title>ディクショナリからタプルの配列を作成する</title>
			<link>https://yagamo-style.com/posts/dictionary-to-array/</link>
			<pubDate>Mon, 20 Jul 2020 08:22:03 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/dictionary-to-array/</guid>
			<description>はじめに Swift には、連想配列的なデータ構造としてディクショナリがあります ディクショナリはデータの順序を保証しないので、そのままではテーブルビュー</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>Swift には、連想配列的なデータ構造としてディクショナリがあります</li>
<li>ディクショナリはデータの順序を保証しないので、そのままではテーブルビューやコレクションビューのデータソースとして利用しにくいです</li>
<li>その場合は、タプルの配列に変換すると上手く行きます</li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 11.5</li>
<li>Swift 5.2</li>
</ul>

<h1 id="利用する機能">利用する機能</h1>

<h2 id="sorted-by">sorted(by:)</h2>

<ul>
<li>ディクショナリのメソッド</li>
<li>引数に渡した関数 <code>by</code> がソート条件

<ul>
<li>関数 <code>by</code> の引数

<ul>
<li>2 つのタプル（それぞれディクショナリの n 番目の要素と n + 1 番目の要素に対応）</li>
</ul></li>
<li>関数 <code>by</code> の戻り値

<ul>
<li><code>Bool</code>（<code>false</code> なら並び替え）</li>
</ul></li>
</ul></li>
<li>戻り値は <code>[(key: ディクショナリの key の型, value: ディクショナリの value の型)]</code>

<ul>
<li>つまり、ディクショナリとほぼ同じ構造を持った「タプルの配列」</li>
</ul></li>
</ul>

<h1 id="コード例">コード例</h1>

<ul>
<li>以下はディクショナリ <code>[String: Int]</code> からタプルの配列 <code>[(key: String, value: Int)]</code> に変換する例です</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift:SortedDictionary.playground" data-lang="swift:SortedDictionary.playground">import Foundation

var scores: [String: Int] = [
    &#34;Steve Yamada&#34;: 34,
    &#34;Jeff Takeshita&#34;: 87,
    &#34;Mickey Yoshida&#34;: 100,
    &#34;Charly Kinoshita&#34;: 53,
    &#34;Anna Saito&#34;: 19,
    &#34;Robert Suzuki&#34;: 97,
    &#34;Erick Kawakami&#34;: 32,
    &#34;John Miyabe&#34;: 64,
    &#34;Gregory Goto&#34;: 76
]

print(&#34;&#34;&#34;

    Ascending by key
    ========================
    &#34;&#34;&#34;)
var sortedByNameAsc: [(key: String, value: Int)] = scores.sorted { $0.key &lt; $1.key }
sortedByNameAsc.forEach { print(&#34;\($0.key): \($0.value)&#34;) }

print(&#34;&#34;&#34;

    Descending by key
    ========================
    &#34;&#34;&#34;)
var sortedByNameDesc: [(key: String, value: Int)] = scores.sorted { $0.key &gt; $1.key }
sortedByNameDesc.forEach { print(&#34;\($0.key): \($0.value)&#34;) }

print(&#34;&#34;&#34;

    Ascending by value
    ========================
    &#34;&#34;&#34;)
var sortedByScoreAsc: [(key: String, value: Int)] = scores.sorted { $0.value &lt; $1.value }
sortedByScoreAsc.forEach { print(&#34;\($0.value): \($0.key)&#34;) }

print(&#34;&#34;&#34;

    Descending by value
    ========================
    &#34;&#34;&#34;)
var sortedByScoreDesc: [(key: String, value: Int)] = scores.sorted { $0.value &gt; $1.value }
sortedByScoreDesc.forEach { print(&#34;\($0.value): \($0.key)&#34;) }</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-zsh:出力結果" data-lang="zsh:出力結果">Ascending by key
========================
Anna Saito: 19
Charly Kinoshita: 53
Erick Kawakami: 32
Gregory Goto: 76
Jeff Takeshita: 87
John Miyabe: 64
Mickey Yoshida: 100
Robert Suzuki: 97
Steve Yamada: 34

Descending by key
========================
Steve Yamada: 34
Robert Suzuki: 97
Mickey Yoshida: 100
John Miyabe: 64
Jeff Takeshita: 87
Gregory Goto: 76
Erick Kawakami: 32
Charly Kinoshita: 53
Anna Saito: 19

Ascending by value
========================
19: Anna Saito
32: Erick Kawakami
34: Steve Yamada
53: Charly Kinoshita
64: John Miyabe
76: Gregory Goto
87: Jeff Takeshita
97: Robert Suzuki
100: Mickey Yoshida

Descending by value
========================
100: Mickey Yoshida
97: Robert Suzuki
87: Jeff Takeshita
76: Gregory Goto
64: John Miyabe
53: Charly Kinoshita
34: Steve Yamada
32: Erick Kawakami
19: Anna Saito</code></pre></div>
<h1 id="まとめ">まとめ</h1>

<ul>
<li>状況に応じたデータの形式変換をする方法を押さえておくと、いろいろ応用ができそうですね</li>
<li>今回のサンプルは <a href="https://github.com/aokiplayer/swift-sandbox/tree/master/SortedDictionary">GitHub: aokiplayer/swift-sandbox/SortedDictionary</a> に置きました</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>配列要素をグループ化したディクショナリの作成</title>
			<link>https://yagamo-style.com/posts/arraygrouping/</link>
			<pubDate>Thu, 16 Jul 2020 08:39:32 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/arraygrouping/</guid>
			<description>はじめに テーブルビューやコレクションビューで、グループ化した表示はよく使います その場合、データソースとして二次元配列などを利用すると思います</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>テーブルビューやコレクションビューで、グループ化した表示はよく使います</li>
<li>その場合、データソースとして二次元配列などを利用すると思います</li>
<li>が、データソースが一次元配列だった場合は、少しデータの加工が必要ですよね</li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 11.5</li>
<li>Swift 5.2</li>
</ul>

<h1 id="利用する機能">利用する機能</h1>

<h2 id="dictionary-grouping-by">Dictionary(grouping: by:)</h2>

<ul>
<li>ディクショナリのイニシャライザ</li>
<li><code>grouping</code>

<ul>
<li>元データとなる配列</li>
<li><code>by</code> で指定した key ごとに、部分配列として分割される</li>
</ul></li>
<li><code>by</code>

<ul>
<li>グループ化したディクショナリの key となる値を返す関数</li>
<li>引数は、配列の各要素</li>
</ul></li>
</ul>

<h1 id="コード例">コード例</h1>

<ul>
<li>配列 <code>[Product]</code> を、 <code>Product</code> の要素である <code>category</code>（<code>Product.Category</code> 型）ごとにグループ化するサンプル</li>
<li>変換後のディクショナリは <code>[Product.Category: [Product]]</code> 型</li>
</ul>

<h2 id="サンプルコード">サンプルコード</h2>
<div class="highlight"><pre class="chroma"><code class="language-swift:ArrayGrouping.playground" data-lang="swift:ArrayGrouping.playground">import Foundation

struct Product: CustomStringConvertible {
    var description: String {
        &#34;(\(self.name), $\(self.price), \(self.category))&#34;
    }

    var name: String
    var price: Int
    var category: Category

    enum Category: String {
        case food
        case drink
        case other
    }
}

// Array of Product
var products: [Product] = [
    Product(name: &#34;Fried Potato&#34;, price: 24, category: .food),
    Product(name: &#34;Water&#34;, price: 12, category: .drink),
    Product(name: &#34;Dish&#34;, price: 40, category: .other),
    Product(name: &#34;Chai&#34;, price: 5, category: .drink),
    Product(name: &#34;Fork&#34;, price: 56, category: .other),
    Product(name: &#34;Bread&#34;, price: 35, category: .food),
    Product(name: &#34;Noodle&#34;, price: 80, category: .food),
    Product(name: &#34;Coffee&#34;, price: 98, category: .drink),
]

print(
    &#34;&#34;&#34;

    Elements of Array
    ===========================================
    &#34;&#34;&#34;
)
products.forEach { print($0) }

// Grouping by Category
var groupedProducts: [Product.Category: [Product]] = Dictionary(
    grouping: products,
    by: { $0.category }
)

print(
    &#34;&#34;&#34;

    Grouping by Category
    ===========================================
    &#34;&#34;&#34;
)
groupedProducts.forEach {
    print(
        &#34;&#34;&#34;
        \($0.key.rawValue)
            \($0.value)
        &#34;&#34;&#34;
    )
}</code></pre></div>
<h2 id="出力結果">出力結果</h2>
<div class="highlight"><pre class="chroma"><code class="language-zsh:出力結果" data-lang="zsh:出力結果">Elements of Array
===========================================
(Fried Potato, $24, food)
(Water, $12, drink)
(Dish, $40, other)
(Chai, $5, drink)
(Fork, $56, other)
(Bread, $35, food)
(Noodle, $80, food)
(Coffee, $98, drink)

Grouping by Category
===========================================
food
    [(Fried Potato, $24, food), (Bread, $35, food), (Noodle, $80, food)]
other
    [(Dish, $40, other), (Fork, $56, other)]
drink
    [(Water, $12, drink), (Chai, $5, drink), (Coffee, $98, drink)]</code></pre></div>
<h1 id="まとめ">まとめ</h1>

<ul>
<li>配列要素を任意のグループにまとめられるので、とても便利ですね</li>
<li>今回のサンプルは <a href="https://github.com/aokiplayer/swift-sandbox/tree/master/ArrayGrouping">GitHub: aokiplayer/swift-sandbox/ArrayGrouping</a> に置きました</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>iOS/iPadOS 13 のモーダル画面から戻った際に、ライフサイクルメソッドが呼ばれないパターンがある</title>
			<link>https://yagamo-style.com/posts/default-modal-segue-xcode11/</link>
			<pubDate>Mon, 02 Mar 2020 18:03:25 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/default-modal-segue-xcode11/</guid>
			<description>はじめに iOS/iPadOS 13 から、モーダルで画面遷移した際はデフォルトでは全画面ではなく少し小さい表示になります その画面から戻る際、これまでは unwind セグエを呼ぶ</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>iOS/iPadOS 13 から、モーダルで画面遷移した際はデフォルトでは全画面ではなく少し小さい表示になります</li>
<li>その画面から戻る際、これまでは unwind セグエを呼ぶか dismiss する必要がありましたが、モーダルの画面をスワイプダウンすることで遷移が可能となりました</li>
<li>その場合、本来呼ばれるはずのライフサイクルメソッドが呼ばれません

<ul>
<li>もちろん、 unwind セグエメソッドも呼ばれません</li>
<li>unwind セグエから戻っても、ライフサイクルメソッドは呼ばれません（unwind セグエメソッドは呼ばれる）</li>
</ul></li>
</ul>

<h1 id="サンプル">サンプル</h1>

<h2 id="画面レイアウト">画面レイアウト</h2>

<p><img src="/images/default-modal-segue-xcode11/storyboard.png" alt="storyboard" /></p>

<h2 id="new-default-シーンへのセグエ">New Default シーンへのセグエ</h2>

<p><img src="/images/default-modal-segue-xcode11/segue_for_new_default.png" alt="segue_for_new_default" /></p>

<ul>
<li>Xcode 11 でのデフォルト設定</li>
<li>Presentation  が Same as Destination</li>
</ul>

<h2 id="full-screen-シーンへのセグエ">Full Screen シーンへのセグエ</h2>

<p><img src="/images/default-modal-segue-xcode11/segue_for_full_screen.png" alt="segue_for_full_screen" /></p>

<ul>
<li>Presentation を Full Screen に変更</li>
<li>デフォルトと異なり、画面全体を覆う（iOS 12 までの Modal）</li>
</ul>

<h2 id="ソースコード">ソースコード</h2>

<h3 id="viewcontroller-最初の画面">ViewController（最初の画面）</h3>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="nc">UIKit</span>

<span class="kd">class</span> <span class="nc">ViewController</span><span class="p">:</span> <span class="n">UIViewController</span> <span class="p">{</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
        <span class="bp">print</span><span class="p">(</span><span class="kc">#function</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewWillDisappear</span><span class="p">(</span><span class="kc">_</span> <span class="n">animated</span><span class="p">:</span> <span class="nb">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">viewWillDisappear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
        <span class="bp">print</span><span class="p">(</span><span class="kc">#function</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewDidDisappear</span><span class="p">(</span><span class="kc">_</span> <span class="n">animated</span><span class="p">:</span> <span class="nb">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">viewDidDisappear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
        <span class="bp">print</span><span class="p">(</span><span class="kc">#function</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewWillAppear</span><span class="p">(</span><span class="kc">_</span> <span class="n">animated</span><span class="p">:</span> <span class="nb">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">viewWillAppear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
        <span class="bp">print</span><span class="p">(</span><span class="kc">#function</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewDidAppear</span><span class="p">(</span><span class="kc">_</span> <span class="n">animated</span><span class="p">:</span> <span class="nb">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">viewDidAppear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
        <span class="bp">print</span><span class="p">(</span><span class="kc">#function</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kr">@IBAction</span> <span class="kd">func</span> <span class="nf">unwindToMain</span><span class="p">(</span><span class="kc">_</span> <span class="n">unwindSegue</span><span class="p">:</span> <span class="n">UIStoryboardSegue</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;Returned through unwind segue.&#34;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">prepare</span><span class="p">(</span><span class="k">for</span> <span class="n">segue</span><span class="p">:</span> <span class="n">UIStoryboardSegue</span><span class="p">,</span> <span class="n">sender</span><span class="p">:</span> <span class="nb">Any</span><span class="p">?)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">style</span><span class="p">:</span> <span class="nb">String</span>

        <span class="k">switch</span> <span class="n">segue</span><span class="p">.</span><span class="n">destination</span><span class="p">.</span><span class="n">modalPresentationStyle</span> <span class="p">{</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">automatic</span><span class="p">:</span>
            <span class="n">style</span> <span class="p">=</span> <span class="s">&#34;automatic&#34;</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">currentContext</span><span class="p">:</span>
            <span class="n">style</span> <span class="p">=</span> <span class="s">&#34;currentContext&#34;</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">custom</span><span class="p">:</span>
            <span class="n">style</span> <span class="p">=</span> <span class="s">&#34;custom&#34;</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">formSheet</span><span class="p">:</span>
            <span class="n">style</span> <span class="p">=</span> <span class="s">&#34;formSheet&#34;</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">fullScreen</span><span class="p">:</span>
            <span class="n">style</span> <span class="p">=</span> <span class="s">&#34;fullScreen&#34;</span>
        <span class="k">case</span> <span class="p">.</span><span class="kr">none</span><span class="p">:</span>
            <span class="n">style</span> <span class="p">=</span> <span class="s">&#34;none&#34;</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">overCurrentContext</span><span class="p">:</span>
            <span class="n">style</span> <span class="p">=</span> <span class="s">&#34;overCurrentContext&#34;</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">overFullScreen</span><span class="p">:</span>
            <span class="n">style</span> <span class="p">=</span> <span class="s">&#34;overFullScreen&#34;</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">pageSheet</span><span class="p">:</span>
            <span class="n">style</span> <span class="p">=</span> <span class="s">&#34;pageSheet&#34;</span>
        <span class="k">case</span> <span class="p">.</span><span class="n">popover</span><span class="p">:</span>
            <span class="n">style</span> <span class="p">=</span> <span class="s">&#34;popOver&#34;</span>
        <span class="p">@</span><span class="n">unknown</span> <span class="k">default</span><span class="p">:</span>
            <span class="bp">fatalError</span><span class="p">(</span><span class="s">&#34;Maybe there will be new case.&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="bp">print</span><span class="p">(</span><span class="n">style</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<h3 id="newdefaultvc-newdefault-ボタンから遷移する画面">NewDefaultVC（NewDefault ボタンから遷移する画面）</h3>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="nc">UIKit</span>

<span class="kd">class</span> <span class="nc">NewDefaultVC</span><span class="p">:</span> <span class="n">UIViewController</span> <span class="p">{</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">prepare</span><span class="p">(</span><span class="k">for</span> <span class="n">segue</span><span class="p">:</span> <span class="n">UIStoryboardSegue</span><span class="p">,</span> <span class="n">sender</span><span class="p">:</span> <span class="nb">Any</span><span class="p">?)</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="kc">#file</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="n">separatedBy</span><span class="p">:</span> <span class="s">&#34;/&#34;</span><span class="p">).</span><span class="bp">last</span><span class="o">!</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<h3 id="fullscreenvc-fullscreen-ボタンから遷移する画面">FullScreenVC（FullScreen ボタンから遷移する画面）</h3>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="nc">UIKit</span>

<span class="kd">class</span> <span class="nc">FullScreenVC</span><span class="p">:</span> <span class="n">UIViewController</span> <span class="p">{</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">prepare</span><span class="p">(</span><span class="k">for</span> <span class="n">segue</span><span class="p">:</span> <span class="n">UIStoryboardSegue</span><span class="p">,</span> <span class="n">sender</span><span class="p">:</span> <span class="nb">Any</span><span class="p">?)</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="kc">#file</span><span class="p">.</span><span class="n">components</span><span class="p">(</span><span class="n">separatedBy</span><span class="p">:</span> <span class="s">&#34;/&#34;</span><span class="p">).</span><span class="bp">last</span><span class="o">!</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<h1 id="実行結果">実行結果</h1>

<h2 id="new-default-ボタンで遷移-unwind-ボタンで戻る">New Default ボタンで遷移 -&gt; Unwind ボタンで戻る</h2>

<pre><code>pageSheet
NewDefaultVC.swift
Returned through unwind segue.
</code></pre>

<ul>
<li>unwind セグエメソッドは呼ばれていますが、戻ったシーンのライフサイクルメソッドが呼ばれていません</li>
</ul>

<h2 id="new-default-ボタンで遷移-画面上部からスワイプダウンで戻る">New Default ボタンで遷移 -&gt; 画面上部からスワイプダウンで戻る</h2>

<pre><code>pageSheet
</code></pre>

<ul>
<li>やはり、戻ったシーンのライフサイクルメソッドは呼ばれていません</li>
<li>また、 unwind セグエを利用していないので、当然ですが unwind セグエメソッドも呼ばれていませんね

<ul>
<li>同様に、 New Default シーンの <code>prepare(for:sender:)</code> も呼ばれていません</li>
</ul></li>
</ul>

<h2 id="full-screen-ボタンで遷移-unwind-ボタンで戻る">Full Screen ボタンで遷移 -&gt; Unwind ボタンで戻る</h2>

<pre><code>fullScreen
viewWillDisappear(_:)
viewDidDisappear(_:)
FullScreenVC.swift
Returned through unwind segue.
viewWillAppear(_:)
viewDidAppear(_:)
</code></pre>

<ul>
<li>こちらは、 iOS 12 までと同じですね</li>
<li>戻ったシーンのライフサイクルメソッドおよび unwind セグエメソッドの、どちらも呼ばれています</li>
</ul>

<h1 id="まとめ">まとめ</h1>

<ul>
<li>iOS 13 から新しくなったデフォルトのモーダルの挙動は、ユーザにとっては「メインとは別の流れにいる」のを認識しやすいと思います</li>
<li>また、スワイプダウンで戻れるので、操作としても直感的です</li>
<li>ただ、「戻った際に何か処理をさせる」必要がある場合は要注意ですね</li>
<li>今回のサンプルは、<a href="https://github.com/aokiplayer/ModalXcode11">aokiplayer/ModalXcode11</a> に置きました</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Apple の iOS/Swift 認定資格を受験してみた</title>
			<link>https://yagamo-style.com/posts/swift-exam-impression/</link>
			<pubDate>Fri, 20 Dec 2019 16:56:23 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/swift-exam-impression/</guid>
			<description>2018 年 11 月 26 日の Apple の Newsroom 記事 Apple、Hour of Codeにより、さらに多くの学生にプログラミング教育を提供 - Apple (日本) で述べられているように、</description>
			<content type="html"><![CDATA[

<p>2018 年 11 月 26 日の Apple の Newsroom 記事 <a href="https://www.apple.com/jp/newsroom/2018/11/apple-brings-coding-education-to-more-students-for-computer-science-education-week/">Apple、Hour of Codeにより、さらに多くの学生にプログラミング教育を提供 - Apple (日本)</a> で述べられているように、 Apple は主に学生をターゲットとした iOS および Swift の認定資格をリリースしました。</p>

<blockquote>
<p>このカリキュラムを履修した学生は、Swiftについての知識、アプリケーション開発ツール、アプリケーションのコアコンポーネントの知識について認定を受けることもできます。App Development with Swift Level 1認定試験は、世界中のCertiport認定試験センターを通じて実施されます。</p>
</blockquote>

<p>日本ではこれまで試験が配信されていませんでしたが、約 1 年後の 2019 年 12 月 10 日から、 Certiport の代理店である <a href="https://www.odyssey-com.co.jp/">オデッセイ コミュニケーションズ</a> から配信が開始されました。</p>

<p>配信開始日の一番早い時間に受験し、日本での認定第一号として合格してきました。
興味のある方もいらっしゃると思うので、 NDA に抵触しない程度に感想などをまとめてみます。</p>

<p>なお、この記事は日本でのリリース当初（2019 年 12 月 10 日）の情報です。
今後のアップデートで、変わる可能性がありますのでご注意ください。</p>

<h1 id="試験の概要">試験の概要</h1>

<p>詳しくは、<a href="https://www.odyssey-com.co.jp/app-dev-with-swift/">公式サイト</a>をご覧ください。</p>

<h2 id="名称">名称</h2>

<p>App Development with Swfit Level 1</p>

<h2 id="試験の範囲">試験の範囲</h2>

<p><a href="https://books.apple.com/jp/book/id1219117996">App Development with Swift</a>  の内容</p>

<h2 id="出題数-時間">出題数/時間</h2>

<p>45 問/50 分</p>

<h2 id="受験料">受験料</h2>

<p>一般 ¥9,800, 学生 ¥7,800</p>

<h1 id="想定されるターゲット層">想定されるターゲット層</h1>

<p>試験は、主に学生向けのプログラミング学習コンテンツ Everyone Can Code の 1 つとして Apple がリリースしている電子書籍 <a href="https://books.apple.com/jp/book/id1219117996">App Development with Swift</a> に沿った内容です。
ですので、主なターゲットは学生のようです。
受験料も、学生向けには低く設定されています。</p>

<h1 id="試験の形式">試験の形式</h1>

<h2 id="試験の言語">試験の言語</h2>

<p>試験は、全て英語で出題されます。
日本語での提供は、現時点では考えていないとのことでした。</p>

<h2 id="出題形式">出題形式</h2>

<p>基本的に、一般的なオンライン形式の IT 系試験と同じです。
以下のパターンがあります。</p>

<ul>
<li>多岐選択式</li>
<li>選択肢を回答欄にドラッグ</li>
<li>画像の対象部分をクリックしてマーク</li>
<li>キーワードを入力</li>
</ul>

<h2 id="出題の傾向">出題の傾向</h2>

<h3 id="基本を押さえていれば解ける文法">基本を押さえていれば解ける文法</h3>

<p>利用頻度がそれほど高くないものや、フレームワークを作るような人であれば使うが一般の開発者が使う頻度は低いようなもの、などは出題されません。
よく使うもので、かつ最低限の文法を押さえていれば迷わず解けるものばかりです。</p>

<h3 id="xcode-の画面構成の把握">Xcode の画面構成の把握</h3>

<p>iOS アプリの開発では、 Xcode を利用することが必須です。
そのためなのか、 Xcode のどこからどんな機能が利用できるのか？ということを問われます。</p>

<p>ただし、受験時の最新であった Xcode 11 ではなかったです。
おそらく、 電子書籍（現時点では Xcode 10  対応）のバージョンに合わせているのだと思われます。</p>

<h1 id="感想">感想</h1>

<h2 id="英語での出題に関して">英語での出題に関して</h2>

<p>Twitter で見ていると「試験が英語だから心配」との声が聞こえてきます。
が、私が受験した感じでは「全く問題ない」です。</p>

<p>英語とはいえ、「正しい選択肢を選べ」「画面の正しい位置をクリックしてマークしろ」「ドラッグして選択肢を空欄に入れろ」程度です。
あとは Swift や iOS に関する技術用語なので、それはわかるはずです（わからないなら、日本語でも合格できないです）。</p>

<blockquote>
<p>参考までに、私が以前に一度だけ受けた TOEIC のスコアは 280 点です（Writing: 140, Speaking:140）😑</p>
</blockquote>

<h2 id="難易度">難易度</h2>

<p>難易度は決して高くないです。
意地悪な問題は出ないので、 iOS アプリの開発をすでに行っている方であれば、問題なく合格できると思います。
そうでなくても、入門書を 1 冊こなしていれば十分でしょう。</p>

<p>ロジックをじっくり追うような問題はほとんど出ないので、時間も余裕があります。
私は大体 20 分ちょっとで解き終わり、 10 分くらいで見直して終了しました。
「英語を読むのがちょっと遅い」という方でも、時間は十分だと思います。</p>

<h2 id="出題範囲">出題範囲</h2>

<p><a href="https://books.apple.com/jp/book/id1219117996">App Development with Swift</a>  の範囲なので、広くはないです。
携わっているアプリによっては、この本の中で使ってない機能などもあるかと思います。
そこだけキャッチアップしておくと良いかな、と思います。</p>

<p>例えば、以下の API や機能などは上記の電子書籍で扱っています。</p>

<ul>
<li>UITableViewController</li>
<li>UIAlertController</li>
<li>UIImagePickerController</li>
<li>UIActivityViewController</li>
<li>SFSafariViewController</li>
<li>MFMailComposeViewController</li>
<li>MFMessageComposeViewController</li>
<li>JSONSerialization</li>
<li>Codable</li>
<li>JSONDecoder, JSONEncoder</li>
<li>PropertyListEncoder, PropertyListDecoder</li>
<li>FileManager</li>
<li>URLSession</li>
<li>NotificationCenter</li>
</ul>

<p>また、ビューコントローラの各ライフサイクルメソッドで何をするべきか、だったり Auto Layout の基本なども確認しておくと良いでしょう。</p>

<h1 id="まとめ">まとめ</h1>

<p>この試験は難易度的に「エンジニアの能力の証明」よりも「学び始めの人が基本を確認」するような用途に向いていると思います。
<a href="https://books.apple.com/jp/book/id1219117996">App Development with Swift</a> のコンテンツは、思った以上に役に立つ内容が詰まっています。</p>

<p>「開発には入っているけど、基本の抜けがないか心配」という方は、一度目を通してみると良いでしょう。
その上で、せっかくなので試験も受けてみてはいかがでしょうか？</p>
]]></content>
		</item>
		
		<item>
			<title>Xcode 11 で作成したプロジェクトを iOS 13 未満に対応させる</title>
			<link>https://yagamo-style.com/posts/adopt-under13-xcode11/</link>
			<pubDate>Mon, 02 Dec 2019 16:38:56 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/adopt-under13-xcode11/</guid>
			<description>はじめに Xcode 11 から、新規作成したプロジェクトの構成が変わりました User Interface を Swift UI と Storyboard から選択可能 SceneDelegate.swift が追加 Info.plist に、 SceneDelegate を利用するエントリが追加 iOS 13 以降のみ</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>Xcode 11 から、新規作成したプロジェクトの構成が変わりました

<ul>
<li>User Interface を Swift UI と Storyboard から選択可能</li>
<li>SceneDelegate.swift が追加</li>
<li>Info.plist に、 SceneDelegate を利用するエントリが追加</li>
</ul></li>
<li>iOS 13 以降のみ対応させる場合にはそのままでよいのですが、多くの場合、 2 つ前くらいまでの iOS をサポートすると思います</li>
<li>このままで Target のバージョンに iOS 13 未満を設定すると、エラーが発生して実行できません</li>
<li>ここでは、その解決法を紹介します

<ul>
<li>方法は他にもあるようですが、これが Xcode のサポートを一番受けやすい方法だと思います</li>
<li>なお、 Swift UI は iOS 13 以降対応なので、ここでは Storyboard を選択した前提とします</li>
</ul></li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 11.2.1</li>
<li>iOS 13.2.3, 12.3.1</li>
<li>Swift 5</li>
</ul>

<h1 id="デフォルトの状態と実行確認">デフォルトの状態と実行確認</h1>

<ul>
<li>プロジェクトを作成すると、以下のような状態となっています
<img src="/images/adopt-under-xcode11/xcode11_project.png" alt="xcode11_project" />
<img src="/images/adopt-under-xcode11/scene_manifest.png" alt="scene_manifest" /></li>
</ul>

<h1 id="手順">手順</h1>

<h2 id="build-target-を-ios-13-未満に設定">Build Target を iOS 13 未満に設定</h2>

<p><img src="/images/adopt-under-xcode11/target_under_13.png" alt="target_under_13" /></p>

<h2 id="アプリを実行">アプリを実行</h2>

<ul>
<li>ビルドに失敗する</li>
</ul>

<h2 id="ビルドエラーメッセージを確認">ビルドエラーメッセージを確認</h2>

<p><img src="/images/adopt-under-xcode11/build_error_with_scene.png" alt="build_error_with_scene" /></p>

<h2 id="エラーのアイコンをクリックし-修正内容を選択">エラーのアイコンをクリックし、修正内容を選択</h2>

<p><img src="/images/adopt-under-xcode11/fix-it_correction.png" alt="fix-it_correction" /></p>

<ul>
<li><code>SceneDelegate</code>

<ul>
<li>クラス全体に <code>@available</code> を付加する修正候補を採用</li>
</ul></li>

<li><p><code>AppDelegate</code></p>

<ul>
<li>対象のインスタンスメソッドに <code>@available</code> を付加する修正候補を採用
<br /></li>
</ul></li>

<li><p>修正結果（SceneDelegate.swift）</p></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="nc">UIKit</span>

<span class="p">@</span><span class="n">available</span><span class="p">(</span><span class="n">iOS</span> <span class="mf">13.0</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
<span class="kd">class</span> <span class="nc">SceneDelegate</span><span class="p">:</span> <span class="n">UIResponder</span><span class="p">,</span> <span class="n">UIWindowSceneDelegate</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nv">window</span><span class="p">:</span> <span class="n">UIWindow</span><span class="p">?</span>

    <span class="err">〜省略〜</span>

<span class="p">}</span></code></pre></div>
<ul>
<li>修正結果（AppDelegate.swift）</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="nc">UIKit</span>

<span class="kr">@UIApplicationMain</span>
<span class="kd">class</span> <span class="nc">AppDelegate</span><span class="p">:</span> <span class="n">UIResponder</span><span class="p">,</span> <span class="n">UIApplicationDelegate</span> <span class="p">{</span>

    <span class="err">〜省略〜</span>

    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> UISceneSession Lifecycle</span>

    <span class="p">@</span><span class="n">available</span><span class="p">(</span><span class="n">iOS</span> <span class="mf">13.0</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="n">configurationForConnecting</span> <span class="n">connectingSceneSession</span><span class="p">:</span> <span class="n">UISceneSession</span><span class="p">,</span> <span class="n">options</span><span class="p">:</span> <span class="n">UIScene</span><span class="p">.</span><span class="n">ConnectionOptions</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">UISceneConfiguration</span> <span class="p">{</span>
        <span class="c1">// Called when a new scene session is being created.</span>
        <span class="c1">// Use this method to select a configuration to create the new scene with.</span>
        <span class="k">return</span> <span class="n">UISceneConfiguration</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&#34;Default Configuration&#34;</span><span class="p">,</span> <span class="n">sessionRole</span><span class="p">:</span> <span class="n">connectingSceneSession</span><span class="p">.</span><span class="n">role</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="p">@</span><span class="n">available</span><span class="p">(</span><span class="n">iOS</span> <span class="mf">13.0</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="n">didDiscardSceneSessions</span> <span class="n">sceneSessions</span><span class="p">:</span> <span class="n">Set</span><span class="p">&lt;</span><span class="n">UISceneSession</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Called when the user discards a scene session.</span>
        <span class="c1">// If any sessions were discarded while the application was not running, this will be called shortly after application:didFinishLaunchingWithOptions.</span>
        <span class="c1">// Use this method to release any resources that were specific to the discarded scenes, as they will not return.</span>
    <span class="p">}</span>


<span class="p">}</span></code></pre></div>
<h2 id="再度-アプリを実行">再度、アプリを実行</h2>

<ul>
<li>実行できるが、画面は真っ黒</li>
</ul>

<h2 id="xcode-のコンソールを確認">Xcode のコンソールを確認</h2>

<ul>
<li><p>以下のようなメッセージが表示されている</p>

<pre><code>2019-12-03 10:29:13.671826+0900 SampleProject[309:24561] [Application] The app delegate must implement the window property if it wants to use a main storyboard file.
</code></pre></li>

<li><p>ストーリーボードを利用するためには <code>AppDelegate</code> に <code>window</code> プロパティが必要とのメッセージ</p></li>

<li><p>以前のバージョンの Xcode で作成したプロジェクトでは、宣言されていた</p></li>
</ul>

<h2 id="appdelegate-に-window-プロパティを追加"><code>AppDelegate</code> に <code>window</code> プロパティを追加</h2>

<ul>
<li><code>SceneDelegate</code> に記載されている内容を、そのまま移植すれば OK</li>
<li>修正結果（AppDelegate.swift）</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="nc">UIKit</span>

<span class="kr">@UIApplicationMain</span>
<span class="kd">class</span> <span class="nc">AppDelegate</span><span class="p">:</span> <span class="n">UIResponder</span><span class="p">,</span> <span class="n">UIApplicationDelegate</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nv">window</span><span class="p">:</span> <span class="n">UIWindow</span><span class="p">?</span>


    <span class="err">〜省略〜</span>
<span class="p">}</span></code></pre></div>
<h2 id="実行して-動作することを確認">実行して、動作することを確認</h2>

<ul>
<li>Main.storyboard の最初のシーンが表示される</li>
</ul>

<h1 id="まとめ">まとめ</h1>

<ul>
<li>基本的には、 Xcode の修正候補に従って修正すれば問題ないです</li>
<li>今回のサンプルは、 GitHub に置きました

<ul>
<li><a href="https://github.com/aokiplayer/Under13Xcode11Sample">aokiplayer/Under13Xcode11Sample</a></li>
</ul></li>
<li>これ以外に、今後は Swift UI とストーリーボードを混在させる必要が出てくると考えられます

<ul>
<li>Swift UI を使いたいが、 iOS 13 未満もサポートしたいパターン</li>
</ul></li>
<li>複数バージョンに対応させる方法は、調べておきましょう</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>asr restore による Mac の起動ボリュームのリストア</title>
			<link>https://yagamo-style.com/posts/asr-restore-basic/</link>
			<pubDate>Tue, 15 Oct 2019 13:22:13 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/asr-restore-basic/</guid>
			<description>はじめに Apple 標準の asr コマンドを利用して、 Mac の起動ボリューム（デフォルトでは Macintosh HD）をリストアする方法です とはいえ、起動ボリュームか否かは関係な</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>Apple 標準の asr コマンドを利用して、 Mac の起動ボリューム（デフォルトでは Macintosh HD）をリストアする方法です</li>
<li>とはいえ、起動ボリュームか否かは関係なく、どのボリュームでも扱い方は同じです

<ul>
<li>むしろ、起動可能なボリュームのイメージ作成の方にコツがある</li>
<li>今回は、イメージ作成についての詳細には触れません</li>
</ul></li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>MacBook Pro without T2 Security Chip (-2017)</li>
<li>MacBook Pro with T2 Security Chip (2018-)</li>
<li>macOS Mojave 10.14.6</li>
</ul>

<h1 id="asr-コマンド">asr コマンド</h1>

<ul>
<li>asr は、 Apple Software Restore の略であり、その名の通りリストアを目的としたコマンドです</li>
<li>Apple がどこまで公式にサポートしているのかはわかりませんが、起動ボリューム自体もリストア可能です

<ul>
<li>ソースとなるディスクイメージの作成方法にコツがあったり、いろいろ苦労はありますが…</li>
</ul></li>
<li>主に利用するのは、 <code>asr restore</code> の形式です</li>
</ul>

<h2 id="asr-restore">asr restore</h2>

<ul>
<li><p><code>asr restore</code> は、以下のような形式で記述します</p>

<pre><code>asr restore --source リカバリ元のディスクイメージやボリューム --target リカバリ先のディスクやボリューム --erase
</code></pre></li>
</ul>

<h3 id="オプションの説明">オプションの説明</h3>

<ul>
<li><code>--source or -s</code>

<ul>
<li>リカバリ元のソースを指定</li>
<li>ディスクイメージ でもいいし、それをマウントしたボリュームでも OK

<ul>
<li>DMG 形式はそのまま指定できるが、 Sparse Bundle などではマウントしなければ指定不可能</li>
</ul></li>
</ul></li>
<li><code>--target or -t</code>

<ul>
<li>リカバリ先のターゲットを指定</li>
<li><code>/Volume/...</code> のようにボリュームを指定しても、 <code>/disk/disk1s2</code> のようにディスクを指定する形式でも OK</li>
</ul></li>
<li><code>--erase</code> リストア先のデータを削除する</li>
</ul>

<h1 id="利用例">利用例</h1>

<h2 id="トレーニング用に複数-mac-をリストアする">トレーニング用に複数 Mac をリストアする</h2>

<ul>
<li><a href="https://yagamo-style.com/posts/iosdc2019day1/">iOSDC 2019 に Mac の環境構築に関する内容で登壇してきました</a> でご紹介したように、トレーニング環境のセットアップに利用しています

<ul>
<li>全受講者の環境を、完全に揃えることができるメリットは大きいです</li>
<li>iOSDC での発表時から、利用する方法は若干変わってます（T2 Security Chip 搭載の Mac への対応のため）</li>
</ul></li>
</ul>

<h3 id="手順">手順</h3>

<ol>
<li>あらかじめ、全 Mac にパーティションを切っておく（ここでは Setup というパーティションとする）</li>
<li><a href="https://bombich.com/">Carbon Copy Cloner</a> （以下、 CCC）を使って、リストアイメージを格納したディスクイメージを作成する（ここでは Setup.sparsebundle とする）

<ul>
<li>CCC を利用するのは、 Disk Utility で作成したイメージから戻すと bless に失敗して起動できず、その対処方法がわからなかったためです</li>
<li>T2 Security Chip あり/なしの Mac 間では、同じイメージを使い回すことはできません</li>
</ul></li>
<li>イメージを全リストア対象の Mac の Setup パーティションにコピーする（残念ながらここは手作業）</li>
<li><code>asr restore</code> でリストア（2,3 分で完了）</li>
</ol>

<h1 id="最後に">最後に</h1>

<ul>
<li>Apple としてはモノリシックイメージからのリストアは推奨していないものの、 asr コマンドについては WWDC 2019 のセッションで紹介しています

<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/710/">What&rsquo;s New in Apple File Systems</a></li>
</ul></li>
<li>APFS や T2 Security Chip との付き合い方は考える必要がありますが、学校やトレーニング企業ではイメージからのリストアは必須なので、今後も引き続き使い方を探っていきます</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>iOSDC 2019 に参加してきました</title>
			<link>https://yagamo-style.com/posts/iosdc2019day2/</link>
			<pubDate>Sun, 08 Sep 2019 19:57:25 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/iosdc2019day2/</guid>
			<description>2.5 日間にわたって開催されていた iOSDC 2019 が終了しました。正確には、今はまだこのブログを書いている途中なので終了ではないですが（&amp;rdquo;ブログ</description>
			<content type="html"><![CDATA[

<p>2.5 日間にわたって開催されていた iOSDC 2019 が終了しました。正確には、今はまだこのブログを書いている途中なので終了ではないですが（&rdquo;ブログを書くまでが iOSDC&rdquo;）。</p>

<p>私自身の登壇に関しては、前回のエントリ <a href="https://yagamo-style.com/posts/iosdc2019day1/">iOSDC 2019 に Mac の環境構築に関する内容で登壇してきました</a> をぜひご覧ください。</p>

<p>ここでは、それ以外について振り返りたいと思います。</p>

<h1 id="公式サイト-ハッシュタグなど">公式サイト、ハッシュタグなど</h1>

<ul>
<li><a href="https://iosdc.jp/2019/">https://iosdc.jp/2019/</a></li>
<li><a href="https://twitter.com/iosdcjp">@iosdcjp</a></li>
<li><a href="https://twitter.com/hashtag/iosdc?src=hash">#iosdc</a></li>
</ul>

<h1 id="イベント全体について">イベント全体について</h1>

<p>もちろん、最高のスタッフで全体的に素晴らしかったです！
 が、いくつかピックアップします。</p>

<h2 id="良かったこと">良かったこと</h2>

<h3 id="公式アプリ">公式アプリ</h3>

<ul>
<li>アプリ自体も良かったですし、フィードバックを素早く反映されていてすごいなと思いました</li>
<li>具体的には、練習会のときに「スピーカーだけじゃなくて、スタッフの方の Twitter リンクはないのですか？」とお伝えしたら直後のリリースで対応されていました！</li>
</ul>

<h3 id="ネットワーク">ネットワーク</h3>

<ul>
<li>毎年改善が目覚ましいです</li>
<li>ごく短時間、繋がりにくいのと WiFi の先でインターネットに接続できないこともありましたが、ほぼ問題なく接続できていました

<ul>
<li>1,000 人越えのしかもコミュニティベースのイベントで、これは本当にすごいなと思います</li>
</ul></li>
<li>Aruba の最新の機器をこのカンファレンスで（たぶん）国内初の利用とか、気合入ってますね！</li>
</ul>

<h3 id="映像技術">映像技術</h3>

<ul>
<li>登壇者のスライドとそこから切り替えてデモ実施時の映像、登壇者の映像をセッションタイトル付きの枠にその場で合成して配信してました</li>
<li>また、スライドの縦横比によって即座に切り替えたりも</li>
<li>ボーッとしてると当たり前のように思えますが、冷静に考えてとてもすごい！</li>
</ul>

<h3 id="スピーカーディナーでの-1min-ピッチ">スピーカーディナーでの 1min ピッチ</h3>

<ul>
<li>文章からだけじゃなくて、動画でトークの内容を事前に宣伝する試みは面白いなと思いました</li>
<li>スピーカーの立場としても、これを行うことで話す練習にもなるし、考えをまとめるいい機会になりました</li>
</ul>

<h3 id="ルーキーズ-lt-練習会">ルーキーズ LT 練習会</h3>

<ul>
<li>Twitter や別のエントリで何度も書いてますが、これは練習という意味だけでなく最高でした！</li>
<li>練習会の参加者（スピーカーだけじゃなくてスタッフの皆さん）は、顔を合わせるたびに話が盛り上がる感じになってました</li>
<li>どなたかがツイートしていましたが、この &ldquo;文化祭&rdquo; みたいな感じがすごくいいなーと思いました</li>
<li>この練習会は、次に採択されてももう二度と参加できないのが寂しいです😢</li>
</ul>

<h3 id="座席予約">座席予約</h3>

<ul>
<li>個人サポーターおよびジョーカーチケットを持ってる人が、あらかじめ聞きたいセッションの席を予約できるシステムです</li>
<li>人気のセッションは前のセッションを諦めて並ぶ必要があったりしたけど、それを（ある程度）解消できます</li>
<li>私は並ぶのが苦手なタイプなので、これはありがたかったです！</li>
</ul>

<h3 id="オープニングパーティ-茶会-懇親会">オープニングパーティ、茶会、懇親会</h3>

<ul>
<li>交流を測る場としては同じだけど、それぞれコンセプトが違っていて楽しかったです

<ul>
<li>オープニングパーティは話す、というよりもみんなで踊って楽しむ（音量大きめ）</li>
<li>茶会は &ldquo;ノンアルコールがマジョリティ&rdquo;。着席でカテゴリ別のテーブルや、ボードゲームなどもあり</li>
<li>懇親会は立食で、いわゆる普通の懇親会</li>
</ul></li>
<li>多くのカンファレンスは最終日の懇親会のみだけなので都合がつかないこともあるけど、複数あると参加できる可能性が増えていいですね</li>
</ul>

<h2 id="もっと良くできるかも">もっと良くできるかも</h2>

<h3 id="iosdc-チャレンジ">iOSDC チャレンジ</h3>

<ul>
<li>これ自体は、ゲーム性があってとても楽しいものでした</li>
<li>トークンを探すために、多くのスポンサーブースにも自然と足が向くという、よく考えられた仕組みです

<ul>
<li>2017 年の、スポンサーロゴ缶バッジと近いですね</li>
</ul></li>
<li>が、例年の自分の行動と照らし合わせてみると、いつもであれば聞いたセッションのフィードバックをしていた時間を、トークン探しに費やしていました</li>
<li>そのため、聞いてすぐにフィードバックが送れず、ほとんどは全日程が終わった後に書くことになりました</li>
<li>そこは、どちらを優先するかの参加者の問題なので、私の考え方次第ですね</li>
</ul>

<h3 id="セッションのバランス">セッションのバランス</h3>

<ul>
<li>これも感じ方次第なのですが、 iOS やその周辺技術以外のトークが比較的固まっている時間帯がありました

<ul>
<li>最終日 LT の後半</li>
</ul></li>
<li>全体からすると割合はそこまで多くなかったと思うのですが、印象的にそう見えてしまった感じがします</li>
<li>でも、トークの題材を限定しすぎるよりも自分の知らなかったいろんな内容を知るのは楽しいです！</li>
</ul>

<h3 id="茶会の流動性">茶会の流動性</h3>

<ul>
<li>茶会は基本、着席でテーブルを囲んで話すスタイルでした</li>
<li>そのため、人の流動性は少なく、多くの人との交流という点ではちょっともったいなかったです

<ul>
<li>意図して動かないというわけではなくて、座ってるとじっくり話し込んじゃって気付いたら時間が経過している</li>
</ul></li>
<li>どなたか言ってましたが、スタッフが途中でアナウンスをしてみてもいいのかなと思いました</li>
</ul>

<h3 id="名札のプロフィール-qr">名札のプロフィール QR</h3>

<ul>
<li>参加者同士のアカウント交換しやすいように、名札に fortee のアカウント情報へアクセスする QR コードが付いていました</li>
<li>これはすごく便利！だったのですが、私は活用できていませんでした（活用したつもりになっていました）</li>
<li>スピーカー情報を登録していたので、それが表示されるものと思っていたのですが、それとは別に入力が必要でした</li>
<li>それに気付いたのが終盤だったので、私の QR コードを読み込んでくださっていた方々は無を見ていたことになります…</li>
<li>スピーカーに対して、「スピーカー情報だけ入力してもダメだよ」とのアナウンスが事前にあると良かったかも知れません</li>
</ul>

<h1 id="次回への抱負">次回への抱負</h1>

<ul>
<li>今回の私のトークは「試行錯誤してる」状態で終わってしまいました</li>
<li>引き続き試すので、そこで得られた知見などをまたお話ししたいなと思ってます</li>
<li>今回は参加できなかった、企業スポンサーとしてもまた帰って来るために組織もなんとかしたい…</li>
</ul>

<h1 id="参加したセッションについての一言感想">参加したセッションについての一言感想</h1>

<p>たくさん感想はあるのですが、ものすごい量になりそうなのでそれぞれ一言だけ感想を書きます。</p>

<h2 id="day-0-前夜祭">day 0 - 前夜祭</h2>

<h3 id="普通に書くと即メモリーリーク-こんなに大変だけど俺はxamarin-iosを使い続けるぜ">普通に書くと即メモリーリーク！こんなに大変だけど俺はXamarin.iOSを使い続けるぜ！</h3>

<ul>
<li>Xamarin.iOS は、何だかんだ言っても考慮することが多くてすっごく大変。でも技術や探究が好きな人には最高に楽しめそう</li>
</ul>

<h2 id="day-1">day 1</h2>

<h3 id="めくるめくシェーダアートの世界">めくるめくシェーダアートの世界</h3>

<ul>
<li>難しそうなイメージがあったけど、簡単な処理であればすぐにでも試すことができそう。記憶の彼方にある（もうないかも）行列などを思い出すきっかけになる気がします</li>
</ul>

<h3 id="ランチセッション-ランチスポンサー-crew-様">ランチセッション（ランチスポンサー: CREW 様）</h3>

<ul>
<li>ユーザからの 5 段階評価は基準がブレるので難しいのはすごく納得。「こんなことがあったら 4」みたいに、例示をするのは確かに良さそう</li>
</ul>

<h3 id="swiftクリーンコードアドベンチャー-日々の苦悩を乗り越え-確かな選択をするために">Swiftクリーンコードアドベンチャー　~日々の苦悩を乗り越え、確かな選択をするために~</h3>

<ul>
<li>丁寧な例示があったので、まずはなぞってやってみたい。 Swift では全然ジェネリクスを活用できてないので、それもキャッチアップしつつかな</li>
</ul>

<h3 id="画像処理における-uiimageとcgimageとciimageの効果的な使い分け">画像処理における、UIImageとCGImageとCIImageの効果的な使い分け</h3>

<ul>
<li>UIImage しか使ってこなかった、かつカメラ機能なんていつ実装したかな勢なので、またやってみたい。リサイズは絶対必要になるし、そのときは今回の知見が役立ちそう</li>
</ul>

<h3 id="iosアプリのリジェクトリスクを早期に発見するための取り組み">iOSアプリのリジェクトリスクを早期に発見するための取り組み</h3>

<ul>
<li>ipa ファイルの中身を詳しく見たことはなかったので、そこまでいろいろ情報が取れるとは思ってなかった。しかもそれをもとにチェックツールを作ってしまうとは。これは欲しい！</li>
</ul>

<h3 id="lt-track-a">LT - Track A</h3>

<h4 id="日本のサマータイムに苦しめられた話">日本のサマータイムに苦しめられた話</h4>

<ul>
<li>サマータイム実施してた年の特定日時だけ特別対応が必要とか、すごく大変。これって、定常的にサマータイムやってる国の情報だったら問題ないのかな？</li>
</ul>

<h4 id="property-delegatesがもたらす新しいswiftプログラミング">Property Delegatesがもたらす新しいSwiftプログラミング</h4>

<ul>
<li>この秋までに理解が必須な、新しい言語仕様。だけど理解が追いついてない。サンプルに挙げて頂いたコードを読み直そう</li>
</ul>

<h4 id="lldbデバッガで不具合の原因を特定して開発速度を上げよう">LLDBデバッガで不具合の原因を特定して開発速度を上げよう</h4>

<ul>
<li>po しか使ってなかった人のための技術。 LLDB のコマンド、いろいろ使おうと思いつつ今に至るので、これをきっかけにまずは発表にあった v とか使ってみよう</li>
</ul>

<h4 id="core-mlで実現する爆速のarサイズ計測">Core MLで実現する爆速のARサイズ計測</h4>

<ul>
<li>サイズ計測の精度を上げるのが大変そうだけど、それができたら本当に使いやすそう。撮影条件さえ整えば、このままでも実用に耐えられそう。こうやって実際に役立つ場面があると、すごく試したくなります</li>
</ul>

<h4 id="1ヶ月半でプッシュ通知許諾率を17-から40-にあげた話">1ヶ月半でプッシュ通知許諾率を17％から40％にあげた話</h4>

<ul>
<li>まさに試行錯誤って感じでした。やっぱり、シンプルな方法はストレートに効いてくるのがわかりました</li>
</ul>

<h4 id="もし文系卒の女子エンジニアが-5年もののiosアプリにユニットテストを導入しようとしたら">もし文系卒の女子エンジニアが 5年もののiOSアプリにユニットテストを導入しようとしたら</h4>

<ul>
<li>最初から壮大な夢を描いて完璧を求めるんじゃなくて、できるところからやることの重要さがよく伝わりました。私も、できるところからやろう</li>
</ul>

<h4 id="ar-quick-lookを家具ecサイトに導入した話">AR Quick Lookを家具ECサイトに導入した話</h4>

<ul>
<li>AR Quick Look は全く使ったことがなかったけど、意外と簡単に使えそう。やっぱり、ブラウザで AR ってユーザにとっては気軽だしいいよね！</li>
</ul>

<h4 id="個人開発のアプリが輝くために">個人開発のアプリが輝くために</h4>

<ul>
<li>アプリそのものが良くても、検索にヒットしないともったいない。その後の茶会で、実際にそういう例に遭遇してなるほど！と思いました</li>
</ul>

<h4 id="gitlabrunnerで始める自前ci環境">GitLabRunnerで始める自前CI環境</h4>

<ul>
<li>弊社も GitLab 立ててる（Mac ではないけど）ので、やってみたくなった。トレーニングで使わなくなった、ちょっと古い Mac で試してみようかな？</li>
</ul>

<h4 id="swiftでつくるファミコンエミュレータのススメ">Swiftでつくるファミコンエミュレータのススメ</h4>

<ul>
<li>Swift には unsigned があるから、エミュレータに適しているらしいです。それは俄然興味が湧きます。 Swift の夢が広がりますね</li>
</ul>

<h2 id="day-2">day 2</h2>

<h3 id="iosアプリに-意識-は宿るのか-ディープラーニングの先にある人工知能-ai">iOSアプリに「意識」は宿るのか？ディープラーニングの先にある人工知能（AI）</h3>

<ul>
<li>脳そのものについての説明が多く、生物学好きな私にはとても興味深い内容でした。 AI を理解するには、やはりそこまで学ぶ必要があるんですね</li>
</ul>

<h3 id="今こそwatchos">今こそwatchOS</h3>

<ul>
<li>通知の確認と Suica 以外、なかなか活用されない（あとは時間を見る） Apple Watch ですが、思ったよりできることが増えてました。あの画面上で、 3D モデルがグリグリ動くのはテンション上がりますね！</li>
</ul>

<h3 id="多言語対応と戦う-2019年版">多言語対応と戦う 2019年版</h3>

<ul>
<li>多言語対応、いつも「どこまで分解するか」悩むけど、その辺りの指針もあっていい感じでした。でも実は多言語対応とかしてないので、そろそろやってみるかな</li>
</ul>

<h3 id="lt-track-a-b">LT - Track A + B</h3>

<h4 id="俺たちのarkitでめちゃめちゃ表情豊かなvtuber向け表情トラッカーを作るぞ">俺たちのARKitでめちゃめちゃ表情豊かなVTuber向け表情トラッカーを作るぞ</h4>

<ul>
<li>顔のトラッキングで、数十個もの特徴点？があるのは知りませんでした。この辺の技術も、一度試しておきたいです</li>
</ul>

<h4 id="ios-12以下でdark-modeに対応した地獄の話">iOS 12以下でDark modeに対応した地獄の話</h4>

<ul>
<li>Dark Mode のことを考えているか？と言われたら No なので、その対応を考えさせられる内容でした。 Dark Mode にも対応した Type は使いやすいエディタなのでみんな使おう！</li>
</ul>

<h4 id="swiftのスタック変数とcpuレジスタの関係を読み解いた">Swiftのスタック変数とCPUレジスタの関係を読み解いた</h4>

<ul>
<li>やっぱり低レイヤーの処理って、知っておいた方がいいのかな？とても楽しそうにお話しされてたので、触れてみたくなりました</li>
</ul>

<h4 id="モノレポで複数アプリをリリースする場合のgit運用戦略">モノレポで複数アプリをリリースする場合のGit運用戦略</h4>

<ul>
<li>複数アプリで共通するようなコードは、現時点ではあまり持ってないけど、将来のために試してみようかな？</li>
</ul>

<h4 id="swiftuiでの開発に向けた我々が出来る既存アプリのリファクタリング">SwiftUIでの開発に向けた我々が出来る既存アプリのリファクタリング</h4>

<ul>
<li>コンポーネントをしっかり分けておけば影響範囲は最小限に抑えられる、というお話でした。が、さて自分のコードを省みると…</li>
</ul>

<h4 id="arkitの壁認識で-壁にぶち当たった話">ARKitの壁認識で、壁にぶち当たった話</h4>

<ul>
<li>ARKit の面白さと、特徴の少ない床や壁への対応の大変さがよくわかりました。スタンドを立てて、最後にそれを消せばいいとは。発想の転換ですね！</li>
</ul>

<h4 id="iosdcのプロポーサル判別器をつくろう">iOSDCのプロポーサル判別器をつくろう</h4>

<ul>
<li>プロポーザルの生成ではすごい文章がで出来上がっていました。いずれはこれらの技術の精度が上がると思うと、これは興味深いです</li>
</ul>

<h4 id="write-the-code-change-the-world-エンジニアと法律">Write the &ldquo;code&rdquo;, Change the world. 〜エンジニアと法律〜</h4>

<ul>
<li>技術が正しく使われて発展しやすい環境を作るには、我々のような技術を理解した者の働きかけが必要なんですね。今まで考えもしませんでした</li>
</ul>

<h4 id="getting-started-with-swift-webassembly">Getting Started with Swift WebAssembly</h4>

<ul>
<li>Swift がブラウザ上でも使えるようになると思うと、テンションが上がります。簡単には行かなさそうですが、望みはありそうで楽しみです</li>
</ul>

<h4 id="これデフォルトで作れないんだ-を解消した話">これデフォルトで作れないんだ！？を解消した話</h4>

<ul>
<li>デザイナーとエンジニア間の、認識の齟齬を解消する取り組みの話でした。仕組みとして取り入れて実際に改善するのが、やはり重要ですね</li>
</ul>

<h4 id="フィードやチャットのスクロール-を全力でなめらかにする">フィードやチャットのスクロールを全力でなめらかにする</h4>

<ul>
<li>テキストの内容でセルの高さをあらかじめ計算する、という内容でした。少しコード量は増えますが、パフォーマンスが改善するなら、やってみる価値はありそうですね</li>
</ul>

<h4 id="令和時代のゲームボーイ開発">令和時代のゲームボーイ開発 👾</h4>

<ul>
<li>ゲームボーイの実機で動くものが作れるのは、とても魅力的です。実装言語が Swift だったら、もっと良かったですね</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>iOSDC 2019 に Mac の環境構築に関する内容で登壇してきました</title>
			<link>https://yagamo-style.com/posts/iosdc2019day1/</link>
			<pubDate>Sat, 07 Sep 2019 07:33:45 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/iosdc2019day1/</guid>
			<description>iOSDC 2019 に Mac の環境構築の内容で LT 登壇します で書いていましたが、ルーキーズ LT に登壇してきました。 普段からトレーニングで話してはいますが、全くの別物</description>
			<content type="html"><![CDATA[

<p><a href="https://yagamo-style.com/posts/iosdc2019pre/">iOSDC 2019 に Mac の環境構築の内容で LT 登壇します</a> で書いていましたが、ルーキーズ LT に登壇してきました。
普段からトレーニングで話してはいますが、全くの別物なのでずっと緊張してました。</p>

<p>若干のミス（残り時間を間違えて、 15  秒余らせたまま最後の部分を省略してしまった）はあったものの、お伝えできたかなと思います。</p>

<h1 id="公式サイト-ハッシュタグなど">公式サイト、ハッシュタグなど</h1>

<ul>
<li><a href="https://iosdc.jp/2019/">https://iosdc.jp/2019/</a></li>
<li><a href="https://twitter.com/iosdcjp">@iosdcjp</a></li>
<li><a href="https://twitter.com/hashtag/iosdc?src=hash">#iosdc</a></li>
</ul>

<h1 id="発表スライド">発表スライド</h1>

<p>Speaker Deck に上げたので、ぜひご覧ください。</p>

<ul>
<li><a href="https://speakerdeck.com/aokiplayer/macos-restore-history">完全に同じ開発環境を素早く用意できる（もしくはできない）技術</a></li>
</ul>

<h1 id="モチベーション">モチベーション</h1>

<p>トレーニングの環境作成って、とても気をつかいます。特に、 Mac を使うトレーニングの場合、多くの受講者が Windows しか触ったことがないです。
そのため、トレーナーがデモしている環境と、受講者の環境にちょっとでも差があると、受講者はとても戸惑います。
なので、環境は少しの違いもなく揃えておく必要があります。</p>

<p>ただし、全部手作業で行うのは効率的ではなく、ミスも発生します。それに、セットアップ自体は技術に長けた我々トレーナーではなく、別の部隊です。なので、技術的に難しい手順は踏ませられません。</p>

<h1 id="話したこと">話したこと</h1>

<p>いかにミスを防ぎ、大量の Mac を素早く正確にセットアップするかという点について、これまで取ってきた様々な手法についてお話ししました。
現在、残念ながら以前と比較して手間のかかる方式で行わざるを得ず、まだ模索している状況です。
それも含め、現状をお伝えしました。</p>

<h1 id="紹介した技術">紹介した技術</h1>

<h2 id="apple-の提供する機能">Apple の提供する機能</h2>

<h3 id="netrestore">NetRestore</h3>

<ul>
<li>macOS Server の 1 機能として提供されていました

<ul>
<li>Apple の「モノリシックイメージからのリストアは推奨しない」方針により、現在は利用できません</li>
<li>macOS Server にはまだ機能が残っていますが、 GUI の画面は削除されました</li>
<li>2018 年以降（T2 Security Chip搭載）の Mac ではネットワークブート機能が削除されたため、 NetRestore が機能したとしても、各 Mac からは NetRestore イメージにはアクセスできません</li>
</ul></li>
<li>事前に作成しておいたシステムイメージと完全に同じ環境がリストアできます</li>
<li>とても素早い（リストア開始から完了まで 5,6 分）</li>
</ul>

<h3 id="time-machine">Time Machine</h3>

<ul>
<li>履歴を持ったバックアップを取れる機能です</li>
<li>基本的に、同じバックアップから複数の Mac をリストアすることは前提にしていません

<ul>
<li>そのためか、複数の Mac から同時にリストアできません</li>
</ul></li>
<li>Time Machine からのリストアは、 NetRestore のようなブロックコピーではないので時間がかかります</li>
</ul>

<h3 id="mdm-mobile-device-management">MDM(Mobile Device Management)</h3>

<ul>
<li>社内で iOS を集中管理する際などに利用しますが、 macOS にも対応しています</li>
<li>Configuration Profile に設定を記述し、それをサーバからプッシュすることで設定を強制します</li>
<li>Apple Business Manager(ABM) と連携することで、 VPP(Volume Purchase Program) で購入した App Store のアプリのインストールを各クライアントに強制できます

<ul>
<li>ただし、 App Store にある最新のアプリがインストールされるため、「チームで Xcode のバージョンを固定している」場合などには別の策を取る必要があります</li>
</ul></li>
<li>ABM は、 VPP と DEP を統合したものです

<ul>
<li>VPP(Volume Purchase Program)</li>
<li>DEP(Device Enrollment Program)</li>
</ul></li>
</ul>

<h3 id="asr-apple-software-restore">ASR(Apple Software Restore)</h3>

<ul>
<li>今回紹介した技術の中では NetRestore 以外唯一、インストールではなくイメージのコピーを行う技術

<ul>
<li>なので、リストアは速いです（数分）</li>
<li>ただし、イメージは各 Mac に個別にコピーしておく必要があります</li>
</ul></li>
<li>Disk Utility を利用してシステムのイメージを DMG ファイルとして作成し、それをもとに macOS Recovery 上でコマンドラインからリストアします</li>
<li>macOS 10.14 Mojave まではうまく動作したのですが、 10.14.1 以降必ず失敗するので、断念しました

<ul>
<li>原因は追い切れていないので、場合によってはまた利用できるかもしれません</li>
</ul></li>
</ul>

<h2 id="サードパーティの機能">サードパーティの機能</h2>

<h3 id="autodmg">AutoDMG</h3>

<ul>
<li>現在、暫定的に利用している機能です</li>
<li>macOS のインストーラをカスタマイズし、/Applications へ配置したいアプリケーションなどはあらかじめ仕込んでおくことができます

<ul>
<li>通常手順での Xcode のインストールなどは非常に時間がかかる（ダウンロード、 xip の展開）ので、その時間をなくすことができます</li>
<li>そのため、「クリーンインストールして、アプリを手動インストール」よりはだいぶマシです</li>
</ul></li>
<li>各種設定はできない（クリーンインストールと同じで、 macOS インストール後のユーザの作成から先は手作業）ので、 Configuration Profile やシェルスクリプト で対応しています</li>
<li>macOS の設定を行うコマンドとしては、以下などを利用しています

<ul>
<li>defaults コマンド

<ul>
<li>ユーザの設定を管理するコマンド</li>
</ul></li>
<li>scutil コマンド

<ul>
<li>システムの設定を管理するコマンド</li>
</ul></li>
</ul></li>
</ul>

<h1 id="登壇した感想">登壇した感想</h1>

<p>内容的にあまり刺さる方はいないだろうな、とは思っていましたが、 Twitter や対面で感想を頂くことができました。
誰か 1 人でも、役に立った（もしくは面白かった）と思って頂けたなら、話した意味はあったのかな、と思います。</p>

<p>また、特にルーキーズ LT では、事前に運営側主催で練習会を開いて頂き、アドバイスも頂けました。
その際に、練習会参加者同士の繋がりも生まれ、良い仲間ができました。</p>

<p>運営側、そしてルーキーズ仲間には本当に感謝しています。もちろん、私の LT を聞いて頂いた皆さま、このポストを読んで下さった皆さま、ありがとうございます。</p>

<p>本当に iOSDC は楽しいので、次はあなたもぜひトークに応募してみてください！</p>

<h1 id="勉強会会場-機材お貸ししてます">勉強会会場&amp;機材お貸ししてます</h1>

<p>都内で勉強会を開きたい方、ご連絡ください！
セミナールームだけではなく、 MacBook Pro や iPad などもご利用頂けます。
try! Swift のワークショップでご利用頂いた実績もあります。どうぞ、お気軽に声をかけてください。</p>
]]></content>
		</item>
		
		<item>
			<title>iOSDC 2019 に Mac の環境構築の内容で LT 登壇します</title>
			<link>https://yagamo-style.com/posts/iosdc2019pre/</link>
			<pubDate>Tue, 03 Sep 2019 13:14:41 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/iosdc2019pre/</guid>
			<description>2016 年の初回開催から参加している、 iOSDC に今年も参加します（9/5-7 開催）。 昨年までは個人サポーター（およびスポンサー企業の社員）として参加して</description>
			<content type="html"><![CDATA[

<p>2016 年の初回開催から参加している、 iOSDC に今年も参加します（9/5-7 開催）。
昨年までは個人サポーター（およびスポンサー企業の社員）として参加していましたが、今年は LT に登壇します！
なので、スピーカー兼個人サポーターとしての参加です（今期から、弊社は技術系のカンファレンスにスポンサーを出さない方針になってしまいました…）。</p>

<h1 id="公式サイト-ハッシュタグなど">公式サイト、ハッシュタグなど</h1>

<ul>
<li><a href="https://iosdc.jp/2019/">https://iosdc.jp/2019/</a></li>
<li><a href="https://twitter.com/iosdcjp">@iosdcjp</a></li>
<li><a href="https://twitter.com/hashtag/iosdc?src=hash">#iosdc</a></li>
</ul>

<h1 id="私-hiroyuki-aoki-について">私（Hiroyuki Aoki）について</h1>

<ul>
<li><a href="https://www.casareal.co.jp/">株式会社カサレアル</a>で、研修のトレーナーをしています</li>
<li>iOS や Android アプリ開発コースも担当していますが、国内唯一の Apple 認定トレーナーとして macOS のシステム管理コースなども担当しています

<ul>
<li>ちなみに、カサレアルは国内唯一の Apple 認定トレーニングプロバイダーです</li>
<li>Apple の macOS 認定資格（<a href="https://training.apple.com/us/en/recognition">Apple Certified Support Professional</a>）の試験も、弊社で受験可能です</li>
</ul></li>
<li>業務を行う中で得た知見から、今回の LT では Mac の環境構築に関する内容を話します</li>
</ul>

<h1 id="こんなことを話します">こんなことを話します</h1>

<h2 id="完全に同じ開発環境を素早く用意できる-もしくはできない-技術-https-fortee-jp-iosdc-japan-2019-proposal-973963ea-c6b2-46aa-a15b-1b34af099c84"><a href="https://fortee.jp/iosdc-japan-2019/proposal/973963ea-c6b2-46aa-a15b-1b34af099c84">完全に同じ開発環境を素早く用意できる（もしくはできない）技術</a></h2>

<ul>
<li>弊社では、トレーニングで利用するために、たくさんの Mac を全部同じ状態にセットアップしています</li>
<li>手作業で設定すると、ちょっとずつ設定がズレてしまい、受講者に同じ体験をして頂くことができません</li>
<li>そのため、素早く・簡単に・完全に同じ状態の Mac をセットアップする必要性があります</li>
<li>以前は利用できた方法が使えなくなったりと一筋縄では行かないのですが、これまでどうやってきて今後どうして行くのか、お話しします</li>
</ul>

<p>私の登壇は 9 月 6 日の 16:35 、 Track Aの LT 前半の最後です。
アプリの開発技術ではないですが、 Mac の設定も奥が深くて楽しいですよ！
それに、みなさんの普段の Mac 環境準備にも、もしかしたら役に立つ情報があるかも知れません。</p>

<h1 id="iosdc-の好きなところ">iOSDC の好きなところ</h1>

<p>このイベントは、参加者同士のコミュニケーションを特に大事にしていて、「パックマンルール」や「機械的席詰めタイム」など、面白い取り組みをたくさん取り入れています。
また、<a href="https://blog.iosdc.jp/2019/08/28/rookies-lt-practice-session/">ルーキーズ LT 練習会</a>を開催して、初めて登壇する人がより良いプレゼンをできるようにサポートしてくれたりもしています。
このように、参加者のことを本当に大事にしている、誰でも楽しめるイベントです。</p>

<h1 id="ぜひお話ししましょう">ぜひお話ししましょう</h1>

<p>iOSDC は、参加者同士のコミュニケーションを特に大事にしている、私の大好きなカンファレンスです。
私を見つけたら、ぜひ声をかけてください。とても喜びます！</p>
]]></content>
		</item>
		
		<item>
			<title>MACアドレスを取得してファイルに書き出すシェルスクリプト</title>
			<link>https://yagamo-style.com/posts/getmacaddress/</link>
			<pubDate>Fri, 02 Aug 2019 21:49:24 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/getmacaddress/</guid>
			<description>はじめに トレーニングをお客様先で実施する際、持ち込んだMacを現地のWiFiに接続するためにMACアドレスを求められる場合があります 未認証の</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>トレーニングをお客様先で実施する際、持ち込んだMacを現地のWiFiに接続するためにMACアドレスを求められる場合があります</li>
<li>未認証のデバイスを接続させないため、MACアドレスでフィルタリングを掛ける目的です</li>
<li>手作業で取得するのは辛いので、シェルスクリプトを用意しました</li>
<li>あとで集約する際のために、ファイル名にはMacのSerial Numberを付けるようにしました</li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>macOS 10.14.6 Mojave</li>
</ul>

<h1 id="シェルスクリプトの内容">シェルスクリプトの内容</h1>
<div class="highlight"><pre class="chroma"><code class="language-shell:getMACaddr.sh" data-lang="shell:getMACaddr.sh"><span class="cp">#!/bin/sh
</span><span class="cp"></span>
<span class="c1"># GET Serial Number of this Mac</span>
<span class="nv">SERIAL</span><span class="o">=</span><span class="sb">`</span>ioreg -l <span class="p">|</span> awk <span class="s1">&#39;/IOPlatformSerialNumber/ { if (gsub(/&#34;/, &#34;&#34;)) print $4 }&#39;</span><span class="sb">`</span>

<span class="c1"># Write MAC address of primary WiFi interfce in &#34;{SERIAL NUMBER}.txt&#34; on this user&#39;s Desktop</span>
ifconfig en0 ether <span class="p">|</span> awk <span class="s1">&#39;/ether/ { print $2 }&#39;</span> &gt; ~/Desktop/<span class="si">${</span><span class="nv">SERIAL</span><span class="si">}</span>.txt</code></pre></div>
<h2 id="serial-numberを取得して-変数に代入">Serial Numberを取得して、変数に代入</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">SERIAL</span><span class="o">=</span><span class="sb">`</span>ioreg -l <span class="p">|</span> awk <span class="s1">&#39;/IOPlatformSerialNumber/ { if (gsub(/&#34;/, &#34;&#34;)) print $4 }&#39;</span><span class="sb">`</span></code></pre></div>
<ul>
<li><code>ioreg</code>で、ハードウェアデバイスとドライバの情報を取得</li>
<li><code>awk</code>を利用して、以下の処理を実行

<ul>
<li><code>IOPlatformSerialNumber</code>を含む行だけを抽出

<ul>
<li><code>　　　　|   &quot;IOPlatformSerialNumber&quot; = &quot;C0XXXXXXXXXX&quot;</code></li>
</ul></li>
<li><code>&quot;</code>を除去する

<ul>
<li><code>　　　　|   IOPlatformSerialNumber = C0XXXXXXXXXX</code></li>
</ul></li>
<li>スペースで区切った4つ目のフィールドを出力

<ul>
<li><code>C0XXXXXXXXXX</code></li>
</ul></li>
</ul></li>
</ul>

<h2 id="wifiインターフェイスのmacアドレスを取得し-ファイルに書き込み">WiFiインターフェイスのMACアドレスを取得し、ファイルに書き込み</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ifconfig en0 ether <span class="p">|</span> awk <span class="s1">&#39;/ether/ { print $2 }&#39;</span> &gt; ~/Desktop/<span class="si">${</span><span class="nv">SERIAL</span><span class="si">}</span>.txt</code></pre></div>
<ul>
<li><code>ifconfig</code>でインターフェイスを指定して、MACアドレスの情報を取得</li>
<li><code>awk</code>を利用して、以下の処理を実行

<ul>
<li><code>ether</code>を含む行だけを抽出

<ul>
<li><code>　ether XX:XX:XX:XX:XX:XX　</code></li>
</ul></li>
<li>スペースで区切った2つ目のフィールドを出力

<ul>
<li><code>XX:XX:XX:XX:XX:XX</code></li>
</ul></li>
</ul></li>
<li>デスクトップ上の、ファイル名<code>{Serial Number}.txt</code>のファイルに書き込み</li>
</ul>

<h1 id="最後に">最後に</h1>

<ul>
<li>awkとか正規表現とか、いまだに苦手です</li>
<li>「こう書いたほうがいいよ」などあれば、教えてください！</li>
<li>作成したシェルスクリプト は、<a href="https://github.com/aokiplayer/scripts">aokiplayer/scripts</a>に置きました</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>簡単なdelegateのサンプル</title>
			<link>https://yagamo-style.com/posts/delegate/</link>
			<pubDate>Tue, 02 Jul 2019 11:34:30 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/delegate/</guid>
			<description>はじめに iOSアプリでは、delegateが非常によく利用されます トレーニングで紹介していると、初めての人には「delegateオブジェクト</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>iOSアプリでは、delegateが非常によく利用されます</li>
<li>トレーニングで紹介していると、初めての人には「delegateオブジェクトに用意したコールバックメソッドが自動的に呼ばれる」ことの理解が難しいように感じました</li>
<li>そこで、ごく簡単なサンプルを利用してdelegateの仕組みを紹介してみます</li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 10.2</li>
<li>Swift 5</li>
</ul>

<h1 id="サンプルコード">サンプルコード</h1>

<h2 id="delegateを利用するクラスとdelegateプロトコル">delegateを利用するクラスとdelegateプロトコル</h2>

<ul>
<li>まずは、delegateを利用するMyClassクラスの定義とdelegateであるMyDelegateプロトコルの定義です</li>
<li>MyClassの<code>show(text:)</code>を呼ぶと、自身のプロパティとして保持するdelegateの<code>onShowCalled(withText:)</code>を呼ぶ実装となっています</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">delegate</span><span class="p">:</span> <span class="n">MyDelegate</span><span class="p">?</span>
    
    <span class="kd">func</span> <span class="nf">show</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">?.</span><span class="n">onShowCalled</span><span class="p">(</span><span class="n">withText</span><span class="p">:</span> <span class="n">text</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="nc">MyDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">onShowCalled</span><span class="p">(</span><span class="n">withText</span> <span class="n">text</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span>
<span class="p">}</span></code></pre></div>
<h2 id="delegateに準拠したクラス">delegateに準拠したクラス</h2>

<ul>
<li>delegateはプロトコルなので、利用する際にはそのプロトコルに準拠して内容を実装したクラスが必要です</li>
<li>MyAdopted1とMyAdopted2の2つを用意し、それぞれ実装の異なる<code>onShowCalled(withText:)</code>を用意しています</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="nc">MyAdopted1</span><span class="p">:</span> <span class="n">MyDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">onShowCalled</span><span class="p">(</span><span class="n">withText</span> <span class="n">text</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;MyAdopted1: </span><span class="si">\(</span><span class="n">text</span><span class="si">)</span><span class="s">&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">MyAdopted2</span><span class="p">:</span> <span class="n">MyDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">onShowCalled</span><span class="p">(</span><span class="n">withText</span> <span class="n">text</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;</span><span class="si">\(</span><span class="n">text</span><span class="si">)</span><span class="s"> from MyAdopted2!&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<h2 id="delegateを指定">delegateを指定</h2>

<ul>
<li>MyClassのインスタンスに、上記のMyAdopted1およびMyAdopted2をdelegateとして指定します</li>
<li>MyClassの<code>show(text:)</code>を呼ぶと、delegateとして指定したオブジェクトの<code>onShowCalled(withText:)</code>が実行されているのがわかります</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">let</span> <span class="nv">anObject1</span> <span class="p">=</span> <span class="n">MyClass</span><span class="p">()</span>
<span class="n">anObject1</span><span class="p">.</span><span class="n">delegate</span> <span class="p">=</span> <span class="n">MyAdopted1</span><span class="p">()</span>
<span class="n">anObject1</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="s">&#34;Hello&#34;</span><span class="p">)</span>

<span class="kd">let</span> <span class="nv">anObject2</span> <span class="p">=</span> <span class="n">MyClass</span><span class="p">()</span>
<span class="n">anObject2</span><span class="p">.</span><span class="n">delegate</span> <span class="p">=</span> <span class="n">MyAdopted2</span><span class="p">()</span>
<span class="n">anObject2</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="s">&#34;Hello&#34;</span><span class="p">)</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-terminal" data-lang="terminal">MyAdopted1: Hello
Hello from MyAdopted2!</code></pre></div>
<h1 id="まとめ">まとめ</h1>

<ul>
<li>普段、プログラマは上記の「delegateに準拠したクラスの作成」と、「delegateを指定」部分を書くことが多いと思います</li>
<li>delegateを利用するクラスを一度実装してみることで、delegateの仕組みについての理解が深まるのでおすすめです</li>
<li>今回作成したサンプルコードは、GitHubに置きました

<ul>
<li><a href="https://github.com/aokiplayer/DelegateSample">aokiplayer/DelegateSample</a></li>
</ul></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Asset Catalogで同じ名前の別画像を利用する</title>
			<link>https://yagamo-style.com/posts/assetfolder/</link>
			<pubDate>Fri, 21 Jun 2019 09:09:14 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/assetfolder/</guid>
			<description>はじめに Xcodeのアセットカタログ（デフォルトではAssets.xcassets）は、画像などのリソースを管理します アセットカタログ内で、</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>Xcodeのアセットカタログ（デフォルトではAssets.xcassets）は、画像などのリソースを管理します</li>
<li>アセットカタログ内で、フォルダ分けも可能です</li>
<li>その際、別のフォルダに同じ名前の画像を置きたくなることもあります</li>
<li>その場合の扱い方です</li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 10.2.1</li>
<li>iOS 12.2</li>
<li>Swift 5</li>
</ul>

<h1 id="フォルダにnamespaceを付与する">フォルダにNamespaceを付与する</h1>

<h2 id="デフォルトの状態-namespaceなし">デフォルトの状態（Namespaceなし）</h2>

<p><img src="/images/assetfolder/no_namespace.png" alt="no_namespace" /></p>

<ul>
<li>この画像の例では、<code>bird</code>という画像が<code>forest</code>フォルダと<code>sea</code>フォルダの両方に配置されています</li>
<li>ですが、デフォルトの状態ではフォルダ名は無視されるので、これらの画像には<code>bird</code>という名前でアクセスすることになり、区別ができません</li>
</ul>

<h2 id="フォルダ名付きでのアクセス-namespaceあり">フォルダ名付きでのアクセス（Namespaceあり）</h2>

<p><img src="/images/assetfolder/with_namespace.png" alt="with_namespace" /></p>

<ul>
<li>アセットカタログ内でフォルダを選択し、Attributes Inspectorから<code>Provides Namespace</code>にチェックを入れると、そのフォルダ名がNamespaceとして利用されます

<ul>
<li>フォルダの色も黄色から水色に変わっていますね</li>
</ul></li>
<li>この画像の例では、それぞれ<code>forest/bird</code>と<code>sea/bird</code>という名前で区別されます</li>

<li><p>こんな感じで、コード内でもInterface Builderでも参照できます</p>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="p">=</span> <span class="n">index</span> <span class="p">==</span> <span class="mi">0</span> <span class="p">?</span> <span class="n">UIImage</span><span class="p">(</span><span class="n">named</span><span class="p">:</span> <span class="s">&#34;forest/bird&#34;</span><span class="p">)</span> <span class="p">:</span> <span class="n">UIImage</span><span class="p">(</span><span class="n">named</span><span class="p">:</span> <span class="s">&#34;sea/bird&#34;</span><span class="p">)</span></code></pre></div>
<p><img src="/images/assetfolder/image_ib.png" alt="image_ib" /></p>

<h1 id="まとめ">まとめ</h1>

<ul>
<li>Namespaceがあると、格段に管理がしやすくなりますね</li>
<li>今回作成したサンプルコードは、GitHubに置きました</li>
<li><a href="https://github.com/aokiplayer/AssetFolderSample">aokiplayer/AssetFolderSample</a></li>
</ul>

<h1 id="参考">参考</h1>

<ul>
<li><a href="https://developer.apple.com/library/archive/documentation/Xcode/Reference/xcode_ref-Asset_Catalog_Format/FolderStructure.html#//apple_ref/doc/uid/TP40015170-CH33-SW1">Asset Catalog Format Reference: Folders</a></li>
<li><a href="https://stackoverflow.com/questions/33284412/asset-catalog-access-images-with-same-name-in-different-folders">ios - Asset Catalog: Access images with same name in different folders - Stack Overflow</a></li>
</ul></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>SwiftUIで一覧表示画面を作成する</title>
			<link>https://yagamo-style.com/posts/swiftuilist_beta/</link>
			<pubDate>Fri, 14 Jun 2019 13:16:59 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/swiftuilist_beta/</guid>
			<description>はじめに WWDC 2019で発表された目玉として、SwiftUIがあります 今回は、少しだけSwiftUIを触ってみたのでメモしてみます 検証環境 macOS 10.15 Catalina</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>WWDC 2019で発表された目玉として、SwiftUIがあります</li>
<li>今回は、少しだけSwiftUIを触ってみたのでメモしてみます</li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>macOS 10.15 Catalina beta</li>
<li>Xcode 11 beta</li>
<li>iOS 13 beta</li>
<li>Swift 5.1</li>
<li>iPad Pro 10.5 inch</li>
</ul>

<h1 id="ストーリーボードは">ストーリーボードは？</h1>

<ul>
<li>これまで、レイアウトは基本的にストーリーボードで行ってきました</li>
<li>ストーリーボードは決して悪いものではなく、まず画面の作成を始める際にはとても扱いやすいです</li>
<li>ただし、ビューの数が増えたり、複雑なレイアウトをしようとすると非常に管理が難しいのも事実です</li>
</ul>

<h1 id="コードでレイアウトを行うswiftui">コードでレイアウトを行うSwiftUI</h1>

<ul>
<li>Flutterなどでは、画面をコード上で宣言的に記述できます</li>
<li>最近は、この形式をとるものが増えています</li>
<li>SwiftUIも、コードから宣言的なレイアウトを行います</li>
<li>これまでもコードのみで画面を作成できましたが、以下のような問題を抱えていました

<ul>
<li>プレビューの方法がないため、ビルドして実行しないと確認できない</li>
<li>手続的に記述するため、実際のレイアウトがイメージしにくい</li>
</ul></li>
</ul>

<h1 id="swiftuiで作成した一覧画面のサンプル">SwiftUIで作成した一覧画面のサンプル</h1>

<h2 id="画面イメージ">画面イメージ</h2>

<p><img src="/images/swiftuilist_beta/list_preview.png" alt="background_modes" /></p>

<h2 id="実装ファイル">実装ファイル</h2>

<ul>
<li>実装したのは、以下のファイルです</li>
</ul>

<table>
<thead>
<tr>
<th align="left">ファイル</th>
<th align="left">説明</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">FoodModel.swift</td>
<td align="left">表の1行分を表すデータモデル</td>
</tr>

<tr>
<td align="left">FoodDataSource.swift</td>
<td align="left">表示するデータを提供する</td>
</tr>

<tr>
<td align="left">FoodRow.swift</td>
<td align="left">表の各行を表すビュー。FoodListから利用される</td>
</tr>

<tr>
<td align="left">FoodList.swift</td>
<td align="left">表の全体を表すビュー。FoodDataSourceからデータを取得し、各行のFoodRowを生成する</td>
</tr>

<tr>
<td align="left">ContentView.swift</td>
<td align="left">最初に表示されるビュー。この中でFoodListを読み込む</td>
</tr>
</tbody>
</table>

<h3 id="foodmodel-swift">FoodModel.swift</h3>
<div class="highlight"><pre class="chroma"><code class="language-swift:FoodModel.swift" data-lang="swift:FoodModel.swift"><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="kd">struct</span> <span class="nc">FoodModel</span><span class="p">:</span> <span class="n">Codable</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">id</span><span class="p">:</span> <span class="nb">Int</span>
    <span class="kd">var</span> <span class="nv">title</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">var</span> <span class="nv">userName</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">var</span> <span class="nv">imageName</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">var</span> <span class="nv">liked</span><span class="p">:</span> <span class="nb">Bool</span> <span class="p">=</span> <span class="kc">false</span>
<span class="p">}</span></code></pre></div>
<h3 id="fooddatasource-swift">FoodDataSource.swift</h3>
<div class="highlight"><pre class="chroma"><code class="language-swift:FoodDataSource.swift" data-lang="swift:FoodDataSource.swift"><span class="kd">import</span> <span class="nc">Combine</span>
<span class="kd">import</span> <span class="nc">SwiftUI</span>

<span class="kd">class</span> <span class="nc">FoodDataSource</span><span class="p">:</span> <span class="n">BindableObject</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="n">PublisherType</span> <span class="p">=</span> <span class="n">PassthroughSubject</span>
    
    <span class="kd">let</span> <span class="nv">didChange</span><span class="p">:</span> <span class="n">FoodDataSource</span><span class="p">.</span><span class="n">PublisherType</span> <span class="p">=</span> <span class="n">PassthroughSubject</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">,</span> <span class="n">Never</span><span class="o">&gt;</span><span class="p">()</span>
    <span class="kd">var</span> <span class="nv">foodData</span><span class="p">:</span> <span class="p">[</span><span class="n">FoodModel</span><span class="p">]</span>

    <span class="kd">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">foodData</span> <span class="p">=</span> <span class="p">[</span>
            <span class="n">FoodModel</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;スープカレー&#34;</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="s">&#34;山田二郎&#34;</span><span class="p">,</span> <span class="n">imageName</span><span class="p">:</span> <span class="s">&#34;1&#34;</span><span class="p">,</span> <span class="n">liked</span><span class="p">:</span> <span class="kc">true</span><span class="p">),</span>
            <span class="n">FoodModel</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;そば屋のカレー&#34;</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="s">&#34;川田吾郎&#34;</span><span class="p">,</span> <span class="n">imageName</span><span class="p">:</span> <span class="s">&#34;2&#34;</span><span class="p">),</span>
            <span class="n">FoodModel</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;タイ風カレー&#34;</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="s">&#34;里田舞&#34;</span><span class="p">,</span> <span class="n">imageName</span><span class="p">:</span> <span class="s">&#34;3&#34;</span><span class="p">,</span> <span class="n">liked</span><span class="p">:</span> <span class="kc">true</span><span class="p">),</span>
            <span class="n">FoodModel</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;スタミナジャンボカレー&#34;</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="s">&#34;海田泳七郎&#34;</span><span class="p">,</span> <span class="n">imageName</span><span class="p">:</span> <span class="s">&#34;4&#34;</span><span class="p">),</span>
            <span class="n">FoodModel</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;レッドカレー&#34;</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="s">&#34;岡田八郎&#34;</span><span class="p">,</span> <span class="n">imageName</span><span class="p">:</span> <span class="s">&#34;5&#34;</span><span class="p">)</span>
        <span class="p">]</span>

        <span class="n">didChange</span><span class="p">.</span><span class="n">send</span><span class="p">(())</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<h3 id="foodrow-swift">FoodRow.swift</h3>
<div class="highlight"><pre class="chroma"><code class="language-swift:FoodRow.swift" data-lang="swift:FoodRow.swift"><span class="kd">import</span> <span class="nc">SwiftUI</span>

<span class="kd">struct</span> <span class="nc">FoodRow</span> <span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">foodModel</span><span class="p">:</span> <span class="n">FoodModel</span>

    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">VStack</span><span class="p">(</span><span class="n">alignment</span><span class="p">:</span> <span class="p">.</span><span class="n">leading</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">Image</span><span class="p">(</span><span class="n">foodModel</span><span class="p">.</span><span class="n">imageName</span><span class="p">)</span>
                <span class="p">.</span><span class="n">resizable</span><span class="p">()</span>
                <span class="p">.</span><span class="n">aspectRatio</span><span class="p">(</span><span class="n">contentMode</span><span class="p">:</span> <span class="n">ContentMode</span><span class="p">.</span><span class="n">fit</span><span class="p">)</span>
                <span class="p">.</span><span class="n">shadow</span><span class="p">(</span><span class="n">radius</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
                <span class="p">.</span><span class="n">border</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">white</span><span class="p">,</span> <span class="n">width</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>

            <span class="n">Text</span><span class="p">(</span><span class="n">foodModel</span><span class="p">.</span><span class="n">title</span><span class="p">).</span><span class="n">font</span><span class="p">(.</span><span class="n">headline</span><span class="p">)</span>

            <span class="n">HStack</span> <span class="p">{</span>
                <span class="n">Text</span><span class="p">(</span><span class="n">foodModel</span><span class="p">.</span><span class="n">userName</span><span class="p">).</span><span class="n">font</span><span class="p">(.</span><span class="n">subheadline</span><span class="p">)</span>
                <span class="n">Spacer</span><span class="p">()</span>
                <span class="n">Image</span><span class="p">(</span><span class="n">foodModel</span><span class="p">.</span><span class="n">liked</span> <span class="p">?</span> <span class="s">&#34;liked&#34;</span> <span class="p">:</span> <span class="s">&#34;unliked&#34;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}.</span><span class="n">padding</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#if</span> <span class="cp">DEBUG</span>
<span class="kd">struct</span> <span class="nc">FoodRow_Previews</span> <span class="p">:</span> <span class="n">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">Group</span> <span class="p">{</span>
            <span class="n">FoodRow</span><span class="p">(</span><span class="n">foodModel</span><span class="p">:</span> <span class="n">FoodModel</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;Ramen&#34;</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="s">&#34;Jiro Yamada&#34;</span><span class="p">,</span> <span class="n">imageName</span><span class="p">:</span> <span class="s">&#34;5&#34;</span><span class="p">))</span>
        <span class="p">}.</span><span class="n">previewLayout</span><span class="p">(.</span><span class="n">fixed</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="mi">400</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span></code></pre></div>
<h3 id="foodlist-swift">FoodList.swift</h3>
<div class="highlight"><pre class="chroma"><code class="language-swift:FoodList.swift" data-lang="swift:FoodList.swift"><span class="kd">import</span> <span class="nc">SwiftUI</span>

<span class="kd">struct</span> <span class="nc">FoodList</span> <span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="p">@</span><span class="n">ObjectBinding</span> <span class="kd">var</span> <span class="nv">foodDataSource</span> <span class="p">=</span> <span class="n">FoodDataSource</span><span class="p">()</span>

    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">NavigationView</span> <span class="p">{</span>
            <span class="n">List</span><span class="p">(</span><span class="n">foodDataSource</span><span class="p">.</span><span class="n">foodData</span><span class="p">.</span><span class="n">identified</span><span class="p">(</span><span class="n">by</span><span class="p">:</span> <span class="err">\</span><span class="p">.</span><span class="n">id</span><span class="p">))</span> <span class="p">{</span> <span class="n">foodModel</span> <span class="k">in</span>
                    <span class="n">FoodRow</span><span class="p">(</span><span class="n">foodModel</span><span class="p">:</span> <span class="n">foodModel</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">.</span><span class="n">navigationBarTitle</span><span class="p">(</span><span class="n">Text</span><span class="p">(</span><span class="s">&#34;Food list&#34;</span><span class="p">))</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#if</span> <span class="cp">DEBUG</span>
<span class="kd">struct</span> <span class="nc">FoodList_Previews</span> <span class="p">:</span> <span class="n">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">FoodList</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span></code></pre></div>
<h3 id="contentview-swift">ContentView.swift</h3>
<div class="highlight"><pre class="chroma"><code class="language-swift:ContentView.swift" data-lang="swift:ContentView.swift"><span class="kd">import</span> <span class="nc">SwiftUI</span>

<span class="kd">struct</span> <span class="nc">ContentView</span> <span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">FoodList</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#if</span> <span class="cp">DEBUG</span>
<span class="kd">struct</span> <span class="nc">ContentView_Previews</span> <span class="p">:</span> <span class="n">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">ContentView</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span></code></pre></div>
<h1 id="まとめ">まとめ</h1>

<h2 id="よかった点">よかった点</h2>

<ul>
<li>ちょっとした画面の作成であれば、SwiftUIはとても簡単に思えました</li>
<li>macOS 10.15 Catalina上であれば、ライブビューでレイアウトだけでなく動作がすぐ確認できるのが良いです</li>
</ul>

<h2 id="難しく感じた点">難しく感じた点</h2>

<ul>
<li>ストーリーボードを利用していた際と、ビュー階層のイメージが異なるのでまだ戸惑っています</li>
<li>また、思った通りにレイアウトができず苦労しています</li>
</ul>

<h1 id="サンプルプロジェクト">サンプルプロジェクト</h1>

<ul>
<li>今回作成したサンプルコードは、GitHubに置きました

<ul>
<li><a href="https://github.com/aokiplayer/SwiftUITableSample">aokiplayer/SwiftUITableSample</a></li>
</ul></li>
</ul>

<h1 id="参考">参考</h1>

<ul>
<li><a href="https://developer.apple.com/tutorials/swiftui">SwiftUI Tutorials | Apple Developer Documentation</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>画面遷移（セグエ）のキャンセル</title>
			<link>https://yagamo-style.com/posts/seguecancel/</link>
			<pubDate>Sun, 26 May 2019 09:35:28 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/seguecancel/</guid>
			<description>はじめに 画面遷移のタイミングで条件を判断し、場合によってはキャンセルするような動作が必要な場面があります ボタンなどからAction接続したメ</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>画面遷移のタイミングで条件を判断し、場合によってはキャンセルするような動作が必要な場面があります</li>
<li>ボタンなどからAction接続したメソッド内で<code>performSegue(withIdentifier:sender:)</code>を利用する場合や、<code>addTarget(_:action:for:)</code>でアクションを登録した場合であれば、その際に条件判断を行うこともできます

<ul>
<li>しかし、ボタンからセグエを直接引いて画面遷移する場合であれば、無条件に画面遷移してしまいます</li>
</ul></li>
<li>ここでは、後者の場合に画面遷移の判断とキャンセルの方法について紹介します</li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 10.2</li>
<li>iOS 12.2</li>
<li>Swift 5</li>
</ul>

<h1 id="利用するメソッド">利用するメソッド</h1>

<ul>
<li><code>UIViewController</code>の<code>shouldPerformSegue(withIdentifier:sender:)</code>を利用します

<ul>
<li>このメソッドをオーバーライドします</li>
<li>動きとしては、trueを返した場合は画面遷移を実行、falseの場合はキャンセルとなります</li>
</ul></li>
</ul>

<h1 id="サンプルプログラム">サンプルプログラム</h1>

<h2 id="動作">動作</h2>

<ul>
<li><p>NEXTボタンからセグエを引いてあり、スイッチがONの場合のみ画面遷移を行うプログラムです</p>

<p><img src="/images/seguecancel/segue_cancel.png" alt="segue_cancel" /></p></li>
</ul>

<h2 id="サンプルコード">サンプルコード</h2>
<div class="highlight"><pre class="chroma"><code class="language-swift:ViewController.swift" data-lang="swift:ViewController.swift"><span class="kd">import</span> <span class="nc">UIKit</span>

<span class="kd">class</span> <span class="nc">ViewController</span><span class="p">:</span> <span class="n">UIViewController</span> <span class="p">{</span>

    <span class="kr">@IBOutlet</span> <span class="kr">weak</span> <span class="kd">var</span> <span class="nv">moveSwitch</span><span class="p">:</span> <span class="n">UISwitch</span><span class="o">!</span>
    
    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">shouldPerformSegue</span><span class="p">(</span><span class="n">withIdentifier</span> <span class="n">identifier</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">sender</span><span class="p">:</span> <span class="nb">Any</span><span class="p">?)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">shouldPerformSegue</span><span class="p">(</span><span class="n">withIdentifier</span><span class="p">:</span> <span class="n">identifier</span><span class="p">,</span> <span class="n">sender</span><span class="p">:</span> <span class="n">sender</span><span class="p">)</span>

        <span class="c1">// When the switch is off, it cancels the segue.</span>
        <span class="k">return</span> <span class="n">moveSwitch</span><span class="p">.</span><span class="n">isOn</span>
    <span class="p">}</span>

    <span class="kr">@IBAction</span> <span class="kd">func</span> <span class="nf">unwindToMain</span><span class="p">(</span><span class="kc">_</span> <span class="n">unwindSegue</span><span class="p">:</span> <span class="n">UIStoryboardSegue</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<h1 id="まとめ">まとめ</h1>

<ul>
<li>これを利用することで、「特定の状況下では画面遷移させない」が実現できます</li>
<li>このサンプルでは利用していませんが、<code>shouldPerformSegue(withIdentifier:sender:)</code>の第1引数にはセグエのIdentifierが渡ってきます

<ul>
<li>この情報を利用することで、複数のセグエが引かれていた際、セグエごとに条件を個別に判断できますね</li>
</ul></li>
<li>今回作成したサンプルは、GitHubに置きました

<ul>
<li><a href="https://github.com/aokiplayer/SegueCancelSample">aokiplayer/SegueCancelSample</a></li>
</ul></li>
</ul>

<h1 id="参考">参考</h1>

<ul>
<li><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621502-shouldperformsegue">shouldPerformSegue(withIdentifier:sender:) - UIViewController | Apple Developer Documentation</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>iOSにおけるPush通知の基本2（受信した通知の内容取得）</title>
			<link>https://yagamo-style.com/posts/remotenotification02/</link>
			<pubDate>Fri, 24 May 2019 10:52:57 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/remotenotification02/</guid>
			<description>はじめに 前の記事 [iOSにおけるPush通知の基本1（通知の受信まで）] では、以下のところまで紹介しました Push通知に必要な事前設定 Pus</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>前の記事 <a href="https://yagamo-style.com/posts/remotenotification01/">[iOSにおけるPush通知の基本1（通知の受信まで）]</a> では、以下のところまで紹介しました

<ul>
<li>Push通知に必要な事前設定</li>
<li>Push通知のユーザへの利用許可依頼</li>
<li>Push通知の送信テスト</li>
</ul></li>
<li>これだけでも、受け取った通知をタップしてアプリを起動することができます</li>
<li>今回は、通知に含まれる内容（ペイロード）を取得する方法を説明します</li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 10.2</li>
<li>iOS 12.2</li>
<li>Swift 5</li>
<li>iPod touch 6th generation</li>
</ul>

<h1 id="通知に対するコールバックメソッド">通知に対するコールバックメソッド</h1>

<ul>
<li>通知を受け取ると、<code>UIApplicationDelegate</code>の以下のコールバックメソッドが呼ばれます</li>

<li><p>呼ばれるコールバックメソッドとそのタイミングは、アプリの実行状態により決定されます</p>

<table>
<thead>
<tr>
<th align="left">事前状態</th>
<th align="left">タイミング</th>
<th align="left">メソッド</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">未起動</td>
<td align="left">通知のタップにより起動</td>
<td align="left"><code>application(_:didFinishLaunchingWithOptions:)</code></td>
</tr>

<tr>
<td align="left">Foreground</td>
<td align="left">通知を受信</td>
<td align="left"><code>application(_:didReceiveRemoteNotification:fetchCompletionHandler:)</code></td>
</tr>

<tr>
<td align="left">Background</td>
<td align="left">通知のタップによりForeground</td>
<td align="left"><code>application(_:didReceiveRemoteNotification:fetchCompletionHandler:)</code></td>
</tr>
</tbody>
</table></li>

<li><p>これらのコールバック内で、通知のペイロード（通知に含まれるデータ）を取得して処理を行います</p></li>
</ul>

<h1 id="push通知のペイロード">Push通知のペイロード</h1>

<ul>
<li><p>Push通知のペイロードは、以下のような形式のJSONです</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;aps&#34;</span> <span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;alert&#34;</span> <span class="p">:</span> <span class="p">{</span>
            <span class="nt">&#34;title&#34;</span> <span class="p">:</span> <span class="s2">&#34;New Message&#34;</span><span class="p">,</span>
            <span class="nt">&#34;subtitle&#34;</span> <span class="p">:</span> <span class="s2">&#34;You got a new message.&#34;</span><span class="p">,</span>
            <span class="nt">&#34;body&#34;</span> <span class="p">:</span> <span class="s2">&#34;New message has arrived. Open your inbox.&#34;</span>
        <span class="p">},</span>
        <span class="nt">&#34;badge&#34;</span> <span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
        <span class="nt">&#34;sound&#34;</span> <span class="p">:</span> <span class="s2">&#34;default&#34;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<h1 id="ペイロードの取得">ペイロードの取得</h1>

<ul>
<li>受信したPush通知から、ペイロードを取り出す処理を実装します</li>
</ul>

<h2 id="そもそもどこから取り出すのか">そもそもどこから取り出すのか？</h2>

<ul>
<li>ペイロードは、<code>UIApplicationDelegate</code>のコールバックの引数に格納された状態で渡されます</li>
</ul>

<table>
<thead>
<tr>
<th align="left">コールバックメソッド</th>
<th align="left">格納場所</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left"><code>application(_:didFinishLaunchingWithOptions:)</code></td>
<td align="left">第2引数<code>launchOptions</code>ディクショナリ内</td>
</tr>

<tr>
<td align="left"><code>application(_:didReceiveRemoteNotification:fetchCompletionHandler:)</code></td>
<td align="left">第2引数の<code>userInfo</code>ディクショナリ内</td>
</tr>
</tbody>
</table>

<h2 id="送信するpush通知の内容">送信するPush通知の内容</h2>

<ul>
<li>今回は、以下の内容のPush通知を送ってみます</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-json:通知のペイロード" data-lang="json:通知のペイロード">{
  &#34;aps&#34;: {
    &#34;alert&#34;: &#34;Wake up!&#34;,
    &#34;sound&#34;: &#34;default&#34;
  }
}</code></pre></div></li>
</ul>

<h2 id="実装例">実装例</h2>

<h3 id="アプリ未起動の場合">アプリ未起動の場合</h3>

<ul>
<li>アプリが起動していない場合は通知をタップした時点でアプリが起動するので、ライフサイクルメソッドである<code>application(_:didFinishLaunchingWithOptions:)</code>が呼ばれます</li>
<li>このサンプルコードでは、ペイロードの内容を文字列として整形してビューコントローラのプロパティに渡しています

<ul>
<li>起動済みの場合と区別するために、背景色を黄色に設定しています</li>
</ul></li>
</ul>

<h4 id="ペイロードの取得手順">ペイロードの取得手順</h4>

<ol>
<li>第2引数の<code>launchOptions</code>ディクショナリからキー<code>UIApplication.LaunchOptionsKey.remoteNotification</code>を指定

<ul>
<li>Push通知のペイロードを格納したディクショナリが得られる</li>
</ul></li>
<li>Push通知のペイロードを格納したディクショナリから、キー&rdquo;aps&rdquo;でペイロードの内容部分のディクショナリを取得</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                 <span class="n">didFinishLaunchingWithOptions</span> <span class="n">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="n">UIApplication</span><span class="p">.</span><span class="n">LaunchOptionsKey</span><span class="p">:</span> <span class="nb">Any</span><span class="p">]?)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>

    <span class="err">〜省略〜</span>

    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 01. get notification payload</span>
    <span class="k">if</span> <span class="kd">let</span> <span class="nv">notificationOptions</span> <span class="p">=</span> <span class="n">launchOptions</span><span class="p">?[.</span><span class="n">remoteNotification</span><span class="p">]</span> <span class="k">as</span><span class="p">?</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span> <span class="nb">AnyObject</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">apsPart</span> <span class="p">=</span> <span class="n">notificationOptions</span><span class="p">[</span><span class="s">&#34;aps&#34;</span><span class="p">]</span> <span class="k">as</span><span class="p">?</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span> <span class="nb">AnyObject</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">}</span>

        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">vc</span> <span class="p">=</span> <span class="n">window</span><span class="p">?.</span><span class="n">rootViewController</span> <span class="k">as</span><span class="p">?</span> <span class="n">ViewController</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">}</span>
        <span class="kd">let</span> <span class="nv">text</span> <span class="p">=</span> <span class="n">apsPart</span><span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="s">&#34;</span><span class="si">\(</span><span class="n">key</span><span class="si">)</span><span class="s">: </span><span class="si">\(</span><span class="n">value</span><span class="si">)</span><span class="s">&#34;</span> <span class="p">}.</span><span class="n">joined</span><span class="p">(</span><span class="n">separator</span><span class="p">:</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">)</span>
        <span class="n">vc</span><span class="p">.</span><span class="n">payloadText</span> <span class="p">=</span> <span class="n">text</span>
        <span class="n">vc</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="p">=</span> <span class="p">.</span><span class="n">yellow</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="kc">true</span>
<span class="p">}</span></code></pre></div>
<h4 id="実行結果">実行結果</h4>

<p><img src="/images/remotenotification02/launching.png" alt="launching" /></p>

<h3 id="アプリが起動中の場合">アプリが起動中の場合</h3>

<ul>
<li>アプリが起動中の場合は、以下のタイミングで<code>UIApplicationDelegate</code>プロトコルの<code>application(_:didReceiveRemoteNotification:fetchCompletionHandler:)</code>が呼ばれます

<ul>
<li>アプリがForegroundの場合: 通知を受け取ったタイミング</li>
<li>アプリがBackgroundの場合: 受け取った通知をタップしてForegroundになったタイミング</li>
</ul></li>
<li>このサンプルコードでは、ペイロードの内容を文字列として整形してビューコントローラのプロパティに渡しています

<ul>
<li>未起動の場合と区別するために、背景色を緑に設定しています</li>
</ul></li>
</ul>

<h4 id="ペイロードの取得手順-1">ペイロードの取得手順</h4>

<ol>
<li>第2引数の<code>userInfo</code>ディクショナリからキー&rdquo;aps&rdquo;でペイロードの内容部分のディクショナリを取得</li>
<li>取得したディクショナリの扱いは、未起動の場合と同様</li>
</ol>

<ul>
<li><p>このコールバックを実装した場合、Backgorund ModesをONにすることを求められるので有効にしておきます</p>

<ul>
<li>エラーにはなりませんが、コンソールにメッセージが表示されます</li>
</ul>

<p><img src="/images/remotenotification02/background_modes.png" alt="background_modes" /></p></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                 <span class="n">didReceiveRemoteNotification</span> <span class="n">userInfo</span><span class="p">:</span> <span class="p">[</span><span class="n">AnyHashable</span> <span class="p">:</span> <span class="nb">Any</span><span class="p">],</span>
                 <span class="n">fetchCompletionHandler</span> <span class="n">completionHandler</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">UIBackgroundFetchResult</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Void</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 04. get notification payload</span>
    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">apsPart</span> <span class="p">=</span> <span class="n">userInfo</span><span class="p">[</span><span class="s">&#34;aps&#34;</span><span class="p">]</span> <span class="k">as</span><span class="p">?</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span> <span class="nb">AnyObject</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">completionHandler</span><span class="p">(.</span><span class="n">failed</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="p">}</span>

    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">vc</span> <span class="p">=</span> <span class="n">window</span><span class="p">?.</span><span class="n">rootViewController</span> <span class="k">as</span><span class="p">?</span> <span class="n">ViewController</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    <span class="kd">let</span> <span class="nv">text</span> <span class="p">=</span> <span class="n">apsPart</span><span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="s">&#34;</span><span class="si">\(</span><span class="n">key</span><span class="si">)</span><span class="s">: </span><span class="si">\(</span><span class="n">value</span><span class="si">)</span><span class="s">&#34;</span> <span class="p">}.</span><span class="n">joined</span><span class="p">(</span><span class="n">separator</span><span class="p">:</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">)</span>
    <span class="n">vc</span><span class="p">.</span><span class="n">payloadText</span> <span class="p">=</span> <span class="n">text</span>
    <span class="n">vc</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="p">=</span> <span class="p">.</span><span class="n">green</span>

<span class="p">}</span></code></pre></div>
<h4 id="実行結果-1">実行結果</h4>

<p><img src="/images/remotenotification02/active.png" alt="active" /></p>

<h1 id="まとめ">まとめ</h1>

<ul>
<li>アプリの実行状態によって、呼ばれるコールバックが異なる点に注意</li>
<li>ペイロードはディクショナリから取り出す

<ul>
<li>受け取った時点で、すでにJSONからディクショナリに変換されている</li>
</ul></li>
<li>今回作成したサンプルコードは、GitHubに置きました

<ul>
<li><a href="https://github.com/aokiplayer/TreatPushNotificationPayloadSample">aokiplayer/TreatPushNotificationPayloadSample</a></li>
</ul></li>
</ul>

<h1 id="参考">参考</h1>

<ul>
<li><a href="https://developer.apple.com/documentation/usernotifications">UserNotifications | Apple Developer Documentation</a></li>
<li><a href="https://www.raywenderlich.com/8164-push-notifications-tutorial-getting-started">Push Notifications Tutorial: Getting Started | raywenderlich.com</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>UIViewControllerのライフサイクルメソッド</title>
			<link>https://yagamo-style.com/posts/viewcontrollerlifecycle/</link>
			<pubDate>Tue, 21 May 2019 12:19:51 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/viewcontrollerlifecycle/</guid>
			<description>はじめに iOSアプリを作成していて、どのタイミングでどのメソッドが呼ばれるんだっけ？となることは多いです 特に、画面遷移の際に困ることがありま</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>iOSアプリを作成していて、どのタイミングでどのメソッドが呼ばれるんだっけ？となることは多いです</li>
<li>特に、画面遷移の際に困ることがあります</li>
<li>なので、非常に単純なサンプルを作成しておきました

<ul>
<li>各メソッド内で、コンソール出力をしているのみです</li>
</ul></li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 10.2</li>
<li>iOS 12.2</li>
<li>Swift 5</li>
</ul>

<h1 id="サンプルプロジェクト">サンプルプロジェクト</h1>

<ul>
<li><a href="https://github.com/aokiplayer/ViewControllerLifeCycleSample">aokiplayer/ViewControllerLifeCycleSample</a></li>
</ul>

<h1 id="サンプルの画面構成">サンプルの画面構成</h1>

<ul>
<li>画面はストーリーボードで作成しています</li>

<li><p>A, Bの2画面があり、以下のように遷移します（Aが初期画面）</p>

<ul>
<li>A -&gt; Bは、単純にPresent Modallyなセグエで遷移</li>
<li>B -&gt; Aは、unwindセグエで遷移</li>
</ul>

<p><img src="/images/viewcontrollerlifecycle/vc_lifecycle_segue.png" alt="segue_image" /></p></li>
</ul>

<h1 id="コンソール出力例">コンソール出力例</h1>

<h2 id="アプリ起動-aを表示">アプリ起動（Aを表示）</h2>

<ul>
<li>レイアウト系が2度呼ばれています

<ul>
<li>レイアウトは、様々なタイミングで呼ばれるのでこのように複数回呼ばれる可能性があるためです

<ul>
<li>boundsが変更されたり、サブビューが追加されたりしても呼ばれます</li>
</ul></li>
<li>Auto Layoutの制約を明示的に設定せず、Autoresizing maskをAuto Layoutに変換した場合などは1度しか呼ばれなかったりします</li>
</ul></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">A: init(coder:)
A: loadView()
A: viewDidLoad()
A: viewWillAppear(_:)
A: viewWillLayoutSubviews()
A: viewDidLayoutSubviews()
A: viewWillLayoutSubviews()
A: viewDidLayoutSubviews()
A: viewDidAppear(_:)</code></pre></div>
<h2 id="画面を回転-a画面表示中">画面を回転（A画面表示中）</h2>

<ul>
<li>レイアウトを組み直す必要が発生するので、こんな感じですね</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">A: viewWillTransition(to:with:)
A: viewWillLayoutSubviews()
A: viewDidLayoutSubviews()</code></pre></div>
<h2 id="homeボタンを押す-a画面表示中">HOMEボタンを押す（A画面表示中）</h2>

<ul>
<li>画面は表示されなくなりますが、実際にはいずれのコールバックも呼ばれていません

<ul>
<li>このあたりの挙動は、Androidとは異なりますね（Androidではこのタイミングでもコールバック呼ばれる）</li>
</ul></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console"></code></pre></div>
<h2 id="home画面でアイコンをタップ-上記の操作後">HOME画面でアイコンをタップ（上記の操作後）</h2>

<ul>
<li>非表示状態からの復帰ですが、いずれのコールバックも呼ばれていません

<ul>
<li>これも、Androidの場合はコールバックが呼ばれますね</li>
</ul></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console"></code></pre></div>
<h2 id="bへ遷移-present-modallyセグエ">Bへ遷移（Present Modallyセグエ）</h2>

<ul>
<li>ポイントはAの<code>prepare(for:sender:)</code>のタイミングです

<ul>
<li>ここで必要なデータの受け渡しを行いますが、Bの<code>viewDidLoad()</code>よりも前です</li>
<li>そのため、この時点ではBの持っているビューはnilであり、データを渡そうとすると実行時エラーとなります</li>
</ul></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">    B: init(coder:)
A: prepare(for:sender:)
    B: loadView()
    B: viewDidLoad()
A: viewWillDisappear(_:)
    B: viewWillAppear(_:)
    B: viewWillLayoutSubviews()
    B: viewDidLayoutSubviews()
A: viewWillLayoutSubviews()
A: viewDidLayoutSubviews()
    B: viewWillLayoutSubviews()
    B: viewDidLayoutSubviews()
    B: viewDidAppear(_:)
A: viewDidDisappear(_:)</code></pre></div>
<h2 id="aへ戻る-unwindセグエ">Aへ戻る（unwindセグエ）</h2>

<ul>
<li>unwindセグエで戻る際も、<code>prepare(for:sender:)</code>は呼ばれています</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">    B: prepare(for:sender:)
A: unwindToFirst(_:)
    B: viewWillDisappear(_:)
A: viewWillAppear(_:)
A: viewWillLayoutSubviews()
A: viewDidLayoutSubviews()
A: viewDidAppear(_:)
    B: viewDidDisappear(_:)
    B: deinit
A: viewWillLayoutSubviews()
A: viewDidLayoutSubviews()</code></pre></div>
<h1 id="まとめ">まとめ</h1>

<ul>
<li>初心者の陥りやすい点としては、<code>prepare(for:sender:)</code>内でのデータの受け渡しです</li>
<li>「遷移先画面のビューはまだnil」という点は、しっかり認識しておきましょう</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>iOSにおけるPush通知の基本1（通知の受信まで）</title>
			<link>https://yagamo-style.com/posts/remotenotification01/</link>
			<pubDate>Thu, 18 Apr 2019 09:30:15 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/remotenotification01/</guid>
			<description>はじめに Push通知は、使い方によっては非常に効果的です 通知しすぎると、邪魔になってしまいますが ここでは、Push通知の基本的な実装方法を説</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>Push通知は、使い方によっては非常に効果的です

<ul>
<li>通知しすぎると、邪魔になってしまいますが</li>
</ul></li>
<li>ここでは、Push通知の基本的な実装方法を説明します</li>
<li>Push通知の実装には、UserNotificationsフレームワークを利用します

<ul>
<li>ローカル通知にも、同じフレームワークを利用します</li>
<li>昔と違って、ひとつのフレームワークで両方に対応できていいですね</li>
</ul></li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 10.2</li>
<li>iOS 12.2</li>
<li>Swift 5</li>
<li>iPod touch 6th generation</li>
</ul>

<h1 id="必要なもの">必要なもの</h1>

<ul>
<li>Apple Developer Programのアカウント

<ul>
<li><a href="https://developer.apple.com/account/">Apple Developer</a>サイト上で、以下の確認・作成が必要なため

<ul>
<li>Team ID</li>
<li>Authentication Key</li>
</ul></li>
</ul></li>
<li>APNs（Apple Push Notification Service）に対応した、Push通知を送信するサーバ

<ul>
<li><a href="https://firebase.google.com/">Firebase</a>とか<a href="https://azure.microsoft.com/">Microsoft Azure</a>とか、いろいろなサービスが対応してます</li>
<li>テストするだけなら、APNsに対応したいろいろなツールがあります

<ul>
<li><a href="https://github.com/Dwarven/PushMeBaby">Dwarven/PushMeBaby</a></li>
<li><a href="https://github.com/onmyway133/PushNotifications">onmyway133/PushNotifications</a></li>
</ul></li>
<li>APNsは、その名のとおりAppleのPush通知サービスです

<ul>
<li>Push通知の送信は、必ずこのサービスを経由します</li>
</ul></li>
</ul></li>

<li><p>iPhoneやiPadなどの実デバイス</p>

<ul>
<li>シミュレータではPush通知が利用できないため</li>

<li><p>シミュレータでPush通知の登録をしようとすると、コンソールに以下のようなメッセージが出力されます</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">Failed to register: Error Domain=NSCocoaErrorDomain Code=3010 &#34;remote notifications are not supported in the simulator&#34; 
UserInfo={NSLocalizedDescription=remote notifications are not supported in the simulator}</code></pre></div></li>
</ul></li>
</ul>

<h1 id="事前準備-apple-developerサイト上">事前準備（Apple Developerサイト上）</h1>

<h2 id="team-idの確認">Team IDの確認</h2>

<ol>
<li><a href="https://developer.apple.com/account/">Apple Developer</a>サイトにログイン</li>

<li><p>左側のMembershipを選択して、Membership Detailsに表示されたTeam IDをメモしておく</p>

<p><img src="/images/remotenotification01/team_id.png" alt="team_id" /></p></li>
</ol>

<h2 id="authentication-keyの作成とダウンロード">Authentication Keyの作成とダウンロード</h2>

<ol>
<li><a href="https://developer.apple.com/account/">Apple Developer</a>サイトにログイン</li>
<li>左側のCertificates, IDs &amp; Profilesを選択</li>

<li><p>表示された画面で左側のKeysからAllを選択、右上の+をクリックしてキーを作成</p>

<ul>
<li>Nameには、キーに設定する任意の名前を入力</li>
<li>Apple Push Notification service (APNs)にチェック</li>
</ul>

<p><img src="/images/remotenotification01/create_key.png" alt="create_key" /></p></li>

<li><p>作成したら、Downloadをクリックしてキーをダウンロード</p>

<ul>
<li><strong>キーは一度しかダウンロードできません。セキュアな場所に確実に保存してください</strong></li>
<li>このキーは、Push通知を行うサーバに設定する</li>
<li>キーは、<code>AuthKey_XXXXXXXXXX.p8</code>という名前でダウンロードされる</li>
<li><code>XXXXXXXXXX</code>の部分がKey ID</li>
<li>Key IDもメモしておく</li>
</ul>

<p><img src="/images/remotenotification01/download_key.png" alt="download_key" /></p></li>
</ol>

<h1 id="主なコンポーネント">主なコンポーネント</h1>

<table>
<thead>
<tr>
<th align="left">コンポーネント</th>
<th align="left">説明</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">UNUserNotificationCenter</td>
<td align="left">通知関連の機能を管理する</td>
</tr>

<tr>
<td align="left">UNNotificationRequest</td>
<td align="left">通知の内容や、配送のトリガーを内包する</td>
</tr>

<tr>
<td align="left">UNNotificationAction</td>
<td align="left">通知内で表示されるボタン</td>
</tr>

<tr>
<td align="left">UNNotificationCategory</td>
<td align="left">通知の方法や表示されるアクションの設定をまとめたもの</td>
</tr>

<tr>
<td align="left">UNNotificationSettings</td>
<td align="left">通知の設定情報を保持</td>
</tr>

<tr>
<td align="left">UNMutableNotificationContent</td>
<td align="left">通知する内容</td>
</tr>

<tr>
<td align="left">UNPushNotificationTrigger</td>
<td align="left">APNsから送信された通知に関するトリガー</td>
</tr>
</tbody>
</table>

<h1 id="実装手順">実装手順</h1>

<h2 id="プロジェクトの設定">プロジェクトの設定</h2>

<ol>
<li><p>アプリケーションTARGETのSigningから、Teamを選択</p>

<ul>
<li>Apple Developer Programに登録済みのアカウントに紐付いている必要性あり</li>
<li>無料アカウントのTeamでは、Push Notificationが利用できない</li>
</ul>

<p><img src="/images/remotenotification01/signing_team.png" alt="signing_team" /></p></li>

<li><p>アプリケーションTARGETのCapabilitiesから、Push NotificationsをONにする</p>

<p><img src="/images/remotenotification01/capabilities.png" alt="capabilities" /></p></li>
</ol>

<h2 id="プッシュ通知の登録">プッシュ通知の登録</h2>

<ul>
<li>ここから先は、すべてAppDelegate.swift内に記述します

<ul>
<li>アプリの起動時に処理するのと、<code>UIApplicationDelegate</code>のコールバックが必要になるためです</li>
</ul></li>
</ul>

<ol>
<li><p>UserNotificationsフレームワークを利用するので、インポート</p>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="kd">import</span> <span class="nc">UserNotifications</span>    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 01. import</span></code></pre></div>
<ol>
<li>ユーザに対して、通知の許可依頼を行う</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                 <span class="n">didFinishLaunchingWithOptions</span> <span class="n">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="n">UIApplication</span><span class="p">.</span><span class="n">LaunchOptionsKey</span><span class="p">:</span> <span class="nb">Any</span><span class="p">]?)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>

    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 02. request to user</span>
    <span class="n">UNUserNotificationCenter</span><span class="p">.</span><span class="n">current</span><span class="p">().</span><span class="n">requestAuthorization</span><span class="p">(</span><span class="n">options</span><span class="p">:</span> <span class="p">[.</span><span class="n">alert</span><span class="p">,</span> <span class="p">.</span><span class="n">sound</span><span class="p">,</span> <span class="p">.</span><span class="n">badge</span><span class="p">])</span> <span class="p">{</span> <span class="n">granted</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
        <span class="k">guard</span> <span class="n">granted</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>

        <span class="c1">// 〜省略〜</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">true</span>
<span class="p">}</span></code></pre></div></li>

<li><p>ユーザが通知を許可していた場合は、APNsへ登録</p>

<ul>
<li><strong>「どのデバイスにインストールされたどのアプリか」</strong>を登録する</li>
<li>これにより、APNsは対象を特定して通知を発行できるようになる</li>

<li><p>この結果として、一意に識別するトークンが返される</p>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 02. request to user</span>
<span class="n">UNUserNotificationCenter</span><span class="p">.</span><span class="n">current</span><span class="p">().</span><span class="n">requestAuthorization</span><span class="p">(</span><span class="n">options</span><span class="p">:</span> <span class="p">[.</span><span class="n">alert</span><span class="p">,</span> <span class="p">.</span><span class="n">sound</span><span class="p">,</span> <span class="p">.</span><span class="n">badge</span><span class="p">])</span> <span class="p">{</span> <span class="n">granted</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
    <span class="k">guard</span> <span class="n">granted</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>

    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 03. register to APNs</span>
    <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span>
        <span class="n">UIApplication</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">registerForRemoteNotifications</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div></li>
</ul></li>

<li><p>APNsへの登録後に呼び出されるコールバックを実装（<code>UIApplicationDelegate</code>のメソッド）</p>

<ul>
<li>成功時: <code>application(_:didRegisterForRemoteNotificationsWithDeviceToken:)</code>

<ul>
<li>先述したトークンは第2引数に渡される</li>
<li>このトークンを、Push通知を送信するサービスに登録する必要がある

<ul>
<li>今回はテストとしてmacOS上のプログラムからPush通知を送信するので、トークンをログ出力しておく</li>
<li>外部のサービスへトークンを登録する方法は、各サービスのドキュメントを参照してください</li>
</ul></li>
</ul></li>
<li>失敗時: <code>application(_:didFailToRegisterForRemoteNotificationsWithError:)</code></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> - Callback for Remote Notification</span>
<span class="kd">extension</span> <span class="nc">AppDelegate</span> <span class="p">{</span>
    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 04-1. succeeded to register to APNs</span>
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                     <span class="n">didRegisterForRemoteNotificationsWithDeviceToken</span> <span class="n">deviceToken</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Data -&gt; Token string</span>
        <span class="kd">let</span> <span class="nv">tokenBytes</span> <span class="p">=</span> <span class="n">deviceToken</span><span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">byte</span><span class="p">:</span> <span class="nb">UInt8</span><span class="p">)</span> <span class="k">in</span> <span class="nb">String</span><span class="p">(</span><span class="n">format</span><span class="p">:</span> <span class="s">&#34;%02.2hhx&#34;</span><span class="p">,</span> <span class="n">byte</span><span class="p">)</span> <span class="p">}</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;Device token: </span><span class="si">\(</span><span class="n">tokenBytes</span><span class="p">.</span><span class="n">joined</span><span class="si">())</span><span class="s">&#34;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> failed to register to APNs</span>
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                     <span class="n">didFailToRegisterForRemoteNotificationsWithError</span> <span class="n">error</span><span class="p">:</span> <span class="n">Error</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;Failed to register to APNs: </span><span class="si">\(</span><span class="n">error</span><span class="si">)</span><span class="s">&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<ol>
<li>アプリを一度実行して通知の受信を許可し、前の手順でログ出力したトークンをメモしておきます</li>
<li>もちろん、実運用上はこの手順は不要です</li>
<li>実際には、<code>application(_:didRegisterForRemoteNotificationsWithDeviceToken:)</code>内で外部サービスにトークンを登録する処理が必要になります</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-console:コンソール出力例" data-lang="console:コンソール出力例">Device token: b92bf1a8af26237ad8dfad91312ece9563c8493e2bc2bf01e3bd9fb690d20d37</code></pre></div></li>
</ol>

<h1 id="ここまでの実装-appdelegate-swift">ここまでの実装（AppDelegate.swift）</h1>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="kd">import</span> <span class="nc">UIKit</span>
<span class="kd">import</span> <span class="nc">UserNotifications</span>    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 01. import</span>

<span class="kr">@UIApplicationMain</span>
<span class="kd">class</span> <span class="nc">AppDelegate</span><span class="p">:</span> <span class="n">UIResponder</span><span class="p">,</span> <span class="n">UIApplicationDelegate</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nv">window</span><span class="p">:</span> <span class="n">UIWindow</span><span class="p">?</span>

    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                     <span class="n">didFinishLaunchingWithOptions</span> <span class="n">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="n">UIApplication</span><span class="p">.</span><span class="n">LaunchOptionsKey</span><span class="p">:</span> <span class="nb">Any</span><span class="p">]?)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>

        <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 02. request to user</span>
        <span class="n">UNUserNotificationCenter</span><span class="p">.</span><span class="n">current</span><span class="p">().</span><span class="n">requestAuthorization</span><span class="p">(</span><span class="n">options</span><span class="p">:</span> <span class="p">[.</span><span class="n">alert</span><span class="p">,</span> <span class="p">.</span><span class="n">sound</span><span class="p">,</span> <span class="p">.</span><span class="n">badge</span><span class="p">])</span> <span class="p">{</span> <span class="n">granted</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
            <span class="k">guard</span> <span class="n">granted</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>

            <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 03. register to APNs</span>
            <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span>
                <span class="n">UIApplication</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">registerForRemoteNotifications</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> - Callback for Remote Notification</span>
<span class="kd">extension</span> <span class="nc">AppDelegate</span> <span class="p">{</span>
    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 04-1. succeeded to register to APNs</span>
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                     <span class="n">didRegisterForRemoteNotificationsWithDeviceToken</span> <span class="n">deviceToken</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Data -&gt; Token string</span>
        <span class="kd">let</span> <span class="nv">tokenBytes</span> <span class="p">=</span> <span class="n">deviceToken</span><span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">byte</span><span class="p">:</span> <span class="nb">UInt8</span><span class="p">)</span> <span class="k">in</span> <span class="nb">String</span><span class="p">(</span><span class="n">format</span><span class="p">:</span> <span class="s">&#34;%02.2hhx&#34;</span><span class="p">,</span> <span class="n">byte</span><span class="p">)</span> <span class="p">}</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;Device token: </span><span class="si">\(</span><span class="n">tokenBytes</span><span class="p">.</span><span class="n">joined</span><span class="si">())</span><span class="s">&#34;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> failed to register to APNs</span>
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                     <span class="n">didFailToRegisterForRemoteNotificationsWithError</span> <span class="n">error</span><span class="p">:</span> <span class="n">Error</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;Failed to register to APNs: </span><span class="si">\(</span><span class="n">error</span><span class="si">)</span><span class="s">&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<h1 id="push通知の受信テスト">Push通知の受信テスト</h1>

<ul>
<li>Push通知が受信できることをテストしてみます</li>
<li>今回は<a href="https://github.com/onmyway133/PushNotifications">onmyway133/PushNotifications</a>を利用するので、インストールしておいてください</li>
</ul>

<ol>
<li><p>Push通知の送信準備（PushNotificationsアプリ）</p>

<p><img src="/images/remotenotification01/push_tool.png" alt="push_tool" /></p></li>

<li><p>iOSを選択</p>

<ul>
<li><p>Authentication -&gt; TOKEN</p>

<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">設定値</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">SELECT P8</td>
<td align="left">ダウンロードしておいたAuthentication Keyを選択</td>
</tr>

<tr>
<td align="left">Enter key id</td>
<td align="left">メモしておいたKey IDを入力</td>
</tr>

<tr>
<td align="left">Enter team id</td>
<td align="left">メモしておいたTeam IDを入力</td>
</tr>
</tbody>
</table></li>

<li><p>Body</p>

<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">設定値</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">Enter bundle id</td>
<td align="left">アプリのBundle Identifierを入力</td>
</tr>

<tr>
<td align="left">Enter device token</td>
<td align="left">メモしておいたトークンを入力</td>
</tr>

<tr>
<td align="left">Enter message</td>
<td align="left">Push通知のメッセージとなるJSONを入力</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre class="chroma"><code class="language-json:JSON" data-lang="json:JSON">{
    &#34;aps&#34;: {
        &#34;alert&#34;: &#34;Minimal message&#34;,
        &#34;sound&#34;: &#34;default&#34;
    }
}</code></pre></div>
<ul>
<li>Environment</li>
<li>Sandboxにチェック</li>
</ul></li>
</ul></li>

<li><p>Push通知の送信</p>

<ul>
<li>Sendボタンをクリックすると、Push通知が送信されます</li>
</ul></li>

<li><p>Push通知の受信確認</p>

<ul>
<li>通知は、アプリが表示されていない状態（以下の状態）で受信した場合に表示されます

<ul>
<li>アプリが起動していて、Backgroud状態</li>
<li>アプリが起動していない</li>
</ul></li>
</ul>

<p><img src="/images/remotenotification01/push_receive.png" alt="push_receive" /></p></li>
</ol>

<h1 id="まとめ">まとめ</h1>

<ul>
<li>単純にPush通知を受信して、アプリを開くだけならこれだけの実装で済みます</li>
<li>また、以下のような実装も可能です

<ul>
<li>通知にボタン（アクション）を追加して、タップした際に処理を実行する</li>
<li>アプリが起動していない状態でも、アプリを起こしてタスクをバックグラウンドで実行させる</li>
</ul></li>
<li>通知にはUserNotificationsフレームワークを利用するので、以下の点を除いてローカル通知もほぼ同様の実装で受信できます

<ul>
<li>APNsへの登録がない（デバイスの中で完結するため）</li>
<li>通知を送信する処理の実装が必要</li>
</ul></li>
<li>今回作成したサンプルコードは、GitHubに置きました

<ul>
<li><a href="https://github.com/aokiplayer/MinimalRemoteNotificationSample">aokiplayer/MinimalRemoteNotificationSample</a></li>
</ul></li>
</ul>

<h1 id="参考">参考</h1>

<ul>
<li><a href="https://developer.apple.com/documentation/usernotifications">UserNotifications | Apple Developer Documentation</a></li>
<li><a href="https://www.raywenderlich.com/8164-push-notifications-tutorial-getting-started">Push Notifications Tutorial: Getting Started | raywenderlich.com</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>try! Swift Tokyo 2019 感想など</title>
			<link>https://yagamo-style.com/posts/tryswifttokyo2019/</link>
			<pubDate>Wed, 17 Apr 2019 19:16:50 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/tryswifttokyo2019/</guid>
			<description>try! Swift Tokyo 2019 に参加してきました。 今年も会社のブースにいたのでセッション自体はあまり聞くことができませんでしたが、得るものはたくさんありました。 だ</description>
			<content type="html"><![CDATA[

<p>try! Swift Tokyo 2019 に参加してきました。
今年も会社のブースにいたのでセッション自体はあまり聞くことができませんでしたが、得るものはたくさんありました。</p>

<p>だいぶ時間が経ってしまったけど、感想を少し書いてみます。</p>

<h1 id="公式サイト-ハッシュタグなど">公式サイト、ハッシュタグなど</h1>

<ul>
<li><a href="https://www.tryswift.co/events/2019/tokyo/jp/">https://www.tryswift.co/events/2019/tokyo/jp/</a></li>
<li><a href="https://twitter.com/tryswiftconf">@tryswiftconf</a></li>
<li><a href="https://twitter.com/hashtag/tryswiftconf?src=hash">#tryswiftconf</a></li>
</ul>

<h1 id="ここが良かった">ここが良かった</h1>

<h2 id="スポンサーとして">スポンサーとして</h2>

<h3 id="知名度が少し上がってきた">知名度が少し上がってきた</h3>

<ul>
<li>Java 系ではそれなりに知名度がある弊社ですが、モバイル系のカンファレンスに継続して参加することでこちらでも知名度が少しずつ上がってきました。</li>
<li>いろいろな方から、声を掛けて頂けました。</li>
</ul>

<h3 id="商品をお見せするのが大事">商品をお見せするのが大事</h3>

<ul>
<li>今回はマーケティングチームのアイディアで、主に私の執筆したトレーニングテキストのサンプルを展示しました。</li>
<li>実際に手に取ってご覧頂くことで、以下の効果が得られました。

<ul>
<li>弊社の業務やトレーニング内容をイメージ頂けた -&gt; 参加者の皆様との会話のきっかけとなった</li>
<li>たくさんのご意見を頂けた

<ul>
<li>「市販書籍よりもわかりやすい」「ここに書いてるのよりも、こっちのライブラリを使ったほうがいい」</li>
<li>「テキストを売って欲しい」「現場に出る前の教育に使いたい」</li>
</ul></li>
</ul></li>
</ul>

<h2 id="エンジニアとして">エンジニアとして</h2>

<h3 id="世界的なエンジニアに直接聞ける">世界的なエンジニアに直接聞ける</h3>

<ul>
<li>私は IBM Kitura を使い始めているのですが、せっかく Kitura の開発チームが来日されていたので、うまくいかない点を思い切って質問してみました。

<ul>
<li>その上で、Kituraのドキュメント自体に誤りがあることなどを発見できました。 &lt;- 貢献できた！</li>
</ul></li>
<li>セッション自体はあとで動画がアップロードされますが、質問はその場でしかできないので、貴重な経験でした。</li>
<li>英語は、できなくてもこわくないです（もちろん、できた方がいいけど）。

<ul>
<li>言いたいことがはっきりしていれば、文法を多少誤っていたり単語が出てこなかったりしても伝わります。</li>
<li>カンファレンス前日の <a href="https://tryswifttokyo.connpass.com/event/118413/">Global Communication Workshop for try! Swift</a> で、背中を押してもらえた気がします。</li>
</ul></li>
</ul>

<h1 id="今後に向けて">今後に向けて</h1>

<ul>
<li>個人・企業ともスポンサーは続けていきたいです。</li>
<li>参加して良かった！で終わらせない。今は IBM Kitura ブースで頂いた本（抽選に当たりました）も使いながら Kitura を学習してます。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>iOSDC 2018 感想など</title>
			<link>https://yagamo-style.com/posts/iosdc2018/</link>
			<pubDate>Sat, 15 Sep 2018 21:32:57 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/iosdc2018/</guid>
			<description>今年も個人サポーター（初回から 3 年連続）として iOSDC に参加してきました。トークには応募してたけど、残念ながら選に漏れました。 あと、弊社は昨年から</description>
			<content type="html"><![CDATA[

<p>今年も個人サポーター（初回から 3 年連続）として iOSDC に参加してきました。トークには応募してたけど、残念ながら選に漏れました。
あと、<a href="https://www.casareal.co.jp/">弊社</a>は昨年からブーススポンサーをやってるので、そっちにも顔を出してました。</p>

<h1 id="公式サイト-ハッシュタグなど">公式サイト、ハッシュタグなど</h1>

<ul>
<li><a href="https://iosdc.jp/2018/">https://iosdc.jp/2018/</a></li>
<li><a href="https://twitter.com/iosdcjp">@iosdcjp</a></li>
<li><a href="https://twitter.com/hashtag/iosdc?src=hash">#iosdc</a></li>
<li><a href="https://qiita.com/winterwind26/items/210e5735d2ce832d0c36">iOSDC 2018 セッション資料まとめ</a></li>
</ul>

<p>今年は <sup>8</sup>&frasl;<sub>30</sub>-<sup>9</sup>&frasl;<sub>2</sub> の開催でしたが、 <sup>8</sup>&frasl;<sub>30</sub>-31 は残念ながら <a href="https://www.casareal.co.jp/ls/service/openseminar/apple/l020">iOSDE</a> に登壇していたので iOSDC には <sup>9</sup>&frasl;<sub>1</sub>,2 のみ参加です（名前が紛らわしい）。</p>

<p>セッションは高度な内容から日常で使える tips 、入門者向けの内容まで幅広く、どのレベルのエンジニアでも学びの得られる門戸の広いカンファレンスでした。特に後者はカンファレンスでは蔑ろにされることが多い気がするけど、いろんなエンジニアが学べて交流できるのって大事だなと思ってます（なので来年もそっち系でトーク応募します）。</p>

<h1 id="ここがよかった">ここがよかった</h1>

<h2 id="参加者として">参加者として</h2>

<ul>
<li>初回からずっと参加してますが、「ここがもうちょっとこうなってるといいな」が毎年着実に改善されています。</li>
<li>昨年導入された「パックマンルール」もすごい！って思ったけど、今年の「機械的席詰めタイム」はそれ以上によく考えられてるなと思いました。</li>
<li>みんな気持ち的には「詰めた方がいいんだろうな」と思いつつ、最初から詰めるのは何となく気が引ける。で、結果的に 3 人掛けだと真ん中が空いちゃって後から来る人が入りづらい。それを上手く解決してるなーととても感心しました。</li>
<li>ノベルティのサコッシュ（斜め掛けのバッグ）。スリーブに入れた MacBook と iPad Pro 10.5 インチがぴったり収まるし、トートバッグと違って両手が空くのでとても便利でした。カンファレンス中、大活躍でした。</li>
<li>バドワイザー（瓶）が今年も継続されてた。</li>
</ul>

<h2 id="スポンサー-サポーターとして">スポンサー＆サポーターとして</h2>

<ul>
<li>昨年ブーススポンサー用に作成して頂いた各社ロゴの缶バッジは、参加者がブースを回るモチベーションとなりとても好評でした（あと、登壇者に目立つところに付けて頂くことで露出を狙えた）。</li>
<li>今年はそういう感じのはないのか…とちょっとだけ残念な気持ちでしたが、運営の方々の思いである「参加者も一緒にイベントを作っていく仲間」というのが 3 年目ともなるとしっかり浸透していて、結果的に多くの方々に立ち寄って頂けました。</li>
<li>昨年は個人サポーター（個人スポンサー）の T シャツが一般と同じだったので、パーカーを着てないと見分けがつかなかったけど今年は一般がシルバー、個人サポーターがゴールドと違いがあってうれしかった（でもスポンサーブース用に会社のポロシャツを着てたので、着るチャンスがなかった…）。</li>
<li>来年もやります。</li>
</ul>

<h1 id="あれ-と思った点">あれ？と思った点</h1>

<ul>
<li>昨年は LT の投票＆賞ってレギュラートークとは別にありませんでしたっけ？（うろ覚え）</li>
</ul>

<hr />

<h1 id="参加したトークのひとこと感想">参加したトークのひとこと感想</h1>

<h2 id="9-1"><sup>9</sup>&frasl;<sub>1</sub></h2>

<h3 id="詳解-fastfile">詳解 Fastfile</h3>

<ul>
<li>スピーカー: ぎぎにゃん さん <a href="https://twitter.com/giginet">@giginet</a></li>
<li>「詳解 Fastlane だと勘違いしてた人が…」あっ、はい</li>
<li>Fastfile の話でしたが、以下のように Fastlane に限らず一般的に有用な内容でした

<ul>
<li>値は環境変数から読み込む</li>
<li>設定とロジックを分ける</li>
</ul></li>
<li>私自身は Fastlane を使い始めたばかりなので、実際にこの辺りを見ながら少しずつ適用していきたいです</li>
</ul>

<h3 id="depth-in-depth">Depth in Depth</h3>

<ul>
<li>スピーカー: 堤修一 さん <a href="https://twitter.com/shu223">@shu223</a></li>
<li>深度はボケのためだけではない、という話でした</li>
<li>深度の種類やセンサーの仕組みなどから、丁寧に説明されていました</li>
<li>私自身は、深度を可視化するアプリを利用してていつも面白いなーと思ってましたが、意外と取るのは単純だと感じました（でもやったら多分難しいとは思う）</li>
<li>説明の明快さもさることながら、人物をくり抜いて背景合成するというキャッチーなデモが非常に分かり易かったです</li>
<li>この日に生まれたお子さんが、私の娘と同じ誕生日なので何となくうれしいです。おめでとうございます！</li>
</ul>

<h3 id="5000-行の-uitableview-を差分更新する">5000 行の UITableView を差分更新する</h3>

<ul>
<li>スピーカー: ばんじゅん さん <a href="https://twitter.com/banjun">@banjun</a></li>
<li>差分更新のライブラリ比較や、パフォーマンスを落とさないための試行錯誤などに関する内容でした</li>
<li>UITableView の差分更新については、 <sup>8</sup>&frasl;<sub>30</sub>, 31 にもいくつかセッションがあったようです</li>
<li>ライブラリを入れればそれで解決、とは行かないようでした</li>
<li>実際にパフォーマンスが上がらずに、そのボトルネックを突き止め改善するプロセス自体が有用でした</li>
</ul>

<h3 id="気遣いの-ios-プログラミング">気遣いの iOS  プログラミング</h3>

<ul>
<li>スピーカー: ezura さん <a href="https://twitter.com/eduraaa">@eduraaa</a></li>
<li>どの場面でも利用すべきベストなものはなく、いろいろな場面に活用できる引き出しを増やすことが重要というお話でした</li>
<li>いくつか具体例を出しながら、コードの意図をより伝えやすい記述を紹介していました</li>
<li>紹介されていたどれも、 Swift らしい言語機能を上手く活用していました</li>
<li>そのため、むしろ Java などの言語から移ってきた人にはすぐには理解しがたいのかもしれないと感じました</li>
<li>メンバーの習熟度も考慮して採用する記述方法を記述する必要があり、引き出しを増やしておくのは重要だと思います</li>
</ul>

<hr />

<h2 id="9-2"><sup>9</sup>&frasl;<sub>2</sub></h2>

<h3 id="ios-マイクロインタラクション入門">iOS マイクロインタラクション入門</h3>

<ul>
<li>スピーカー: kiwi さん <a href="https://twitter.com/koga_wiwi">@koga_wiwi</a></li>
<li>「マイクロインタラクション = ちょっとした相互作用」を活用することで、操作の心地良さにつながるという話でした</li>
<li>いくつか、具体的な実装方法も紹介しながらのセッションでした</li>
<li>機能要件的には不要であるものの、特にコンシュマー向けのアプリでは UX が重要ですよね</li>
<li>本のちょっとしたことでも、全く印象は変わるので少しずつ試してみたいです</li>
</ul>

<h3 id="プロトコルを使って複数サービスを跨いだ-music-player-を実装する">プロトコルを使って複数サービスを跨いだ music player を実装する</h3>

<ul>
<li>スピーカー: kumabook さん <a href="https://twitter.com/kumabook">@kumabook</a></li>
<li>実際に開発した、複数の音楽サービスをサポートするアプリ開発時の知見でした</li>
<li>Apple Music の曲の後に Spotify の曲、その後に SoundCloud の…といったような再生が可能となっているそうです</li>
<li>それぞれのサービスごとに利用する API の形式は違うので、プロトコルを活用して共通化されていました</li>
<li>サービスによってサポートされていない機能などもある中で、できる限り共通化するための試行錯誤があったようです</li>
<li>ただ、「再生する」「停止する」などの根幹部分はある程度近いので、その辺りを中心に考えると設計がしやすそうでした</li>
</ul>

<h3 id="auto-layout-エラー診断所">Auto Layout エラー診断所</h3>

<ul>
<li>スピーカー: akatsuki174 さん <a href="https://twitter.com/akatsuki174">@akatsuki174</a></li>
<li>Auto Layout 利用時に発生するエラーや警告を解消するためのデバッグ手法を、具体例とともに紹介するセッションでした</li>
<li>また、その際に役立つツールなどの紹介もあり、 Auto Layout を利用している場合はすぐに役立つ構成となっていました</li>
<li>Auto Layout については、初学者のみならず苦戦すると思います</li>
<li>このセッションの内容はまさに「明日からすぐ使える」ものなので、ぜひ取り入れていきたいです</li>
</ul>

<h3 id="教育-企業におけるデバイス管理手法について">教育・企業におけるデバイス管理手法について</h3>

<ul>
<li>スピーカー: 大西正恭 さん <a href="https://twitter.com/kenchan0130">@kenchan0130</a></li>
<li>組織内における Apple デバイスの管理について、概要が全体的に整理されていました</li>
<li>なぜ必要なのか、何ができるのか、何が必要なのかが整理されたセッションでした</li>
<li>私自身は Apple 認定 iOS Deployment Essentials で教えているので、内容はだいたいわかってました</li>
<li>ただ、具体的な MDM 製品を導入して管理している立場の方のご意見を伺いたくて参加しました</li>
<li>デベロッパーには意外とデバイス管理は知られていないので、こういう内容のが増えるといいなと思います</li>
</ul>

<h3 id="ios-でグラフを描くために必要な知識について">iOS でグラフを描くために必要な知識について</h3>

<ul>
<li>スピーカー: 須藤将史 さん <a href="https://twitter.com/kurotyann9696">@kurotyann9696</a></li>
<li>数学的な円の基礎知識の復習から、段階を追いながら円グラフを書いていく内容でした</li>
<li>「こんな風になってるといいよね」から「それを実現するためには」を明確に示しながら、理解を深める説明がなされていました</li>
<li>私自身は現状、「なんとなく難しそう」という理由でアプリ内でグラフなどは使っていませんが、このセッションを聞いて気持ちが変わりました</li>
<li>説明が非常に明快で、グラフの書き方以上にワクワク感が伝わってきました</li>
<li>やはり情報を伝えるためには文字情報よりも、グラフや図解が圧倒的に有効だというのを再認識しました</li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
