<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Yagamo Style</title>
		<link>https://yagamo-style.com/posts/</link>
		<description>Recent content in Posts on Yagamo Style</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>ja-JP</language>
		<lastBuildDate>Tue, 02 Jul 2019 11:34:30 +0900</lastBuildDate>
		<atom:link href="https://yagamo-style.com/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>簡単なdelegateのサンプル</title>
			<link>https://yagamo-style.com/posts/delegate/</link>
			<pubDate>Tue, 02 Jul 2019 11:34:30 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/delegate/</guid>
			<description>はじめに iOSアプリでは、delegateが非常によく利用されます トレーニングで紹介していると、初めての人には「delegateオブジェクト</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>iOSアプリでは、delegateが非常によく利用されます</li>
<li>トレーニングで紹介していると、初めての人には「delegateオブジェクトに用意したコールバックメソッドが自動的に呼ばれる」ことの理解が難しいように感じました</li>
<li>そこで、ごく簡単なサンプルを利用してdelegateの仕組みを紹介してみます</li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 10.2</li>
<li>Swift 5</li>
</ul>

<h1 id="サンプルコード">サンプルコード</h1>

<h2 id="delegateを利用するクラスとdelegateプロトコル">delegateを利用するクラスとdelegateプロトコル</h2>

<ul>
<li>まずは、delegateを利用するMyClassクラスの定義とdelegateであるMyDelegateプロトコルの定義です</li>
<li>MyClassの<code>show(text:)</code>を呼ぶと、自身のプロパティとして保持するdelegateの<code>onShowCalled(withText:)</code>を呼ぶ実装となっています</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">delegate</span><span class="p">:</span> <span class="n">MyDelegate</span><span class="p">?</span>
    
    <span class="kd">func</span> <span class="nf">show</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">?.</span><span class="n">onShowCalled</span><span class="p">(</span><span class="n">withText</span><span class="p">:</span> <span class="n">text</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="nc">MyDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">onShowCalled</span><span class="p">(</span><span class="n">withText</span> <span class="n">text</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span>
<span class="p">}</span></code></pre></div>
<h2 id="delegateに準拠したクラス">delegateに準拠したクラス</h2>

<ul>
<li>delegateはプロトコルなので、利用する際にはそのプロトコルに準拠して内容を実装したクラスが必要です</li>
<li>MyAdopted1とMyAdopted2の2つを用意し、それぞれ実装の異なる<code>onShowCalled(withText:)</code>を用意しています</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="nc">MyAdopted1</span><span class="p">:</span> <span class="n">MyDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">onShowCalled</span><span class="p">(</span><span class="n">withText</span> <span class="n">text</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;MyAdopted1: </span><span class="si">\(</span><span class="n">text</span><span class="si">)</span><span class="s">&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">MyAdopted2</span><span class="p">:</span> <span class="n">MyDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">onShowCalled</span><span class="p">(</span><span class="n">withText</span> <span class="n">text</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;</span><span class="si">\(</span><span class="n">text</span><span class="si">)</span><span class="s"> from MyAdopted2!&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<h2 id="delegateを指定">delegateを指定</h2>

<ul>
<li>MyClassのインスタンスに、上記のMyAdopted1およびMyAdopted2をdelegateとして指定します</li>
<li>MyClassの<code>show(text:)</code>を呼ぶと、delegateとして指定したオブジェクトの<code>onShowCalled(withText:)</code>が実行されているのがわかります</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">let</span> <span class="nv">anObject1</span> <span class="p">=</span> <span class="n">MyClass</span><span class="p">()</span>
<span class="n">anObject1</span><span class="p">.</span><span class="n">delegate</span> <span class="p">=</span> <span class="n">MyAdopted1</span><span class="p">()</span>
<span class="n">anObject1</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="s">&#34;Hello&#34;</span><span class="p">)</span>

<span class="kd">let</span> <span class="nv">anObject2</span> <span class="p">=</span> <span class="n">MyClass</span><span class="p">()</span>
<span class="n">anObject2</span><span class="p">.</span><span class="n">delegate</span> <span class="p">=</span> <span class="n">MyAdopted2</span><span class="p">()</span>
<span class="n">anObject2</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="s">&#34;Hello&#34;</span><span class="p">)</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-terminal" data-lang="terminal">MyAdopted1: Hello
Hello from MyAdopted2!</code></pre></div>
<h1 id="まとめ">まとめ</h1>

<ul>
<li>普段、プログラマは上記の「delegateに準拠したクラスの作成」と、「delegateを指定」部分を書くことが多いと思います</li>
<li>delegateを利用するクラスを一度実装してみることで、delegateの仕組みについての理解が深まるのでおすすめです</li>
<li>今回作成したサンプルコードは、GitHubに置きました

<ul>
<li><a href="https://github.com/aokiplayer/DelegateSample">aokiplayer/DelegateSample</a></li>
</ul></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Asset Catalogで同じ名前の別画像を利用する</title>
			<link>https://yagamo-style.com/posts/assetfolder/</link>
			<pubDate>Fri, 21 Jun 2019 09:09:14 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/assetfolder/</guid>
			<description>はじめに Xcodeのアセットカタログ（デフォルトではAssets.xcassets）は、画像などのリソースを管理します アセットカタログ内で、</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>Xcodeのアセットカタログ（デフォルトではAssets.xcassets）は、画像などのリソースを管理します</li>
<li>アセットカタログ内で、フォルダ分けも可能です</li>
<li>その際、別のフォルダに同じ名前の画像を置きたくなることもあります</li>
<li>その場合の扱い方です</li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 10.2.1</li>
<li>iOS 12.2</li>
<li>Swift 5</li>
</ul>

<h1 id="フォルダにnamespaceを付与する">フォルダにNamespaceを付与する</h1>

<h2 id="デフォルトの状態-namespaceなし">デフォルトの状態（Namespaceなし）</h2>

<p><img src="/images/assetfolder/no_namespace.png" alt="no_namespace" /></p>

<ul>
<li>この画像の例では、<code>bird</code>という画像が<code>forest</code>フォルダと<code>sea</code>フォルダの両方に配置されています</li>
<li>ですが、デフォルトの状態ではフォルダ名は無視されるので、これらの画像には<code>bird</code>という名前でアクセスすることになり、区別ができません</li>
</ul>

<h2 id="フォルダ名付きでのアクセス-namespaceあり">フォルダ名付きでのアクセス（Namespaceあり）</h2>

<p><img src="/images/assetfolder/with_namespace.png" alt="with_namespace" /></p>

<ul>
<li>アセットカタログ内でフォルダを選択し、Attributes Inspectorから<code>Provides Namespace</code>にチェックを入れると、そのフォルダ名がNamespaceとして利用されます

<ul>
<li>フォルダの色も黄色から水色に変わっていますね</li>
</ul></li>
<li>この画像の例では、それぞれ<code>forest/bird</code>と<code>sea/bird</code>という名前で区別されます</li>

<li><p>こんな感じで、コード内でもInterface Builderでも参照できます</p>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="p">=</span> <span class="n">index</span> <span class="p">==</span> <span class="mi">0</span> <span class="p">?</span> <span class="n">UIImage</span><span class="p">(</span><span class="n">named</span><span class="p">:</span> <span class="s">&#34;forest/bird&#34;</span><span class="p">)</span> <span class="p">:</span> <span class="n">UIImage</span><span class="p">(</span><span class="n">named</span><span class="p">:</span> <span class="s">&#34;sea/bird&#34;</span><span class="p">)</span></code></pre></div>
<p><img src="/images/assetfolder/image_ib.png" alt="image_ib" /></p>

<h1 id="まとめ">まとめ</h1>

<ul>
<li>Namespaceがあると、格段に管理がしやすくなりますね</li>
<li>今回作成したサンプルコードは、GitHubに置きました</li>
<li><a href="https://github.com/aokiplayer/AssetFolderSample">aokiplayer/AssetFolderSample</a></li>
</ul>

<h1 id="参考">参考</h1>

<ul>
<li><a href="https://developer.apple.com/library/archive/documentation/Xcode/Reference/xcode_ref-Asset_Catalog_Format/FolderStructure.html#//apple_ref/doc/uid/TP40015170-CH33-SW1">Asset Catalog Format Reference: Folders</a></li>
<li><a href="https://stackoverflow.com/questions/33284412/asset-catalog-access-images-with-same-name-in-different-folders">ios - Asset Catalog: Access images with same name in different folders - Stack Overflow</a></li>
</ul></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>SwiftUIで一覧表示画面を作成する</title>
			<link>https://yagamo-style.com/posts/swiftuilist_beta/</link>
			<pubDate>Fri, 14 Jun 2019 13:16:59 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/swiftuilist_beta/</guid>
			<description>はじめに WWDC 2019で発表された目玉として、SwiftUIがあります 今回は、少しだけSwiftUIを触ってみたのでメモしてみます 検証環境 macOS 10.15 Catalina</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>WWDC 2019で発表された目玉として、SwiftUIがあります</li>
<li>今回は、少しだけSwiftUIを触ってみたのでメモしてみます</li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>macOS 10.15 Catalina beta</li>
<li>Xcode 11 beta</li>
<li>iOS 13 beta</li>
<li>Swift 5.1</li>
<li>iPad Pro 10.5 inch</li>
</ul>

<h1 id="ストーリーボードは">ストーリーボードは？</h1>

<ul>
<li>これまで、レイアウトは基本的にストーリーボードで行ってきました</li>
<li>ストーリーボードは決して悪いものではなく、まず画面の作成を始める際にはとても扱いやすいです</li>
<li>ただし、ビューの数が増えたり、複雑なレイアウトをしようとすると非常に管理が難しいのも事実です</li>
</ul>

<h1 id="コードでレイアウトを行うswiftui">コードでレイアウトを行うSwiftUI</h1>

<ul>
<li>Flutterなどでは、画面をコード上で宣言的に記述できます</li>
<li>最近は、この形式をとるものが増えています</li>
<li>SwiftUIも、コードから宣言的なレイアウトを行います</li>
<li>これまでもコードのみで画面を作成できましたが、以下のような問題を抱えていました

<ul>
<li>プレビューの方法がないため、ビルドして実行しないと確認できない</li>
<li>手続的に記述するため、実際のレイアウトがイメージしにくい</li>
</ul></li>
</ul>

<h1 id="swiftuiで作成した一覧画面のサンプル">SwiftUIで作成した一覧画面のサンプル</h1>

<h2 id="画面イメージ">画面イメージ</h2>

<p><img src="/images/swiftuilist_beta/list_preview.png" alt="background_modes" /></p>

<h2 id="実装ファイル">実装ファイル</h2>

<ul>
<li>実装したのは、以下のファイルです</li>
</ul>

<table>
<thead>
<tr>
<th align="left">ファイル</th>
<th align="left">説明</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">FoodModel.swift</td>
<td align="left">表の1行分を表すデータモデル</td>
</tr>

<tr>
<td align="left">FoodDataSource.swift</td>
<td align="left">表示するデータを提供する</td>
</tr>

<tr>
<td align="left">FoodRow.swift</td>
<td align="left">表の各行を表すビュー。FoodListから利用される</td>
</tr>

<tr>
<td align="left">FoodList.swift</td>
<td align="left">表の全体を表すビュー。FoodDataSourceからデータを取得し、各行のFoodRowを生成する</td>
</tr>

<tr>
<td align="left">ContentView.swift</td>
<td align="left">最初に表示されるビュー。この中でFoodListを読み込む</td>
</tr>
</tbody>
</table>

<h3 id="foodmodel-swift">FoodModel.swift</h3>
<div class="highlight"><pre class="chroma"><code class="language-swift:FoodModel.swift" data-lang="swift:FoodModel.swift"><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="kd">struct</span> <span class="nc">FoodModel</span><span class="p">:</span> <span class="n">Codable</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">id</span><span class="p">:</span> <span class="nb">Int</span>
    <span class="kd">var</span> <span class="nv">title</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">var</span> <span class="nv">userName</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">var</span> <span class="nv">imageName</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">var</span> <span class="nv">liked</span><span class="p">:</span> <span class="nb">Bool</span> <span class="p">=</span> <span class="kc">false</span>
<span class="p">}</span></code></pre></div>
<h3 id="fooddatasource-swift">FoodDataSource.swift</h3>
<div class="highlight"><pre class="chroma"><code class="language-swift:FoodDataSource.swift" data-lang="swift:FoodDataSource.swift"><span class="kd">import</span> <span class="nc">Combine</span>
<span class="kd">import</span> <span class="nc">SwiftUI</span>

<span class="kd">class</span> <span class="nc">FoodDataSource</span><span class="p">:</span> <span class="n">BindableObject</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="n">PublisherType</span> <span class="p">=</span> <span class="n">PassthroughSubject</span>
    
    <span class="kd">let</span> <span class="nv">didChange</span><span class="p">:</span> <span class="n">FoodDataSource</span><span class="p">.</span><span class="n">PublisherType</span> <span class="p">=</span> <span class="n">PassthroughSubject</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">,</span> <span class="n">Never</span><span class="o">&gt;</span><span class="p">()</span>
    <span class="kd">var</span> <span class="nv">foodData</span><span class="p">:</span> <span class="p">[</span><span class="n">FoodModel</span><span class="p">]</span>

    <span class="kd">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">foodData</span> <span class="p">=</span> <span class="p">[</span>
            <span class="n">FoodModel</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;スープカレー&#34;</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="s">&#34;山田二郎&#34;</span><span class="p">,</span> <span class="n">imageName</span><span class="p">:</span> <span class="s">&#34;1&#34;</span><span class="p">,</span> <span class="n">liked</span><span class="p">:</span> <span class="kc">true</span><span class="p">),</span>
            <span class="n">FoodModel</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;そば屋のカレー&#34;</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="s">&#34;川田吾郎&#34;</span><span class="p">,</span> <span class="n">imageName</span><span class="p">:</span> <span class="s">&#34;2&#34;</span><span class="p">),</span>
            <span class="n">FoodModel</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;タイ風カレー&#34;</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="s">&#34;里田舞&#34;</span><span class="p">,</span> <span class="n">imageName</span><span class="p">:</span> <span class="s">&#34;3&#34;</span><span class="p">,</span> <span class="n">liked</span><span class="p">:</span> <span class="kc">true</span><span class="p">),</span>
            <span class="n">FoodModel</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;スタミナジャンボカレー&#34;</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="s">&#34;海田泳七郎&#34;</span><span class="p">,</span> <span class="n">imageName</span><span class="p">:</span> <span class="s">&#34;4&#34;</span><span class="p">),</span>
            <span class="n">FoodModel</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;レッドカレー&#34;</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="s">&#34;岡田八郎&#34;</span><span class="p">,</span> <span class="n">imageName</span><span class="p">:</span> <span class="s">&#34;5&#34;</span><span class="p">)</span>
        <span class="p">]</span>

        <span class="n">didChange</span><span class="p">.</span><span class="n">send</span><span class="p">(())</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<h3 id="foodrow-swift">FoodRow.swift</h3>
<div class="highlight"><pre class="chroma"><code class="language-swift:FoodRow.swift" data-lang="swift:FoodRow.swift"><span class="kd">import</span> <span class="nc">SwiftUI</span>

<span class="kd">struct</span> <span class="nc">FoodRow</span> <span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">foodModel</span><span class="p">:</span> <span class="n">FoodModel</span>

    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">VStack</span><span class="p">(</span><span class="n">alignment</span><span class="p">:</span> <span class="p">.</span><span class="n">leading</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">Image</span><span class="p">(</span><span class="n">foodModel</span><span class="p">.</span><span class="n">imageName</span><span class="p">)</span>
                <span class="p">.</span><span class="n">resizable</span><span class="p">()</span>
                <span class="p">.</span><span class="n">aspectRatio</span><span class="p">(</span><span class="n">contentMode</span><span class="p">:</span> <span class="n">ContentMode</span><span class="p">.</span><span class="n">fit</span><span class="p">)</span>
                <span class="p">.</span><span class="n">shadow</span><span class="p">(</span><span class="n">radius</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
                <span class="p">.</span><span class="n">border</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">white</span><span class="p">,</span> <span class="n">width</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>

            <span class="n">Text</span><span class="p">(</span><span class="n">foodModel</span><span class="p">.</span><span class="n">title</span><span class="p">).</span><span class="n">font</span><span class="p">(.</span><span class="n">headline</span><span class="p">)</span>

            <span class="n">HStack</span> <span class="p">{</span>
                <span class="n">Text</span><span class="p">(</span><span class="n">foodModel</span><span class="p">.</span><span class="n">userName</span><span class="p">).</span><span class="n">font</span><span class="p">(.</span><span class="n">subheadline</span><span class="p">)</span>
                <span class="n">Spacer</span><span class="p">()</span>
                <span class="n">Image</span><span class="p">(</span><span class="n">foodModel</span><span class="p">.</span><span class="n">liked</span> <span class="p">?</span> <span class="s">&#34;liked&#34;</span> <span class="p">:</span> <span class="s">&#34;unliked&#34;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}.</span><span class="n">padding</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#if</span> <span class="cp">DEBUG</span>
<span class="kd">struct</span> <span class="nc">FoodRow_Previews</span> <span class="p">:</span> <span class="n">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">Group</span> <span class="p">{</span>
            <span class="n">FoodRow</span><span class="p">(</span><span class="n">foodModel</span><span class="p">:</span> <span class="n">FoodModel</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;Ramen&#34;</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="s">&#34;Jiro Yamada&#34;</span><span class="p">,</span> <span class="n">imageName</span><span class="p">:</span> <span class="s">&#34;5&#34;</span><span class="p">))</span>
        <span class="p">}.</span><span class="n">previewLayout</span><span class="p">(.</span><span class="n">fixed</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="mi">400</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span></code></pre></div>
<h3 id="foodlist-swift">FoodList.swift</h3>
<div class="highlight"><pre class="chroma"><code class="language-swift:FoodList.swift" data-lang="swift:FoodList.swift"><span class="kd">import</span> <span class="nc">SwiftUI</span>

<span class="kd">struct</span> <span class="nc">FoodList</span> <span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="p">@</span><span class="n">ObjectBinding</span> <span class="kd">var</span> <span class="nv">foodDataSource</span> <span class="p">=</span> <span class="n">FoodDataSource</span><span class="p">()</span>

    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">NavigationView</span> <span class="p">{</span>
            <span class="n">List</span><span class="p">(</span><span class="n">foodDataSource</span><span class="p">.</span><span class="n">foodData</span><span class="p">.</span><span class="n">identified</span><span class="p">(</span><span class="n">by</span><span class="p">:</span> <span class="err">\</span><span class="p">.</span><span class="n">id</span><span class="p">))</span> <span class="p">{</span> <span class="n">foodModel</span> <span class="k">in</span>
                    <span class="n">FoodRow</span><span class="p">(</span><span class="n">foodModel</span><span class="p">:</span> <span class="n">foodModel</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">.</span><span class="n">navigationBarTitle</span><span class="p">(</span><span class="n">Text</span><span class="p">(</span><span class="s">&#34;Food list&#34;</span><span class="p">))</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#if</span> <span class="cp">DEBUG</span>
<span class="kd">struct</span> <span class="nc">FoodList_Previews</span> <span class="p">:</span> <span class="n">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">FoodList</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span></code></pre></div>
<h3 id="contentview-swift">ContentView.swift</h3>
<div class="highlight"><pre class="chroma"><code class="language-swift:ContentView.swift" data-lang="swift:ContentView.swift"><span class="kd">import</span> <span class="nc">SwiftUI</span>

<span class="kd">struct</span> <span class="nc">ContentView</span> <span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">FoodList</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#if</span> <span class="cp">DEBUG</span>
<span class="kd">struct</span> <span class="nc">ContentView_Previews</span> <span class="p">:</span> <span class="n">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">ContentView</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span></code></pre></div>
<h1 id="まとめ">まとめ</h1>

<h2 id="よかった点">よかった点</h2>

<ul>
<li>ちょっとした画面の作成であれば、SwiftUIはとても簡単に思えました</li>
<li>macOS 10.15 Catalina上であれば、ライブビューでレイアウトだけでなく動作がすぐ確認できるのが良いです</li>
</ul>

<h2 id="難しく感じた点">難しく感じた点</h2>

<ul>
<li>ストーリーボードを利用していた際と、ビュー階層のイメージが異なるのでまだ戸惑っています</li>
<li>また、思った通りにレイアウトができず苦労しています</li>
</ul>

<h1 id="サンプルプロジェクト">サンプルプロジェクト</h1>

<ul>
<li>今回作成したサンプルコードは、GitHubに置きました</li>
<li><a href="https://github.com/aokiplayer/SwiftUITableSample">aokiplayer/SwiftUITableSample</a></li>
</ul>

<h1 id="参考">参考</h1>

<ul>
<li><a href="https://developer.apple.com/tutorials/swiftui">SwiftUI Tutorials | Apple Developer Documentation</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>画面遷移（セグエ）のキャンセル</title>
			<link>https://yagamo-style.com/posts/seguecancel/</link>
			<pubDate>Sun, 26 May 2019 09:35:28 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/seguecancel/</guid>
			<description>はじめに 画面遷移のタイミングで条件を判断し、場合によってはキャンセルするような動作が必要な場面があります ボタンなどからAction接続したメ</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>画面遷移のタイミングで条件を判断し、場合によってはキャンセルするような動作が必要な場面があります</li>
<li>ボタンなどからAction接続したメソッド内で<code>performSegue(withIdentifier:sender:)</code>を利用する場合や、<code>addTarget(_:action:for:)</code>でアクションを登録した場合であれば、その際に条件判断を行うこともできます

<ul>
<li>しかし、ボタンからセグエを直接引いて画面遷移する場合であれば、無条件に画面遷移してしまいます</li>
</ul></li>
<li>ここでは、後者の場合に画面遷移の判断とキャンセルの方法について紹介します</li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 10.2</li>
<li>iOS 12.2</li>
<li>Swift 5</li>
</ul>

<h1 id="利用するメソッド">利用するメソッド</h1>

<ul>
<li><code>UIViewController</code>の<code>shouldPerformSegue(withIdentifier:sender:)</code>を利用します

<ul>
<li>このメソッドをオーバーライドします</li>
<li>動きとしては、trueを返した場合は画面遷移を実行、falseの場合はキャンセルとなります</li>
</ul></li>
</ul>

<h1 id="サンプルプログラム">サンプルプログラム</h1>

<h2 id="動作">動作</h2>

<ul>
<li><p>NEXTボタンからセグエを引いてあり、スイッチがONの場合のみ画面遷移を行うプログラムです</p>

<p><img src="/images/seguecancel/segue_cancel.png" alt="segue_cancel" /></p></li>
</ul>

<h2 id="サンプルコード">サンプルコード</h2>
<div class="highlight"><pre class="chroma"><code class="language-swift:ViewController.swift" data-lang="swift:ViewController.swift"><span class="kd">import</span> <span class="nc">UIKit</span>

<span class="kd">class</span> <span class="nc">ViewController</span><span class="p">:</span> <span class="n">UIViewController</span> <span class="p">{</span>

    <span class="kr">@IBOutlet</span> <span class="kr">weak</span> <span class="kd">var</span> <span class="nv">moveSwitch</span><span class="p">:</span> <span class="n">UISwitch</span><span class="o">!</span>
    
    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">shouldPerformSegue</span><span class="p">(</span><span class="n">withIdentifier</span> <span class="n">identifier</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">sender</span><span class="p">:</span> <span class="nb">Any</span><span class="p">?)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">shouldPerformSegue</span><span class="p">(</span><span class="n">withIdentifier</span><span class="p">:</span> <span class="n">identifier</span><span class="p">,</span> <span class="n">sender</span><span class="p">:</span> <span class="n">sender</span><span class="p">)</span>

        <span class="c1">// When the switch is off, it cancels the segue.</span>
        <span class="k">return</span> <span class="n">moveSwitch</span><span class="p">.</span><span class="n">isOn</span>
    <span class="p">}</span>

    <span class="kr">@IBAction</span> <span class="kd">func</span> <span class="nf">unwindToMain</span><span class="p">(</span><span class="kc">_</span> <span class="n">unwindSegue</span><span class="p">:</span> <span class="n">UIStoryboardSegue</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<h1 id="まとめ">まとめ</h1>

<ul>
<li>これを利用することで、「特定の状況下では画面遷移させない」が実現できます</li>
<li>このサンプルでは利用していませんが、<code>shouldPerformSegue(withIdentifier:sender:)</code>の第1引数にはセグエのIdentifierが渡ってきます

<ul>
<li>この情報を利用することで、複数のセグエが引かれていた際、セグエごとに条件を個別に判断できますね</li>
</ul></li>
<li>今回作成したサンプルは、GitHubに置きました

<ul>
<li><a href="https://github.com/aokiplayer/SegueCancelSample">aokiplayer/SegueCancelSample</a></li>
</ul></li>
</ul>

<h1 id="参考">参考</h1>

<ul>
<li><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621502-shouldperformsegue">shouldPerformSegue(withIdentifier:sender:) - UIViewController | Apple Developer Documentation</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>iOSにおけるPush通知の基本2（受信した通知の内容取得）</title>
			<link>https://yagamo-style.com/posts/remotenotification02/</link>
			<pubDate>Fri, 24 May 2019 10:52:57 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/remotenotification02/</guid>
			<description>はじめに 前の記事 [iOSにおけるPush通知の基本1（通知の受信まで）] では、以下のところまで紹介しました Push通知に必要な事前設定 Pus</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>前の記事 <a href="https://yagamo-style.com/posts/remotenotification01/">[iOSにおけるPush通知の基本1（通知の受信まで）]</a> では、以下のところまで紹介しました

<ul>
<li>Push通知に必要な事前設定</li>
<li>Push通知のユーザへの利用許可依頼</li>
<li>Push通知の送信テスト</li>
</ul></li>
<li>これだけでも、受け取った通知をタップしてアプリを起動することができます</li>
<li>今回は、通知に含まれる内容（ペイロード）を取得する方法を説明します</li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 10.2</li>
<li>iOS 12.2</li>
<li>Swift 5</li>
<li>iPod touch 6th generation</li>
</ul>

<h1 id="通知に対するコールバックメソッド">通知に対するコールバックメソッド</h1>

<ul>
<li>通知を受け取ると、<code>UIApplicationDelegate</code>の以下のコールバックメソッドが呼ばれます</li>

<li><p>呼ばれるコールバックメソッドとそのタイミングは、アプリの実行状態により決定されます</p>

<table>
<thead>
<tr>
<th align="left">事前状態</th>
<th align="left">タイミング</th>
<th align="left">メソッド</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">未起動</td>
<td align="left">通知のタップにより起動</td>
<td align="left"><code>application(_:didFinishLaunchingWithOptions:)</code></td>
</tr>

<tr>
<td align="left">Foreground</td>
<td align="left">通知を受信</td>
<td align="left"><code>application(_:didReceiveRemoteNotification:fetchCompletionHandler:)</code></td>
</tr>

<tr>
<td align="left">Background</td>
<td align="left">通知のタップによりForeground</td>
<td align="left"><code>application(_:didReceiveRemoteNotification:fetchCompletionHandler:)</code></td>
</tr>
</tbody>
</table></li>

<li><p>これらのコールバック内で、通知のペイロード（通知に含まれるデータ）を取得して処理を行います</p></li>
</ul>

<h1 id="push通知のペイロード">Push通知のペイロード</h1>

<ul>
<li><p>Push通知のペイロードは、以下のような形式のJSONです</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;aps&#34;</span> <span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;alert&#34;</span> <span class="p">:</span> <span class="p">{</span>
            <span class="nt">&#34;title&#34;</span> <span class="p">:</span> <span class="s2">&#34;New Message&#34;</span><span class="p">,</span>
            <span class="nt">&#34;subtitle&#34;</span> <span class="p">:</span> <span class="s2">&#34;You got a new message.&#34;</span><span class="p">,</span>
            <span class="nt">&#34;body&#34;</span> <span class="p">:</span> <span class="s2">&#34;New message has arrived. Open your inbox.&#34;</span>
        <span class="p">},</span>
        <span class="nt">&#34;badge&#34;</span> <span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
        <span class="nt">&#34;sound&#34;</span> <span class="p">:</span> <span class="s2">&#34;default&#34;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<h1 id="ペイロードの取得">ペイロードの取得</h1>

<ul>
<li>受信したPush通知から、ペイロードを取り出す処理を実装します</li>
</ul>

<h2 id="そもそもどこから取り出すのか">そもそもどこから取り出すのか？</h2>

<ul>
<li>ペイロードは、<code>UIApplicationDelegate</code>のコールバックの引数に格納された状態で渡されます</li>
</ul>

<table>
<thead>
<tr>
<th align="left">コールバックメソッド</th>
<th align="left">格納場所</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left"><code>application(_:didFinishLaunchingWithOptions:)</code></td>
<td align="left">第2引数<code>launchOptions</code>ディクショナリ内</td>
</tr>

<tr>
<td align="left"><code>application(_:didReceiveRemoteNotification:fetchCompletionHandler:)</code></td>
<td align="left">第2引数の<code>userInfo</code>ディクショナリ内</td>
</tr>
</tbody>
</table>

<h2 id="送信するpush通知の内容">送信するPush通知の内容</h2>

<ul>
<li>今回は、以下の内容のPush通知を送ってみます</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-json:通知のペイロード" data-lang="json:通知のペイロード">{
  &#34;aps&#34;: {
    &#34;alert&#34;: &#34;Wake up!&#34;,
    &#34;sound&#34;: &#34;default&#34;
  }
}</code></pre></div></li>
</ul>

<h2 id="実装例">実装例</h2>

<h3 id="アプリ未起動の場合">アプリ未起動の場合</h3>

<ul>
<li>アプリが起動していない場合は通知をタップした時点でアプリが起動するので、ライフサイクルメソッドである<code>application(_:didFinishLaunchingWithOptions:)</code>が呼ばれます</li>
<li>このサンプルコードでは、ペイロードの内容を文字列として整形してビューコントローラのプロパティに渡しています

<ul>
<li>起動済みの場合と区別するために、背景色を黄色に設定しています</li>
</ul></li>
</ul>

<h4 id="ペイロードの取得手順">ペイロードの取得手順</h4>

<ol>
<li>第2引数の<code>launchOptions</code>ディクショナリからキー<code>UIApplication.LaunchOptionsKey.remoteNotification</code>を指定

<ul>
<li>Push通知のペイロードを格納したディクショナリが得られる</li>
</ul></li>
<li>Push通知のペイロードを格納したディクショナリから、キー&rdquo;aps&rdquo;でペイロードの内容部分のディクショナリを取得</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                 <span class="n">didFinishLaunchingWithOptions</span> <span class="n">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="n">UIApplication</span><span class="p">.</span><span class="n">LaunchOptionsKey</span><span class="p">:</span> <span class="nb">Any</span><span class="p">]?)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>

    <span class="err">〜省略〜</span>

    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 01. get notification payload</span>
    <span class="k">if</span> <span class="kd">let</span> <span class="nv">notificationOptions</span> <span class="p">=</span> <span class="n">launchOptions</span><span class="p">?[.</span><span class="n">remoteNotification</span><span class="p">]</span> <span class="k">as</span><span class="p">?</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span> <span class="nb">AnyObject</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">apsPart</span> <span class="p">=</span> <span class="n">notificationOptions</span><span class="p">[</span><span class="s">&#34;aps&#34;</span><span class="p">]</span> <span class="k">as</span><span class="p">?</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span> <span class="nb">AnyObject</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">}</span>

        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">vc</span> <span class="p">=</span> <span class="n">window</span><span class="p">?.</span><span class="n">rootViewController</span> <span class="k">as</span><span class="p">?</span> <span class="n">ViewController</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">}</span>
        <span class="kd">let</span> <span class="nv">text</span> <span class="p">=</span> <span class="n">apsPart</span><span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="s">&#34;</span><span class="si">\(</span><span class="n">key</span><span class="si">)</span><span class="s">: </span><span class="si">\(</span><span class="n">value</span><span class="si">)</span><span class="s">&#34;</span> <span class="p">}.</span><span class="n">joined</span><span class="p">(</span><span class="n">separator</span><span class="p">:</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">)</span>
        <span class="n">vc</span><span class="p">.</span><span class="n">payloadText</span> <span class="p">=</span> <span class="n">text</span>
        <span class="n">vc</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="p">=</span> <span class="p">.</span><span class="n">yellow</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="kc">true</span>
<span class="p">}</span></code></pre></div>
<h4 id="実行結果">実行結果</h4>

<p><img src="/images/remotenotification02/launching.png" alt="launching" /></p>

<h3 id="アプリが起動中の場合">アプリが起動中の場合</h3>

<ul>
<li>アプリが起動中の場合は、以下のタイミングで<code>UIApplicationDelegate</code>プロトコルの<code>application(_:didReceiveRemoteNotification:fetchCompletionHandler:)</code>が呼ばれます

<ul>
<li>アプリがForegroundの場合: 通知を受け取ったタイミング</li>
<li>アプリがBackgroundの場合: 受け取った通知をタップしてForegroundになったタイミング</li>
</ul></li>
<li>このサンプルコードでは、ペイロードの内容を文字列として整形してビューコントローラのプロパティに渡しています

<ul>
<li>未起動の場合と区別するために、背景色を緑に設定しています</li>
</ul></li>
</ul>

<h4 id="ペイロードの取得手順-1">ペイロードの取得手順</h4>

<ol>
<li>第2引数の<code>userInfo</code>ディクショナリからキー&rdquo;aps&rdquo;でペイロードの内容部分のディクショナリを取得</li>
<li>取得したディクショナリの扱いは、未起動の場合と同様</li>
</ol>

<ul>
<li><p>このコールバックを実装した場合、Backgorund ModesをONにすることを求められるので有効にしておきます</p>

<ul>
<li>エラーにはなりませんが、コンソールにメッセージが表示されます</li>
</ul>

<p><img src="/images/remotenotification02/background_modes.png" alt="background_modes" /></p></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                 <span class="n">didReceiveRemoteNotification</span> <span class="n">userInfo</span><span class="p">:</span> <span class="p">[</span><span class="n">AnyHashable</span> <span class="p">:</span> <span class="nb">Any</span><span class="p">],</span>
                 <span class="n">fetchCompletionHandler</span> <span class="n">completionHandler</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">UIBackgroundFetchResult</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Void</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 04. get notification payload</span>
    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">apsPart</span> <span class="p">=</span> <span class="n">userInfo</span><span class="p">[</span><span class="s">&#34;aps&#34;</span><span class="p">]</span> <span class="k">as</span><span class="p">?</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span> <span class="nb">AnyObject</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">completionHandler</span><span class="p">(.</span><span class="n">failed</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="p">}</span>

    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">vc</span> <span class="p">=</span> <span class="n">window</span><span class="p">?.</span><span class="n">rootViewController</span> <span class="k">as</span><span class="p">?</span> <span class="n">ViewController</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    <span class="kd">let</span> <span class="nv">text</span> <span class="p">=</span> <span class="n">apsPart</span><span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="s">&#34;</span><span class="si">\(</span><span class="n">key</span><span class="si">)</span><span class="s">: </span><span class="si">\(</span><span class="n">value</span><span class="si">)</span><span class="s">&#34;</span> <span class="p">}.</span><span class="n">joined</span><span class="p">(</span><span class="n">separator</span><span class="p">:</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">)</span>
    <span class="n">vc</span><span class="p">.</span><span class="n">payloadText</span> <span class="p">=</span> <span class="n">text</span>
    <span class="n">vc</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="p">=</span> <span class="p">.</span><span class="n">green</span>

<span class="p">}</span></code></pre></div>
<h4 id="実行結果-1">実行結果</h4>

<p><img src="/images/remotenotification02/active.png" alt="active" /></p>

<h1 id="まとめ">まとめ</h1>

<ul>
<li>アプリの実行状態によって、呼ばれるコールバックが異なる点に注意</li>
<li>ペイロードはディクショナリから取り出す

<ul>
<li>受け取った時点で、すでにJSONからディクショナリに変換されている</li>
</ul></li>
<li>今回作成したサンプルコードは、GitHubに置きました

<ul>
<li><a href="https://github.com/aokiplayer/TreatPushNotificationPayloadSample">aokiplayer/TreatPushNotificationPayloadSample</a></li>
</ul></li>
</ul>

<h1 id="参考">参考</h1>

<ul>
<li><a href="https://developer.apple.com/documentation/usernotifications">UserNotifications | Apple Developer Documentation</a></li>
<li><a href="https://www.raywenderlich.com/8164-push-notifications-tutorial-getting-started">Push Notifications Tutorial: Getting Started | raywenderlich.com</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>UIViewControllerのライフサイクルメソッド</title>
			<link>https://yagamo-style.com/posts/viewcontrollerlifecycle/</link>
			<pubDate>Tue, 21 May 2019 12:19:51 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/viewcontrollerlifecycle/</guid>
			<description>はじめに iOSアプリを作成していて、どのタイミングでどのメソッドが呼ばれるんだっけ？となることは多いです 特に、画面遷移の際に困ることがありま</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>iOSアプリを作成していて、どのタイミングでどのメソッドが呼ばれるんだっけ？となることは多いです</li>
<li>特に、画面遷移の際に困ることがあります</li>
<li>なので、非常に単純なサンプルを作成しておきました

<ul>
<li>各メソッド内で、コンソール出力をしているのみです</li>
</ul></li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 10.2</li>
<li>iOS 12.2</li>
<li>Swift 5</li>
</ul>

<h1 id="サンプルプロジェクト">サンプルプロジェクト</h1>

<ul>
<li><a href="https://github.com/aokiplayer/ViewControllerLifeCycleSample">aokiplayer/ViewControllerLifeCycleSample</a></li>
</ul>

<h1 id="サンプルの画面構成">サンプルの画面構成</h1>

<ul>
<li>画面はストーリーボードで作成しています</li>

<li><p>A, Bの2画面があり、以下のように遷移します（Aが初期画面）</p>

<ul>
<li>A -&gt; Bは、単純にPresent Modallyなセグエで遷移</li>
<li>B -&gt; Aは、unwindセグエで遷移</li>
</ul>

<p><img src="/images/viewcontrollerlifecycle/vc_lifecycle_segue.png" alt="segue_image" /></p></li>
</ul>

<h1 id="コンソール出力例">コンソール出力例</h1>

<h2 id="アプリ起動-aを表示">アプリ起動（Aを表示）</h2>

<ul>
<li>レイアウト系が2度呼ばれています

<ul>
<li>レイアウトは、様々なタイミングで呼ばれるのでこのように複数回呼ばれる可能性があるためです

<ul>
<li>boundsが変更されたり、サブビューが追加されたりしても呼ばれます</li>
</ul></li>
<li>Auto Layoutの制約を明示的に設定せず、Autoresizing maskをAuto Layoutに変換した場合などは1度しか呼ばれなかったりします</li>
</ul></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">A: init(coder:)
A: loadView()
A: viewDidLoad()
A: viewWillAppear(_:)
A: viewWillLayoutSubviews()
A: viewDidLayoutSubviews()
A: viewWillLayoutSubviews()
A: viewDidLayoutSubviews()
A: viewDidAppear(_:)</code></pre></div>
<h2 id="画面を回転-a画面表示中">画面を回転（A画面表示中）</h2>

<ul>
<li>レイアウトを組み直す必要が発生するので、こんな感じですね</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">A: viewWillTransition(to:with:)
A: viewWillLayoutSubviews()
A: viewDidLayoutSubviews()</code></pre></div>
<h2 id="homeボタンを押す-a画面表示中">HOMEボタンを押す（A画面表示中）</h2>

<ul>
<li>画面は表示されなくなりますが、実際にはいずれのコールバックも呼ばれていません

<ul>
<li>このあたりの挙動は、Androidとは異なりますね（Androidではこのタイミングでもコールバック呼ばれる）</li>
</ul></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console"></code></pre></div>
<h2 id="home画面でアイコンをタップ-上記の操作後">HOME画面でアイコンをタップ（上記の操作後）</h2>

<ul>
<li>非表示状態からの復帰ですが、いずれのコールバックも呼ばれていません

<ul>
<li>これも、Androidの場合はコールバックが呼ばれますね</li>
</ul></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console"></code></pre></div>
<h2 id="bへ遷移-present-modallyセグエ">Bへ遷移（Present Modallyセグエ）</h2>

<ul>
<li>ポイントはAの<code>prepare(for:sender:)</code>のタイミングです

<ul>
<li>ここで必要なデータの受け渡しを行いますが、Bの<code>viewDidLoad()</code>よりも前です</li>
<li>そのため、この時点ではBの持っているビューはnilであり、データを渡そうとすると実行時エラーとなります</li>
</ul></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">    B: init(coder:)
A: prepare(for:sender:)
    B: loadView()
    B: viewDidLoad()
A: viewWillDisappear(_:)
    B: viewWillAppear(_:)
    B: viewWillLayoutSubviews()
    B: viewDidLayoutSubviews()
A: viewWillLayoutSubviews()
A: viewDidLayoutSubviews()
    B: viewWillLayoutSubviews()
    B: viewDidLayoutSubviews()
    B: viewDidAppear(_:)
A: viewDidDisappear(_:)</code></pre></div>
<h2 id="aへ戻る-unwindセグエ">Aへ戻る（unwindセグエ）</h2>

<ul>
<li>unwindセグエで戻る際も、<code>prepare(for:sender:)</code>は呼ばれています</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">    B: prepare(for:sender:)
A: unwindToFirst(_:)
    B: viewWillDisappear(_:)
A: viewWillAppear(_:)
A: viewWillLayoutSubviews()
A: viewDidLayoutSubviews()
A: viewDidAppear(_:)
    B: viewDidDisappear(_:)
    B: deinit
A: viewWillLayoutSubviews()
A: viewDidLayoutSubviews()</code></pre></div>
<h1 id="まとめ">まとめ</h1>

<ul>
<li>初心者の陥りやすい点としては、<code>prepare(for:sender:)</code>内でのデータの受け渡しです</li>
<li>「遷移先画面のビューはまだnil」という点は、しっかり認識しておきましょう</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>iOSにおけるPush通知の基本1（通知の受信まで）</title>
			<link>https://yagamo-style.com/posts/remotenotification01/</link>
			<pubDate>Thu, 18 Apr 2019 09:30:15 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/remotenotification01/</guid>
			<description>はじめに Push通知は、使い方によっては非常に効果的です 通知しすぎると、邪魔になってしまいますが ここでは、Push通知の基本的な実装方法を説</description>
			<content type="html"><![CDATA[

<h1 id="はじめに">はじめに</h1>

<ul>
<li>Push通知は、使い方によっては非常に効果的です

<ul>
<li>通知しすぎると、邪魔になってしまいますが</li>
</ul></li>
<li>ここでは、Push通知の基本的な実装方法を説明します</li>
<li>Push通知の実装には、UserNotificationsフレームワークを利用します

<ul>
<li>ローカル通知にも、同じフレームワークを利用します</li>
<li>昔と違って、ひとつのフレームワークで両方に対応できていいですね</li>
</ul></li>
</ul>

<h1 id="検証環境">検証環境</h1>

<ul>
<li>Xcode 10.2</li>
<li>iOS 12.2</li>
<li>Swift 5</li>
<li>iPod touch 6th generation</li>
</ul>

<h1 id="必要なもの">必要なもの</h1>

<ul>
<li>Apple Developer Programのアカウント

<ul>
<li><a href="https://developer.apple.com/account/">Apple Developer</a>サイト上で、以下の確認・作成が必要なため

<ul>
<li>Team ID</li>
<li>Authentication Key</li>
</ul></li>
</ul></li>
<li>APNs（Apple Push Notification Service）に対応した、Push通知を送信するサーバ

<ul>
<li><a href="https://firebase.google.com/">Firebase</a>とか<a href="https://azure.microsoft.com/">Microsoft Azure</a>とか、いろいろなサービスが対応してます</li>
<li>テストするだけなら、APNsに対応したいろいろなツールがあります

<ul>
<li><a href="https://github.com/Dwarven/PushMeBaby">Dwarven/PushMeBaby</a></li>
<li><a href="https://github.com/onmyway133/PushNotifications">onmyway133/PushNotifications</a></li>
</ul></li>
<li>APNsは、その名のとおりAppleのPush通知サービスです

<ul>
<li>Push通知の送信は、必ずこのサービスを経由します</li>
</ul></li>
</ul></li>

<li><p>iPhoneやiPadなどの実デバイス</p>

<ul>
<li>シミュレータではPush通知が利用できないため</li>

<li><p>シミュレータでPush通知の登録をしようとすると、コンソールに以下のようなメッセージが出力されます</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">Failed to register: Error Domain=NSCocoaErrorDomain Code=3010 &#34;remote notifications are not supported in the simulator&#34; 
UserInfo={NSLocalizedDescription=remote notifications are not supported in the simulator}</code></pre></div></li>
</ul></li>
</ul>

<h1 id="事前準備-apple-developerサイト上">事前準備（Apple Developerサイト上）</h1>

<h2 id="team-idの確認">Team IDの確認</h2>

<ol>
<li><a href="https://developer.apple.com/account/">Apple Developer</a>サイトにログイン</li>

<li><p>左側のMembershipを選択して、Membership Detailsに表示されたTeam IDをメモしておく</p>

<p><img src="/images/remotenotification01/team_id.png" alt="team_id" /></p></li>
</ol>

<h2 id="authentication-keyの作成とダウンロード">Authentication Keyの作成とダウンロード</h2>

<ol>
<li><a href="https://developer.apple.com/account/">Apple Developer</a>サイトにログイン</li>
<li>左側のCertificates, IDs &amp; Profilesを選択</li>

<li><p>表示された画面で左側のKeysからAllを選択、右上の+をクリックしてキーを作成</p>

<ul>
<li>Nameには、キーに設定する任意の名前を入力</li>
<li>Apple Push Notification service (APNs)にチェック</li>
</ul>

<p><img src="/images/remotenotification01/create_key.png" alt="create_key" /></p></li>

<li><p>作成したら、Downloadをクリックしてキーをダウンロード</p>

<ul>
<li><strong>キーは一度しかダウンロードできません。セキュアな場所に確実に保存してください</strong></li>
<li>このキーは、Push通知を行うサーバに設定する</li>
<li>キーは、<code>AuthKey_XXXXXXXXXX.p8</code>という名前でダウンロードされる</li>
<li><code>XXXXXXXXXX</code>の部分がKey ID</li>
<li>Key IDもメモしておく</li>
</ul>

<p><img src="/images/remotenotification01/download_key.png" alt="download_key" /></p></li>
</ol>

<h1 id="主なコンポーネント">主なコンポーネント</h1>

<table>
<thead>
<tr>
<th align="left">コンポーネント</th>
<th align="left">説明</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">UNUserNotificationCenter</td>
<td align="left">通知関連の機能を管理する</td>
</tr>

<tr>
<td align="left">UNNotificationRequest</td>
<td align="left">通知の内容や、配送のトリガーを内包する</td>
</tr>

<tr>
<td align="left">UNNotificationAction</td>
<td align="left">通知内で表示されるボタン</td>
</tr>

<tr>
<td align="left">UNNotificationCategory</td>
<td align="left">通知の方法や表示されるアクションの設定をまとめたもの</td>
</tr>

<tr>
<td align="left">UNNotificationSettings</td>
<td align="left">通知の設定情報を保持</td>
</tr>

<tr>
<td align="left">UNMutableNotificationContent</td>
<td align="left">通知する内容</td>
</tr>

<tr>
<td align="left">UNPushNotificationTrigger</td>
<td align="left">APNsから送信された通知に関するトリガー</td>
</tr>
</tbody>
</table>

<h1 id="実装手順">実装手順</h1>

<h2 id="プロジェクトの設定">プロジェクトの設定</h2>

<ol>
<li><p>アプリケーションTARGETのSigningから、Teamを選択</p>

<ul>
<li>Apple Developer Programに登録済みのアカウントに紐付いている必要性あり</li>
<li>無料アカウントのTeamでは、Push Notificationが利用できない</li>
</ul>

<p><img src="/images/remotenotification01/signing_team.png" alt="signing_team" /></p></li>

<li><p>アプリケーションTARGETのCapabilitiesから、Push NotificationsをONにする</p>

<p><img src="/images/remotenotification01/capabilities.png" alt="capabilities" /></p></li>
</ol>

<h2 id="プッシュ通知の登録">プッシュ通知の登録</h2>

<ul>
<li>ここから先は、すべてAppDelegate.swift内に記述します

<ul>
<li>アプリの起動時に処理するのと、<code>UIApplicationDelegate</code>のコールバックが必要になるためです</li>
</ul></li>
</ul>

<ol>
<li><p>UserNotificationsフレームワークを利用するので、インポート</p>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="kd">import</span> <span class="nc">UserNotifications</span>    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 01. import</span></code></pre></div>
<ol>
<li>ユーザに対して、通知の許可依頼を行う</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                 <span class="n">didFinishLaunchingWithOptions</span> <span class="n">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="n">UIApplication</span><span class="p">.</span><span class="n">LaunchOptionsKey</span><span class="p">:</span> <span class="nb">Any</span><span class="p">]?)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>

    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 02. request to user</span>
    <span class="n">UNUserNotificationCenter</span><span class="p">.</span><span class="n">current</span><span class="p">().</span><span class="n">requestAuthorization</span><span class="p">(</span><span class="n">options</span><span class="p">:</span> <span class="p">[.</span><span class="n">alert</span><span class="p">,</span> <span class="p">.</span><span class="n">sound</span><span class="p">,</span> <span class="p">.</span><span class="n">badge</span><span class="p">])</span> <span class="p">{</span> <span class="n">granted</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
        <span class="k">guard</span> <span class="n">granted</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>

        <span class="c1">// 〜省略〜</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">true</span>
<span class="p">}</span></code></pre></div></li>

<li><p>ユーザが通知を許可していた場合は、APNsへ登録</p>

<ul>
<li><strong>「どのデバイスにインストールされたどのアプリか」</strong>を登録する</li>
<li>これにより、APNsは対象を特定して通知を発行できるようになる</li>

<li><p>この結果として、一意に識別するトークンが返される</p>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 02. request to user</span>
<span class="n">UNUserNotificationCenter</span><span class="p">.</span><span class="n">current</span><span class="p">().</span><span class="n">requestAuthorization</span><span class="p">(</span><span class="n">options</span><span class="p">:</span> <span class="p">[.</span><span class="n">alert</span><span class="p">,</span> <span class="p">.</span><span class="n">sound</span><span class="p">,</span> <span class="p">.</span><span class="n">badge</span><span class="p">])</span> <span class="p">{</span> <span class="n">granted</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
    <span class="k">guard</span> <span class="n">granted</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>

    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 03. register to APNs</span>
    <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span>
        <span class="n">UIApplication</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">registerForRemoteNotifications</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div></li>
</ul></li>

<li><p>APNsへの登録後に呼び出されるコールバックを実装（<code>UIApplicationDelegate</code>のメソッド）</p>

<ul>
<li>成功時: <code>application(_:didRegisterForRemoteNotificationsWithDeviceToken:)</code>

<ul>
<li>先述したトークンは第2引数に渡される</li>
<li>このトークンを、Push通知を送信するサービスに登録する必要がある

<ul>
<li>今回はテストとしてmacOS上のプログラムからPush通知を送信するので、トークンをログ出力しておく</li>
<li>外部のサービスへトークンを登録する方法は、各サービスのドキュメントを参照してください</li>
</ul></li>
</ul></li>
<li>失敗時: <code>application(_:didFailToRegisterForRemoteNotificationsWithError:)</code></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> - Callback for Remote Notification</span>
<span class="kd">extension</span> <span class="nc">AppDelegate</span> <span class="p">{</span>
    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 04-1. succeeded to register to APNs</span>
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                     <span class="n">didRegisterForRemoteNotificationsWithDeviceToken</span> <span class="n">deviceToken</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Data -&gt; Token string</span>
        <span class="kd">let</span> <span class="nv">tokenBytes</span> <span class="p">=</span> <span class="n">deviceToken</span><span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">byte</span><span class="p">:</span> <span class="nb">UInt8</span><span class="p">)</span> <span class="k">in</span> <span class="nb">String</span><span class="p">(</span><span class="n">format</span><span class="p">:</span> <span class="s">&#34;%02.2hhx&#34;</span><span class="p">,</span> <span class="n">byte</span><span class="p">)</span> <span class="p">}</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;Device token: </span><span class="si">\(</span><span class="n">tokenBytes</span><span class="p">.</span><span class="n">joined</span><span class="si">())</span><span class="s">&#34;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> failed to register to APNs</span>
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                     <span class="n">didFailToRegisterForRemoteNotificationsWithError</span> <span class="n">error</span><span class="p">:</span> <span class="n">Error</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;Failed to register to APNs: </span><span class="si">\(</span><span class="n">error</span><span class="si">)</span><span class="s">&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<ol>
<li>アプリを一度実行して通知の受信を許可し、前の手順でログ出力したトークンをメモしておきます</li>
<li>もちろん、実運用上はこの手順は不要です</li>
<li>実際には、<code>application(_:didRegisterForRemoteNotificationsWithDeviceToken:)</code>内で外部サービスにトークンを登録する処理が必要になります</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-console:コンソール出力例" data-lang="console:コンソール出力例">Device token: b92bf1a8af26237ad8dfad91312ece9563c8493e2bc2bf01e3bd9fb690d20d37</code></pre></div></li>
</ol>

<h1 id="ここまでの実装-appdelegate-swift">ここまでの実装（AppDelegate.swift）</h1>
<div class="highlight"><pre class="chroma"><code class="language-swift:AppDelegate.swift" data-lang="swift:AppDelegate.swift"><span class="kd">import</span> <span class="nc">UIKit</span>
<span class="kd">import</span> <span class="nc">UserNotifications</span>    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 01. import</span>

<span class="kr">@UIApplicationMain</span>
<span class="kd">class</span> <span class="nc">AppDelegate</span><span class="p">:</span> <span class="n">UIResponder</span><span class="p">,</span> <span class="n">UIApplicationDelegate</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nv">window</span><span class="p">:</span> <span class="n">UIWindow</span><span class="p">?</span>

    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                     <span class="n">didFinishLaunchingWithOptions</span> <span class="n">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="n">UIApplication</span><span class="p">.</span><span class="n">LaunchOptionsKey</span><span class="p">:</span> <span class="nb">Any</span><span class="p">]?)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>

        <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 02. request to user</span>
        <span class="n">UNUserNotificationCenter</span><span class="p">.</span><span class="n">current</span><span class="p">().</span><span class="n">requestAuthorization</span><span class="p">(</span><span class="n">options</span><span class="p">:</span> <span class="p">[.</span><span class="n">alert</span><span class="p">,</span> <span class="p">.</span><span class="n">sound</span><span class="p">,</span> <span class="p">.</span><span class="n">badge</span><span class="p">])</span> <span class="p">{</span> <span class="n">granted</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
            <span class="k">guard</span> <span class="n">granted</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>

            <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 03. register to APNs</span>
            <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span>
                <span class="n">UIApplication</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">registerForRemoteNotifications</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> - Callback for Remote Notification</span>
<span class="kd">extension</span> <span class="nc">AppDelegate</span> <span class="p">{</span>
    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> 04-1. succeeded to register to APNs</span>
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                     <span class="n">didRegisterForRemoteNotificationsWithDeviceToken</span> <span class="n">deviceToken</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Data -&gt; Token string</span>
        <span class="kd">let</span> <span class="nv">tokenBytes</span> <span class="p">=</span> <span class="n">deviceToken</span><span class="p">.</span><span class="bp">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">byte</span><span class="p">:</span> <span class="nb">UInt8</span><span class="p">)</span> <span class="k">in</span> <span class="nb">String</span><span class="p">(</span><span class="n">format</span><span class="p">:</span> <span class="s">&#34;%02.2hhx&#34;</span><span class="p">,</span> <span class="n">byte</span><span class="p">)</span> <span class="p">}</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;Device token: </span><span class="si">\(</span><span class="n">tokenBytes</span><span class="p">.</span><span class="n">joined</span><span class="si">())</span><span class="s">&#34;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// </span><span class="cs">MARK:</span><span class="c1"> failed to register to APNs</span>
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="kc">_</span> <span class="n">application</span><span class="p">:</span> <span class="n">UIApplication</span><span class="p">,</span>
                     <span class="n">didFailToRegisterForRemoteNotificationsWithError</span> <span class="n">error</span><span class="p">:</span> <span class="n">Error</span><span class="p">)</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;Failed to register to APNs: </span><span class="si">\(</span><span class="n">error</span><span class="si">)</span><span class="s">&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div>
<h1 id="push通知の受信テスト">Push通知の受信テスト</h1>

<ul>
<li>Push通知が受信できることをテストしてみます</li>
<li>今回は<a href="https://github.com/onmyway133/PushNotifications">onmyway133/PushNotifications</a>を利用するので、インストールしておいてください</li>
</ul>

<ol>
<li><p>Push通知の送信準備（PushNotificationsアプリ）</p>

<p><img src="/images/remotenotification01/push_tool.png" alt="push_tool" /></p></li>

<li><p>iOSを選択</p>

<ul>
<li><p>Authentication -&gt; TOKEN</p>

<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">設定値</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">SELECT P8</td>
<td align="left">ダウンロードしておいたAuthentication Keyを選択</td>
</tr>

<tr>
<td align="left">Enter key id</td>
<td align="left">メモしておいたKey IDを入力</td>
</tr>

<tr>
<td align="left">Enter team id</td>
<td align="left">メモしておいたTeam IDを入力</td>
</tr>
</tbody>
</table></li>

<li><p>Body</p>

<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">設定値</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">Enter bundle id</td>
<td align="left">アプリのBundle Identifierを入力</td>
</tr>

<tr>
<td align="left">Enter device token</td>
<td align="left">メモしておいたトークンを入力</td>
</tr>

<tr>
<td align="left">Enter message</td>
<td align="left">Push通知のメッセージとなるJSONを入力</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre class="chroma"><code class="language-json:JSON" data-lang="json:JSON">{
    &#34;aps&#34;: {
        &#34;alert&#34;: &#34;Minimal message&#34;,
        &#34;sound&#34;: &#34;default&#34;
    }
}</code></pre></div>
<ul>
<li>Environment</li>
<li>Sandboxにチェック</li>
</ul></li>
</ul></li>

<li><p>Push通知の送信</p>

<ul>
<li>Sendボタンをクリックすると、Push通知が送信されます</li>
</ul></li>

<li><p>Push通知の受信確認</p>

<ul>
<li>通知は、アプリが表示されていない状態（以下の状態）で受信した場合に表示されます

<ul>
<li>アプリが起動していて、Backgroud状態</li>
<li>アプリが起動していない</li>
</ul></li>
</ul>

<p><img src="/images/remotenotification01/push_receive.png" alt="push_receive" /></p></li>
</ol>

<h1 id="まとめ">まとめ</h1>

<ul>
<li>単純にPush通知を受信して、アプリを開くだけならこれだけの実装で済みます</li>
<li>また、以下のような実装も可能です

<ul>
<li>通知にボタン（アクション）を追加して、タップした際に処理を実行する</li>
<li>アプリが起動していない状態でも、アプリを起こしてタスクをバックグラウンドで実行させる</li>
</ul></li>
<li>通知にはUserNotificationsフレームワークを利用するので、以下の点を除いてローカル通知もほぼ同様の実装で受信できます

<ul>
<li>APNsへの登録がない（デバイスの中で完結するため）</li>
<li>通知を送信する処理の実装が必要</li>
</ul></li>
<li>今回作成したサンプルコードは、GitHubに置きました

<ul>
<li><a href="https://github.com/aokiplayer/MinimalRemoteNotificationSample">aokiplayer/MinimalRemoteNotificationSample</a></li>
</ul></li>
</ul>

<h1 id="参考">参考</h1>

<ul>
<li><a href="https://developer.apple.com/documentation/usernotifications">UserNotifications | Apple Developer Documentation</a></li>
<li><a href="https://www.raywenderlich.com/8164-push-notifications-tutorial-getting-started">Push Notifications Tutorial: Getting Started | raywenderlich.com</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>try! Swift Tokyo 2019 感想など</title>
			<link>https://yagamo-style.com/posts/tryswifttokyo2019/</link>
			<pubDate>Wed, 17 Apr 2019 19:16:50 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/tryswifttokyo2019/</guid>
			<description>try! Swift Tokyo 2019 に参加してきました。 今年も会社のブースにいたのでセッション自体はあまり聞くことができませんでしたが、得るものはたくさんありました。 だ</description>
			<content type="html"><![CDATA[

<p>try! Swift Tokyo 2019 に参加してきました。
今年も会社のブースにいたのでセッション自体はあまり聞くことができませんでしたが、得るものはたくさんありました。</p>

<p>だいぶ時間が経ってしまったけど、感想を少し書いてみます。</p>

<h1 id="公式サイト-ハッシュタグなど">公式サイト、ハッシュタグなど</h1>

<ul>
<li><a href="https://www.tryswift.co/events/2019/tokyo/jp/">https://www.tryswift.co/events/2019/tokyo/jp/</a></li>
<li><a href="https://twitter.com/tryswiftconf">@tryswiftconf</a></li>
<li><a href="https://twitter.com/hashtag/tryswiftconf?src=hash">#tryswiftconf</a></li>
</ul>

<h1 id="ここが良かった">ここが良かった</h1>

<h2 id="スポンサーとして">スポンサーとして</h2>

<h3 id="知名度が少し上がってきた">知名度が少し上がってきた</h3>

<ul>
<li>Java 系ではそれなりに知名度がある弊社ですが、モバイル系のカンファレンスに継続して参加することでこちらでも知名度が少しずつ上がってきました。</li>
<li>いろいろな方から、声を掛けて頂けました。</li>
</ul>

<h3 id="商品をお見せするのが大事">商品をお見せするのが大事</h3>

<ul>
<li>今回はマーケティングチームのアイディアで、主に私の執筆したトレーニングテキストのサンプルを展示しました。</li>
<li>実際に手に取ってご覧頂くことで、以下の効果が得られました。

<ul>
<li>弊社の業務やトレーニング内容をイメージ頂けた -&gt; 参加者の皆様との会話のきっかけとなった</li>
<li>たくさんのご意見を頂けた

<ul>
<li>「市販書籍よりもわかりやすい」「ここに書いてるのよりも、こっちのライブラリを使ったほうがいい」</li>
<li>「テキストを売って欲しい」「現場に出る前の教育に使いたい」</li>
</ul></li>
</ul></li>
</ul>

<h2 id="エンジニアとして">エンジニアとして</h2>

<h3 id="世界的なエンジニアに直接聞ける">世界的なエンジニアに直接聞ける</h3>

<ul>
<li>私は IBM Kitura を使い始めているのですが、せっかく Kitura の開発チームが来日されていたので、うまくいかない点を思い切って質問してみました。

<ul>
<li>その上で、Kituraのドキュメント自体に誤りがあることなどを発見できました。 &lt;- 貢献できた！</li>
</ul></li>
<li>セッション自体はあとで動画がアップロードされますが、質問はその場でしかできないので、貴重な経験でした。</li>
<li>英語は、できなくてもこわくないです（もちろん、できた方がいいけど）。

<ul>
<li>言いたいことがはっきりしていれば、文法を多少誤っていたり単語が出てこなかったりしても伝わります。</li>
<li>カンファレンス前日の <a href="https://tryswifttokyo.connpass.com/event/118413/">Global Communication Workshop for try! Swift</a> で、背中を押してもらえた気がします。</li>
</ul></li>
</ul>

<h1 id="今後に向けて">今後に向けて</h1>

<ul>
<li>個人・企業ともスポンサーは続けていきたいです。</li>
<li>参加して良かった！で終わらせない。今は IBM Kitura ブースで頂いた本（抽選に当たりました）も使いながら Kitura を学習してます。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>iOSDC 2018 感想など</title>
			<link>https://yagamo-style.com/posts/iosdc2018/</link>
			<pubDate>Sat, 15 Sep 2018 21:32:57 +0900</pubDate>
			
			<guid>https://yagamo-style.com/posts/iosdc2018/</guid>
			<description>今年も個人サポーター（初回から 3 年連続）として iOSDC に参加してきました。トークには応募してたけど、残念ながら選に漏れました。 あと、弊社は昨年から</description>
			<content type="html"><![CDATA[

<p>今年も個人サポーター（初回から 3 年連続）として iOSDC に参加してきました。トークには応募してたけど、残念ながら選に漏れました。
あと、<a href="https://www.casareal.co.jp/">弊社</a>は昨年からブーススポンサーをやってるので、そっちにも顔を出してました。</p>

<h1 id="公式サイト-ハッシュタグなど">公式サイト、ハッシュタグなど</h1>

<ul>
<li><a href="https://iosdc.jp/2018/">https://iosdc.jp/2018/</a></li>
<li><a href="https://twitter.com/iosdcjp">@iosdcjp</a></li>
<li><a href="https://twitter.com/hashtag/iosdc?src=hash">#iosdc</a></li>
<li><a href="https://qiita.com/winterwind26/items/210e5735d2ce832d0c36">iOSDC 2018 セッション資料まとめ</a></li>
</ul>

<p>今年は <sup>8</sup>&frasl;<sub>30</sub>-<sup>9</sup>&frasl;<sub>2</sub> の開催でしたが、 <sup>8</sup>&frasl;<sub>30</sub>-31 は残念ながら <a href="https://www.casareal.co.jp/ls/service/openseminar/apple/l020">iOSDE</a> に登壇していたので iOSDC には <sup>9</sup>&frasl;<sub>1</sub>,2 のみ参加です（名前が紛らわしい）。</p>

<p>セッションは高度な内容から日常で使える tips 、入門者向けの内容まで幅広く、どのレベルのエンジニアでも学びの得られる門戸の広いカンファレンスでした。特に後者はカンファレンスでは蔑ろにされることが多い気がするけど、いろんなエンジニアが学べて交流できるのって大事だなと思ってます（なので来年もそっち系でトーク応募します）。</p>

<h1 id="ここがよかった">ここがよかった</h1>

<h2 id="参加者として">参加者として</h2>

<ul>
<li>初回からずっと参加してますが、「ここがもうちょっとこうなってるといいな」が毎年着実に改善されています。</li>
<li>昨年導入された「パックマンルール」もすごい！って思ったけど、今年の「機械的席詰めタイム」はそれ以上によく考えられてるなと思いました。</li>
<li>みんな気持ち的には「詰めた方がいいんだろうな」と思いつつ、最初から詰めるのは何となく気が引ける。で、結果的に 3 人掛けだと真ん中が空いちゃって後から来る人が入りづらい。それを上手く解決してるなーととても感心しました。</li>
<li>ノベルティのサコッシュ（斜め掛けのバッグ）。スリーブに入れた MacBook と iPad Pro 10.5 インチがぴったり収まるし、トートバッグと違って両手が空くのでとても便利でした。カンファレンス中、大活躍でした。</li>
<li>バドワイザー（瓶）が今年も継続されてた。</li>
</ul>

<h2 id="スポンサー-サポーターとして">スポンサー＆サポーターとして</h2>

<ul>
<li>昨年ブーススポンサー用に作成して頂いた各社ロゴの缶バッジは、参加者がブースを回るモチベーションとなりとても好評でした（あと、登壇者に目立つところに付けて頂くことで露出を狙えた）。</li>
<li>今年はそういう感じのはないのか…とちょっとだけ残念な気持ちでしたが、運営の方々の思いである「参加者も一緒にイベントを作っていく仲間」というのが 3 年目ともなるとしっかり浸透していて、結果的に多くの方々に立ち寄って頂けました。</li>
<li>昨年は個人サポーター（個人スポンサー）の T シャツが一般と同じだったので、パーカーを着てないと見分けがつかなかったけど今年は一般がシルバー、個人サポーターがゴールドと違いがあってうれしかった（でもスポンサーブース用に会社のポロシャツを着てたので、着るチャンスがなかった…）。</li>
<li>来年もやります。</li>
</ul>

<h1 id="あれ-と思った点">あれ？と思った点</h1>

<ul>
<li>昨年は LT の投票＆賞ってレギュラートークとは別にありませんでしたっけ？（うろ覚え）</li>
</ul>

<hr />

<h1 id="参加したトークのひとこと感想">参加したトークのひとこと感想</h1>

<h2 id="9-1"><sup>9</sup>&frasl;<sub>1</sub></h2>

<h3 id="詳解-fastfile">詳解 Fastfile</h3>

<ul>
<li>スピーカー: ぎぎにゃん さん <a href="https://twitter.com/giginet">@giginet</a></li>
<li>「詳解 Fastlane だと勘違いしてた人が…」あっ、はい</li>
<li>Fastfile の話でしたが、以下のように Fastlane に限らず一般的に有用な内容でした

<ul>
<li>値は環境変数から読み込む</li>
<li>設定とロジックを分ける</li>
</ul></li>
<li>私自身は Fastlane を使い始めたばかりなので、実際にこの辺りを見ながら少しずつ適用していきたいです</li>
</ul>

<h3 id="depth-in-depth">Depth in Depth</h3>

<ul>
<li>スピーカー: 堤修一 さん <a href="https://twitter.com/shu223">@shu223</a></li>
<li>深度はボケのためだけではない、という話でした</li>
<li>深度の種類やセンサーの仕組みなどから、丁寧に説明されていました</li>
<li>私自身は、深度を可視化するアプリを利用してていつも面白いなーと思ってましたが、意外と取るのは単純だと感じました（でもやったら多分難しいとは思う）</li>
<li>説明の明快さもさることながら、人物をくり抜いて背景合成するというキャッチーなデモが非常に分かり易かったです</li>
<li>この日に生まれたお子さんが、私の娘と同じ誕生日なので何となくうれしいです。おめでとうございます！</li>
</ul>

<h3 id="5000-行の-uitableview-を差分更新する">5000 行の UITableView を差分更新する</h3>

<ul>
<li>スピーカー: ばんじゅん さん <a href="https://twitter.com/banjun">@banjun</a></li>
<li>差分更新のライブラリ比較や、パフォーマンスを落とさないための試行錯誤などに関する内容でした</li>
<li>UITableView の差分更新については、 <sup>8</sup>&frasl;<sub>30</sub>, 31 にもいくつかセッションがあったようです</li>
<li>ライブラリを入れればそれで解決、とは行かないようでした</li>
<li>実際にパフォーマンスが上がらずに、そのボトルネックを突き止め改善するプロセス自体が有用でした</li>
</ul>

<h3 id="気遣いの-ios-プログラミング">気遣いの iOS  プログラミング</h3>

<ul>
<li>スピーカー: ezura さん <a href="https://twitter.com/eduraaa">@eduraaa</a></li>
<li>どの場面でも利用すべきベストなものはなく、いろいろな場面に活用できる引き出しを増やすことが重要というお話でした</li>
<li>いくつか具体例を出しながら、コードの意図をより伝えやすい記述を紹介していました</li>
<li>紹介されていたどれも、 Swift らしい言語機能を上手く活用していました</li>
<li>そのため、むしろ Java などの言語から移ってきた人にはすぐには理解しがたいのかもしれないと感じました</li>
<li>メンバーの習熟度も考慮して採用する記述方法を記述する必要があり、引き出しを増やしておくのは重要だと思います</li>
</ul>

<hr />

<h2 id="9-2"><sup>9</sup>&frasl;<sub>2</sub></h2>

<h3 id="ios-マイクロインタラクション入門">iOS マイクロインタラクション入門</h3>

<ul>
<li>スピーカー: kiwi さん <a href="https://twitter.com/koga_wiwi">@koga_wiwi</a></li>
<li>「マイクロインタラクション = ちょっとした相互作用」を活用することで、操作の心地良さにつながるという話でした</li>
<li>いくつか、具体的な実装方法も紹介しながらのセッションでした</li>
<li>機能要件的には不要であるものの、特にコンシュマー向けのアプリでは UX が重要ですよね</li>
<li>本のちょっとしたことでも、全く印象は変わるので少しずつ試してみたいです</li>
</ul>

<h3 id="プロトコルを使って複数サービスを跨いだ-music-player-を実装する">プロトコルを使って複数サービスを跨いだ music player を実装する</h3>

<ul>
<li>スピーカー: kumabook さん <a href="https://twitter.com/kumabook">@kumabook</a></li>
<li>実際に開発した、複数の音楽サービスをサポートするアプリ開発時の知見でした</li>
<li>Apple Music の曲の後に Spotify の曲、その後に SoundCloud の…といったような再生が可能となっているそうです</li>
<li>それぞれのサービスごとに利用する API の形式は違うので、プロトコルを活用して共通化されていました</li>
<li>サービスによってサポートされていない機能などもある中で、できる限り共通化するための試行錯誤があったようです</li>
<li>ただ、「再生する」「停止する」などの根幹部分はある程度近いので、その辺りを中心に考えると設計がしやすそうでした</li>
</ul>

<h3 id="auto-layout-エラー診断所">Auto Layout エラー診断所</h3>

<ul>
<li>スピーカー: akatsuki174 さん <a href="https://twitter.com/akatsuki174">@akatsuki174</a></li>
<li>Auto Layout 利用時に発生するエラーや警告を解消するためのデバッグ手法を、具体例とともに紹介するセッションでした</li>
<li>また、その際に役立つツールなどの紹介もあり、 Auto Layout を利用している場合はすぐに役立つ構成となっていました</li>
<li>Auto Layout については、初学者のみならず苦戦すると思います</li>
<li>このセッションの内容はまさに「明日からすぐ使える」ものなので、ぜひ取り入れていきたいです</li>
</ul>

<h3 id="教育-企業におけるデバイス管理手法について">教育・企業におけるデバイス管理手法について</h3>

<ul>
<li>スピーカー: 大西正恭 さん <a href="https://twitter.com/kenchan0130">@kenchan0130</a></li>
<li>組織内における Apple デバイスの管理について、概要が全体的に整理されていました</li>
<li>なぜ必要なのか、何ができるのか、何が必要なのかが整理されたセッションでした</li>
<li>私自身は Apple 認定 iOS Deployment Essentials で教えているので、内容はだいたいわかってました</li>
<li>ただ、具体的な MDM 製品を導入して管理している立場の方のご意見を伺いたくて参加しました</li>
<li>デベロッパーには意外とデバイス管理は知られていないので、こういう内容のが増えるといいなと思います</li>
</ul>

<h3 id="ios-でグラフを描くために必要な知識について">iOS でグラフを描くために必要な知識について</h3>

<ul>
<li>スピーカー: 須藤将史 さん <a href="https://twitter.com/kurotyann9696">@kurotyann9696</a></li>
<li>数学的な円の基礎知識の復習から、段階を追いながら円グラフを書いていく内容でした</li>
<li>「こんな風になってるといいよね」から「それを実現するためには」を明確に示しながら、理解を深める説明がなされていました</li>
<li>私自身は現状、「なんとなく難しそう」という理由でアプリ内でグラフなどは使っていませんが、このセッションを聞いて気持ちが変わりました</li>
<li>説明が非常に明快で、グラフの書き方以上にワクワク感が伝わってきました</li>
<li>やはり情報を伝えるためには文字情報よりも、グラフや図解が圧倒的に有効だというのを再認識しました</li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
